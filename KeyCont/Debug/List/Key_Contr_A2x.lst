##############################################################################
#                                                                            #
# IAR Atmel AVR C/EC++ Compiler V2.26N/WIN             01/Oct/2002  17:44:09 #
# Copyright 1996-2001 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Source file  =  C:\AVR_CC\KEY_CONTRL\Key_Contr_A2x.c                    #
#    Command line =  --cpu=m161 -ms -o C:\AVR_CC\KEY_CONTRL\Debug\Obj\ -I    #
#                    C:\AVR_CC\AVR\SRC\CLIB\INC\ -lC                         #
#                    C:\AVR_CC\KEY_CONTRL\Debug\List\ -lA                    #
#                    C:\AVR_CC\KEY_CONTRL\Debug\List\ -e -y                  #
#                    --initializers_in_flash -z3 --no_cse --no_inline        #
#                    --no_code_motion --no_cross_call --no_clustering        #
#                    --debug -DENABLE_BIT_DEFINITIONS                        #
#                    C:\AVR_CC\KEY_CONTRL\Key_Contr_A2x.c                    #
#    List file    =  C:\AVR_CC\KEY_CONTRL\Debug\List\Key_Contr_A2x.lst       #
#    Object file  =  C:\AVR_CC\KEY_CONTRL\Debug\Obj\Key_Contr_A2x.r90        #
#                                                                            #
#                                                                            #
##############################################################################

      1          /*********************************************
      2          * Programm:       Key_Disp_Contr_A2x.c       *
      3          *                                            *
      4          *  Note:  For projekt MINIROBIT BUILDING     *
      5          *                                            *
      6          * Name:  Module Code adapted from Atmel AVR  *
      7          *        Application for Amega161            *
      8          *        KEY CONTROLS Driver                 *
      9          *        DISPLAY CONTROLS Driver                                    *
     10          * Edit data:     17.09.2002                  *
     11          * Last data:     01.10.2002                  *
     12          * Version:       0.02                        *
     13          **********************************************/
     14          
     15          #include "iom161.h"

   \                                 In segment ABSOLUTE, at 0x2d
   \   union <unnamed> volatile __io _A_SPCR;
   \                     _A_SPCR:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x2e
   \   union <unnamed> volatile __io _A_SPSR;
   \                     _A_SPSR:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x2f
   \   union <unnamed> volatile __io _A_SPDR;
   \                     _A_SPDR:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x33
   \   union <unnamed> volatile __io _A_PINC;
   \                     _A_PINC:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x34
   \   union <unnamed> volatile __io _A_DDRC;
   \                     _A_DDRC:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x35
   \   union <unnamed> volatile __io _A_PORTC;
   \                     _A_PORTC:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x37
   \   union <unnamed> volatile __io _A_DDRB;
   \                     _A_DDRB:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x38
   \   union <unnamed> volatile __io _A_PORTB;
   \                     _A_PORTB:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x3a
   \   union <unnamed> volatile __io _A_DDRA;
   \                     _A_DDRA:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x3b
   \   union <unnamed> volatile __io _A_PORTA;
   \                     _A_PORTA:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x50
   \   union <unnamed> volatile __io _A_SFIOR;
   \                     _A_SFIOR:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x52
   \   union <unnamed> volatile __io _A_TCNT0;
   \                     _A_TCNT0:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x53
   \   union <unnamed> volatile __io _A_TCCR0;
   \                     _A_TCCR0:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x59
   \   union <unnamed> volatile __io _A_TIMSK;
   \                     _A_TIMSK:
   \   00000000                              DS 1
     16          #include "key_contr_A2x.h"

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   static unsigned char volatile __near A21_y;
   \                     A21_y:
   \   00000000                              DS 1

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   static unsigned char volatile __near c_y1;
   \                     c_y1:
   \   00000000                              DS 1

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   static unsigned char volatile __near SCN0[8];
   \                     SCN0:
   \   00000000                              DS 8

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   static unsigned char volatile __near Head_SCN0;
   \                     Head_SCN0:
   \   00000000                              DS 1

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   static unsigned char volatile __near SCN1[8];
   \                     SCN1:
   \   00000000                              DS 8

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   static unsigned char volatile __near Head_SCN1;
   \                     Head_SCN1:
   \   00000000                              DS 1

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   static unsigned char volatile __near SCN2[8];
   \                     SCN2:
   \   00000000                              DS 8

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   static unsigned char volatile __near Head_SCN2;
   \                     Head_SCN2:
   \   00000000                              DS 1

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   static unsigned char volatile __near SCN3[8];
   \                     SCN3:
   \   00000000                              DS 8

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   static unsigned char volatile __near Head_SCN3;
   \                     Head_SCN3:
   \   00000000                              DS 1

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   static unsigned char volatile __near SUM_SCN0;
   \                     SUM_SCN0:
   \   00000000                              DS 1

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   static unsigned char volatile __near SUM_SCN1;
   \                     SUM_SCN1:
   \   00000000                              DS 1

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   static unsigned char volatile __near SUM_SCN2;
   \                     SUM_SCN2:
   \   00000000                              DS 1

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   static unsigned char volatile __near SUM_SCN3;
   \                     SUM_SCN3:
   \   00000000                              DS 1

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   static unsigned char volatile __near SUM_SCN4;
   \                     SUM_SCN4:
   \   00000000                              DS 1

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   static unsigned char volatile __near SUM_SCN5;
   \                     SUM_SCN5:
   \   00000000                              DS 1

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   static unsigned char volatile __near SUM_SCN6;
   \                     SUM_SCN6:
   \   00000000                              DS 1

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   static unsigned char volatile __near SUM_SCN7;
   \                     SUM_SCN7:
   \   00000000                              DS 1

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   static unsigned char volatile __near SUM_SCN8;
   \                     SUM_SCN8:
   \   00000000                              DS 1

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   static unsigned char volatile __near SUM_SCN9;
   \                     SUM_SCN9:
   \   00000000                              DS 1

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   static unsigned char volatile __near SUM_SCN10;
   \                     SUM_SCN10:
   \   00000000                              DS 1

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   static unsigned char volatile __near SUM_SCN11;
   \                     SUM_SCN11:
   \   00000000                              DS 1

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   static unsigned char volatile __near SUM_SCN12;
   \                     SUM_SCN12:
   \   00000000                              DS 1

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   static unsigned char volatile __near SUM_SCN13;
   \                     SUM_SCN13:
   \   00000000                              DS 1

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   static unsigned char volatile __near SUM_SCN14;
   \                     SUM_SCN14:
   \   00000000                              DS 1

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   static unsigned char volatile __near SUM_SCN15;
   \                     SUM_SCN15:
   \   00000000                              DS 1

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   static unsigned char volatile __near NEW_SCN0;
   \                     NEW_SCN0:
   \   00000000                              DS 1

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   static unsigned char volatile __near NEW_SCN1;
   \                     NEW_SCN1:
   \   00000000                              DS 1

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   static unsigned char volatile __near NEW_SCN2;
   \                     NEW_SCN2:
   \   00000000                              DS 1

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   static unsigned char volatile __near NEW_SCN3;
   \                     NEW_SCN3:
   \   00000000                              DS 1

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   static unsigned char volatile __near EVEN_M00[4];
   \                     EVEN_M00:
   \   00000000                              DS 4

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   static unsigned char volatile __near EVEN_M01[4];
   \                     EVEN_M01:
   \   00000000                              DS 4

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   static unsigned char volatile __near EVEN_M10[4];
   \                     EVEN_M10:
   \   00000000                              DS 4

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   static unsigned char volatile __near EVEN_M11[4];
   \                     EVEN_M11:
   \   00000000                              DS 4

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   static unsigned char volatile __near EVEN_M00_SUM;
   \                     EVEN_M00_SUM:
   \   00000000                              DS 1

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   static unsigned char volatile __near EVEN_M01_SUM;
   \                     EVEN_M01_SUM:
   \   00000000                              DS 1

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   static unsigned char volatile __near EVEN_M10_SUM;
   \                     EVEN_M10_SUM:
   \   00000000                              DS 1

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   static unsigned char volatile __near EVEN_M11_SUM;
   \                     EVEN_M11_SUM:
   \   00000000                              DS 1

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   static unsigned char volatile __near OLD_SCN0;
   \                     OLD_SCN0:
   \   00000000                              DS 1

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   static unsigned char volatile __near OLD_SCN1;
   \                     OLD_SCN1:
   \   00000000                              DS 1

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   static unsigned char volatile __near OLD_SCN2;
   \                     OLD_SCN2:
   \   00000000                              DS 1

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   static unsigned char volatile __near OLD_SCN3;
   \                     OLD_SCN3:
   \   00000000                              DS 1

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   static unsigned char volatile __near M00[4];
   \                     M00:
   \   00000000                              DS 4

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   static unsigned char volatile __near M01[4];
   \                     M01:
   \   00000000                              DS 4

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   static unsigned char volatile __near M10[4];
   \                     M10:
   \   00000000                              DS 4

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   static unsigned char volatile __near M11[4];
   \                     M11:
   \   00000000                              DS 4

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   static unsigned char volatile __near mTC_0;
   \                     mTC_0:
   \   00000000                              DS 1

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   static unsigned char volatile __near cTest;
   \                     cTest:
   \   00000000                              DS 1

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   static unsigned char volatile __near A22_y;
   \                     A22_y:
   \   00000000                              DS 1

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   static unsigned char volatile __near DS[16];
   \                     `DS`:
   \   00000000                              DS 16

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   static unsigned char volatile __near DAN[16];
   \                     DAN:
   \   00000000                              DS 16

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   static unsigned char volatile __near DST[16];
   \                     DST:
   \   00000000                              DS 16

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   static unsigned int volatile __near COUNT_TIME;
   \                     COUNT_TIME:
   \   00000000                              DS 2

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   static unsigned char volatile __near DISP_POS;
   \                     DISP_POS:
   \   00000000                              DS 1
     17          #include "Code_ASCII_A2x.h"

   \                                 In segment NEAR_F, align 1, keep-with-next
   \   unsigned char const __flash CodeASCII[128];
   \                     CodeASCII:
   \   00000000   FF                         DB 255
   \   00000001   FF                         DB 255
   \   00000002   FF                         DB 255
   \   00000003   FF                         DB 255
   \   00000004   FF                         DB 255
   \   00000005   FF                         DB 255
   \   00000006   FF                         DB 255
   \   00000007   FF                         DB 255
   \   00000008   FF                         DB 255
   \   00000009   FF                         DB 255
   \   0000000A   FF                         DB 255
   \   0000000B   FF                         DB 255
   \   0000000C   FF                         DB 255
   \   0000000D   FF                         DB 255
   \   0000000E   FF                         DB 255
   \   0000000F   FF                         DB 255
   \   00000010   FF                         DB 255
   \   00000011   FF                         DB 255
   \   00000012   FF                         DB 255
   \   00000013   FF                         DB 255
   \   00000014   FF                         DB 255
   \   00000015   FF                         DB 255
   \   00000016   FF                         DB 255
   \   00000017   FF                         DB 255
   \   00000018   FF                         DB 255
   \   00000019   FF                         DB 255
   \   0000001A   FF                         DB 255
   \   0000001B   FF                         DB 255
   \   0000001C   FF                         DB 255
   \   0000001D   FF                         DB 255
   \   0000001E   FF                         DB 255
   \   0000001F   FF                         DB 255
   \   00000020   FF                         DB 255
   \   00000021   FF                         DB 255
   \   00000022   FF                         DB 255
   \   00000023   FF                         DB 255
   \   00000024   FF                         DB 255
   \   00000025   FF                         DB 255
   \   00000026   FF                         DB 255
   \   00000027   FF                         DB 255
   \   00000028   FF                         DB 255
   \   00000029   FF                         DB 255
   \   0000002A   FF                         DB 255
   \   0000002B   FF                         DB 255
   \   0000002C   FF                         DB 255
   \   0000002D   FF                         DB 255
   \   0000002E   FF                         DB 255
   \   0000002F   FF                         DB 255
   \   00000030   81                         DB 129
   \   00000031   F3                         DB 243
   \   00000032   49                         DB 73
   \   00000033   61                         DB 97
   \   00000034   33                         DB 51
   \   00000035   25                         DB 37
   \   00000036   FB                         DB 251
   \   00000037   B1                         DB 177
   \   00000038   01                         DB 1
   \   00000039   21                         DB 33
   \   0000003A   FF                         DB 255
   \   0000003B   FF                         DB 255
   \   0000003C   FF                         DB 255
   \   0000003D   FF                         DB 255
   \   0000003E   FF                         DB 255
   \   0000003F   FF                         DB 255
   \   00000040   FF                         DB 255
   \   00000041   11                         DB 17
   \   00000042   01                         DB 1
   \   00000043   8D                         DB 141
   \   00000044   FF                         DB 255
   \   00000045   0D                         DB 13
   \   00000046   1D                         DB 29
   \   00000047   FF                         DB 255
   \   00000048   13                         DB 19
   \   00000049   FF                         DB 255
   \   0000004A   FF                         DB 255
   \   0000004B   FF                         DB 255
   \   0000004C   87                         DB 135
   \   0000004D   FF                         DB 255
   \   0000004E   FF                         DB 255
   \   0000004F   81                         DB 129
   \   00000050   FF                         DB 255
   \   00000051   19                         DB 25
   \   00000052   FF                         DB 255
   \   00000053   25                         DB 37
   \   00000054   FF                         DB 255
   \   00000055   13                         DB 19
   \   00000056   FF                         DB 255
   \   00000057   FF                         DB 255
   \   00000058   FF                         DB 255
   \   00000059   FF                         DB 255
   \   0000005A   FF                         DB 255
   \   0000005B   FF                         DB 255
   \   0000005C   FF                         DB 255
   \   0000005D   FF                         DB 255
   \   0000005E   FF                         DB 255
   \   0000005F   EF                         DB 239
   \   00000060   FF                         DB 255
   \   00000061   FF                         DB 255
   \   00000062   07                         DB 7
   \   00000063   4F                         DB 79
   \   00000064   43                         DB 67
   \   00000065   FF                         DB 255
   \   00000066   FF                         DB 255
   \   00000067   FF                         DB 255
   \   00000068   1F                         DB 31
   \   00000069   FF                         DB 255
   \   0000006A   FF                         DB 255
   \   0000006B   FF                         DB 255
   \   0000006C   CF                         DB 207
   \   0000006D   FF                         DB 255
   \   0000006E   FF                         DB 255
   \   0000006F   57                         DB 87
   \   00000070   47                         DB 71
   \   00000071   FF                         DB 255
   \   00000072   FF                         DB 255
   \   00000073   5F                         DB 95
   \   00000074   FF                         DB 255
   \   00000075   FF                         DB 255
   \   00000076   C7                         DB 199
   \   00000077   FF                         DB 255
   \   00000078   FF                         DB 255
   \   00000079   FF                         DB 255
   \   0000007A   FF                         DB 255
   \   0000007B   FF                         DB 255
   \   0000007C   FF                         DB 255
   \   0000007D   F3                         DB 243
   \   0000007E   FF                         DB 255
   \   0000007F   FF                         DB 255
     18          #include "stdio.h"
     19          #include "ctype.h"
     20          #include "c:\AVR_CC\UART_MOD\uart0_A1x_ext_func.h"
     21          #include "c:\AVR_CC\Functions\scan_cmd.h"

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   static unsigned char volatile __near BUF_CMD[40];
   \                     BUF_CMD:
   \   00000000                              DS 40

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   static unsigned char volatile __near Head_CMD;
   \                     Head_CMD:
   \   00000000                              DS 1
     22          
     23          
     24          /* Debug test KEY_CONTR for module */
     25          #define TEST_KEY_CONTR
     26          
     27          /*--------------------------*/
     28          /*  Reset  DISP_CONTR_A2.2  */

   \                                 In segment CODE, align 2, keep-with-next
     29          void Reset_DISP_CONTR ( void ) // Clear Arrs and Variables
     30              {
   \   __nearfunc void Reset_DISP_CONTR();
   \                     Reset_DISP_CONTR:
   \   00000000   2F59                       MOV     R21,R25
   \   00000002   2F48                       MOV     R20,R24
   \   00000004   9723                       SBIW    R29 : R28,3
     31              volatile unsigned char cTmp;
     32              volatile int i;
     33             /* Status DISP_CONTRL y=0 Reset */
     34              A22_y = 0;
   \   00000006   E000                       LDI     R16,0
   \   00000008   9300....                   STS     A22_y,R16
     35             /* Erase Array and Variabke */
     36             for (i=0;i<=DISP_LEN-1;i++)
   \   0000000C   E000                       LDI     R16,0
   \   0000000E   E010                       LDI     R17,0
   \   00000010   8308                       ST      Y,R16
   \   00000012   8319                       STD     Y+1,R17
   \   00000014   C01B                       RJMP    ??Reset_DISP_CONTR_0
     37                {
     38                DS[i] = '1';             // Erase Arr
   \                     ??Reset_DISP_CONTR_1:
   \   00000016   E301                       LDI     R16,49
   \   00000018   8128                       LD      R18,Y
   \   0000001A   8139                       LDD     R19,Y+1
   \   0000001C   01F9                       MOVW    R31 : R30,R19 : R18
   \   0000001E   ....                       SUBI    R30,LOW((-(`DS`) & 0xFFFF))
   \   00000020   ....                       SBCI    R31,(-(`DS`) & 0xFFFF) >> 8
   \   00000022   8300                       ST      Z,R16
     39                DAN[i] = 0xA0;        // ( Test A0= No Animation) Erase Arr
   \   00000024   EA00                       LDI     R16,160
   \   00000026   8128                       LD      R18,Y
   \   00000028   8139                       LDD     R19,Y+1
   \   0000002A   01F9                       MOVW    R31 : R30,R19 : R18
   \   0000002C   ....                       SUBI    R30,LOW((-(DAN) & 0xFFFF))
   \   0000002E   ....                       SBCI    R31,(-(DAN) & 0xFFFF) >> 8
   \   00000030   8300                       ST      Z,R16
     40                DST[i] = 5;              // Erase Arr
   \   00000032   E005                       LDI     R16,5
   \   00000034   8128                       LD      R18,Y
   \   00000036   8139                       LDD     R19,Y+1
   \   00000038   01F9                       MOVW    R31 : R30,R19 : R18
   \   0000003A   ....                       SUBI    R30,LOW((-(DST) & 0xFFFF))
   \   0000003C   ....                       SBCI    R31,(-(DST) & 0xFFFF) >> 8
   \   0000003E   8300                       ST      Z,R16
   \   00000040   8108                       LD      R16,Y
   \   00000042   8119                       LDD     R17,Y+1
   \   00000044   5F0F                       SUBI    R16,255
   \   00000046   4F1F                       SBCI    R17,255
   \   00000048   8308                       ST      Y,R16
   \   0000004A   8319                       STD     Y+1,R17
   \                     ??Reset_DISP_CONTR_0:
   \   0000004C   8188                       LD      R24,Y
   \   0000004E   8199                       LDD     R25,Y+1
   \   00000050   3180                       CPI     R24,16
   \   00000052   4090                       SBCI    R25,0
   \   00000054   F304                       BRLT    ??Reset_DISP_CONTR_1
     41                };
     42          
     43              COUNT_TIME = 0;
   \   00000056   E000                       LDI     R16,0
   \   00000058   E010                       LDI     R17,0
   \   0000005A   ....                       LDI     R30,LOW(COUNT_TIME)
   \   0000005C   ....                       LDI     R31,(COUNT_TIME) >> 8
   \   0000005E   8300                       ST      Z,R16
   \   00000060   8311                       STD     Z+1,R17
     44              DISP_POS = 0;
   \   00000062   E000                       LDI     R16,0
   \   00000064   9300....                   STS     DISP_POS,R16
     45              /* Port Disp OUTPUT */
     46              DISP_PORT_CONT = 0xff;  // All bits Port DISP output
   \   00000068   EF0F                       LDI     R16,255
   \   0000006A   BB0A                       OUT     0x1A,R16
     47              /* y0 -> y1 */
     48              A22_y = 1;           // New Status A2.2 Enable display indicator
   \   0000006C   E001                       LDI     R16,1
   \   0000006E   9300....                   STS     A22_y,R16
     49            }
   \   00000072   9623                       ADIW    R29 : R28,3
   \   00000074   2F84                       MOV     R24,R20
   \   00000076   2F95                       MOV     R25,R21
   \   00000078   9508                       RET
     50          
     51          /*  END Reset  DISP_CONTR_A2.2  */
     52          /*------------------------------*/
     53          
     54          /*----------------------------------------------*/
     55          /*  Write Symbol to Indicator  DISP_CONTR_A2.2  */

   \                                 In segment CODE, align 2, keep-with-next
     56          void Wr_Sym_Disp ( char id_pos ) // Clear Arrs and Variables
     57          {
   \   __nearfunc void Wr_Sym_Disp(char);
   \                     Wr_Sym_Disp:
   \   00000000   938A                       ST      -Y,R24
     58            unsigned char cTmp;
     59            unsigned char cBits;
     60            unsigned char cFl;
     61          
     62            /* 1. Off Led Indicator */
     63            DISP_PORT_CONT = 0xff;  // All bits Port DISP output
   \   00000002   EF1F                       LDI     R17,255
   \   00000004   BB1A                       OUT     0x1A,R17
     64            DISP_PORT_OUT = (DISP_PORT_OUT | 0xff);    // Off Indicator Posicion
   \   00000006   B31B                       IN      R17,0x1B
   \   00000008   EF2F                       LDI     R18,255
   \   0000000A   BB2B                       OUT     0x1B,R18
     65            /* 2. New Posicion Indicator */
     66             DISP_POS = (id_pos + 1);   // New posicion indndicator
   \   0000000C   9503                       INC     R16
   \   0000000E   9300....                   STS     DISP_POS,R16
     67             if ( DISP_POS > DISP_LEN-1)    // if posicion > size buffer indicator
   \   00000012   9100....                   LDS     R16,DISP_POS
   \   00000016   3100                       CPI     R16,16
   \   00000018   F018                       BRCS    ??Wr_Sym_Disp_0
     68             {
     69             DISP_POS = 0;
   \   0000001A   E000                       LDI     R16,0
   \   0000001C   9300....                   STS     DISP_POS,R16
     70             };
     71            /* 3. Calculate animacion Symbols */
     72          
     73              /* 3.1 Test Bits High  0=symbol ASCII or 1=Field Bits */
     74              cTmp = (DAN[DISP_POS] & ~(0x1F) ) >> 7 ;
   \                     ??Wr_Sym_Disp_0:
   \   00000020   9100....                   LDS     R16,DISP_POS
   \   00000024   E010                       LDI     R17,0
   \   00000026   01F8                       MOVW    R31 : R30,R17 : R16
   \   00000028   ....                       SUBI    R30,LOW((-(DAN) & 0xFFFF))
   \   0000002A   ....                       SBCI    R31,(-(DAN) & 0xFFFF) >> 8
   \   0000002C   8100                       LD      R16,Z
   \   0000002E   0F00                       LSL     R16
   \   00000030   E000                       LDI     R16,0
   \   00000032   1F00                       ROL     R16
     75              switch (cTmp)
   \   00000034   5000                       SUBI    R16,0
   \   00000036   F489                       BRNE    ??Wr_Sym_Disp_1
     76              {
     77              case 0:   // Code symbols to bits
     78              cBits = CodeASCII[ DS[DISP_POS] & 0x7f ];  // Bits To Output PORT DISPLAY
   \   00000038   ....                       LDI     R16,LOW(CodeASCII)
   \   0000003A   ....                       LDI     R17,(CodeASCII) >> 8
   \   0000003C   9120....                   LDS     R18,DISP_POS
   \   00000040   E030                       LDI     R19,0
   \   00000042   01F9                       MOVW    R31 : R30,R19 : R18
   \   00000044   ....                       SUBI    R30,LOW((-(`DS`) & 0xFFFF))
   \   00000046   ....                       SBCI    R31,(-(`DS`) & 0xFFFF) >> 8
   \   00000048   8120                       LD      R18,Z
   \   0000004A   2FE2                       MOV     R30,R18
   \   0000004C   E0F0                       LDI     R31,0
   \   0000004E   77EF                       ANDI    R30,0x7F
   \   00000050   70F0                       ANDI    R31,0x00
   \   00000052   0FE0                       ADD     R30,R16
   \   00000054   1FF1                       ADC     R31,R17
   \   00000056   9184                       LPM     R24,Z
   \   00000058   C007                       RJMP    ??Wr_Sym_Disp_2
     79              break;
     80              default: //  Code = Bits output
     81              cBits = DS[DISP_POS]; // Bits To Output PORT DISPLAY
   \                     ??Wr_Sym_Disp_1:
   \   0000005A   9100....                   LDS     R16,DISP_POS
   \   0000005E   E010                       LDI     R17,0
   \   00000060   01F8                       MOVW    R31 : R30,R17 : R16
   \   00000062   ....                       SUBI    R30,LOW((-(`DS`) & 0xFFFF))
   \   00000064   ....                       SBCI    R31,(-(`DS`) & 0xFFFF) >> 8
   \   00000066   8180                       LD      R24,Z
     82              break;
     83              };
     84          
     85              /* 3.2 Test Bits b6,b5  Type Animacion */
     86              cTmp = (DAN[DISP_POS] &  ~(0x1F) ) >> 5 ;
   \                     ??Wr_Sym_Disp_2:
   \   00000068   9100....                   LDS     R16,DISP_POS
   \   0000006C   E010                       LDI     R17,0
   \   0000006E   01F8                       MOVW    R31 : R30,R17 : R16
   \   00000070   ....                       SUBI    R30,LOW((-(DAN) & 0xFFFF))
   \   00000072   ....                       SBCI    R31,(-(DAN) & 0xFFFF) >> 8
   \   00000074   8100                       LD      R16,Z
   \   00000076   9502                       SWAP    R16
   \   00000078   700F                       ANDI    R16,0x0F
   \   0000007A   9506                       LSR     R16
     87              cTmp = cTmp & ~(0x4); // Clr bits
   \   0000007C   7F0B                       ANDI    R16,0xFB
   \   0000007E   E010                       LDI     R17,0
     88              switch (cTmp)
   \   00000080   5000                       SUBI    R16,0
   \   00000082   F019                       BREQ    ??Wr_Sym_Disp_3
   \   00000084   5002                       SUBI    R16,2
   \   00000086   F019                       BREQ    ??Wr_Sym_Disp_4
   \   00000088   C023                       RJMP    ??Wr_Sym_Disp_5
     89              {
     90              case 0:   // Indicator OFF
     91              cBits = 0xFF;
   \                     ??Wr_Sym_Disp_3:
   \   0000008A   EF8F                       LDI     R24,255
   \   0000008C   C021                       RJMP    ??Wr_Sym_Disp_5
     92              break;
     93              case 2:  // Indicator ON-OFF if 0 < DST[...] < COUNT_TIME
     94                cFl = (COUNT_TIME / 100 / DST[DISP_POS]+0.5); //
   \                     ??Wr_Sym_Disp_4:
   \   0000008E   ....                       LDI     R30,LOW(COUNT_TIME)
   \   00000090   ....                       LDI     R31,(COUNT_TIME) >> 8
   \   00000092   8100                       LD      R16,Z
   \   00000094   8111                       LDD     R17,Z+1
   \   00000096   E644                       LDI     R20,100
   \   00000098   E050                       LDI     R21,0
   \   0000009A   ........                   CALL    ?US_DIVMOD_L02
   \   0000009E   9120....                   LDS     R18,DISP_POS
   \   000000A2   E030                       LDI     R19,0
   \   000000A4   01F9                       MOVW    R31 : R30,R19 : R18
   \   000000A6   ....                       SUBI    R30,LOW((-(DST) & 0xFFFF))
   \   000000A8   ....                       SBCI    R31,(-(DST) & 0xFFFF) >> 8
   \   000000AA   8140                       LD      R20,Z
   \   000000AC   E050                       LDI     R21,0
   \   000000AE   ........                   CALL    ?US_DIVMOD_L02
   \   000000B2   E020                       LDI     R18,0
   \   000000B4   E030                       LDI     R19,0
   \   000000B6   ........                   CALL    ?UL2F_L04
   \   000000BA   E040                       LDI     R20,0
   \   000000BC   E050                       LDI     R21,0
   \   000000BE   E060                       LDI     R22,0
   \   000000C0   E37F                       LDI     R23,63
   \   000000C2   ........                   CALL    ?F_ADD_L04
   \   000000C6   ........                   CALL    ?F2L_L04
     95                if ( (cFl & 0x01) == 0 )
   \   000000CA   FB00                       BST     R16,0
   \   000000CC   F40E                       BRTC    ??Wr_Sym_Disp_5
     96                  {
     97                  cBits = cBits; // Indicator ON
     98                  }
     99                  else
    100                  {
    101                  cBits = 0xFF; // Indicator OFF
   \   000000CE   EF8F                       LDI     R24,255
    102                  };
    103              break;
    104              default:
    105              cBits = cBits; // Indicator ON
    106              break;
    107              };
    108          /* 4. Write Fields Bits to Port Indicator */
    109            /* 4.1 Write Fields Bits to Port Indicator */
    110            SetBit( DISP_POS_CONT, DISP_POS_0); // Mode Bit port disp output
   \                     ??Wr_Sym_Disp_5:
   \   000000D0   9ABC                       SBI     0x17,0x04
    111            SetBit( DISP_POS_CONT, DISP_POS_1); // Mode Bit port disp output
   \   000000D2   9ABD                       SBI     0x17,0x05
    112            SetBit( DISP_POS_CONT, DISP_POS_2); // Mode Bit port disp output
   \   000000D4   9ABE                       SBI     0x17,0x06
    113            SetBit( DISP_POS_CONT, DISP_POS_3); // Mode Bit port disp output
   \   000000D6   9ABF                       SBI     0x17,0x07
    114              if ( (DISP_POS & 0x01) == 0)  // test p0
   \   000000D8   ....                       LDI     R30,LOW(DISP_POS)
   \   000000DA   ....                       LDI     R31,(DISP_POS) >> 8
   \   000000DC   8100                       LD      R16,Z
   \   000000DE   FD00                       SBRC    R16,0
   \   000000E0   C002                       RJMP    ??Wr_Sym_Disp_6
    115              {
    116              ClrBit(DISP_POS_OUT, DISP_POS_0);
   \   000000E2   98C4                       CBI     0x18,0x04
   \   000000E4   C001                       RJMP    ??Wr_Sym_Disp_7
    117              }
    118              else
    119              {
    120              SetBit(DISP_POS_OUT, DISP_POS_0);
   \                     ??Wr_Sym_Disp_6:
   \   000000E6   9AC4                       SBI     0x18,0x04
    121              };
    122              if ( (DISP_POS & 0x02) == 0)  // test p1
   \                     ??Wr_Sym_Disp_7:
   \   000000E8   ....                       LDI     R30,LOW(DISP_POS)
   \   000000EA   ....                       LDI     R31,(DISP_POS) >> 8
   \   000000EC   8100                       LD      R16,Z
   \   000000EE   FD01                       SBRC    R16,1
   \   000000F0   C002                       RJMP    ??Wr_Sym_Disp_8
    123              {
    124              ClrBit(DISP_POS_OUT, DISP_POS_1);
   \   000000F2   98C5                       CBI     0x18,0x05
   \   000000F4   C001                       RJMP    ??Wr_Sym_Disp_9
    125              }
    126              else
    127              {
    128              SetBit(DISP_POS_OUT, DISP_POS_1);
   \                     ??Wr_Sym_Disp_8:
   \   000000F6   9AC5                       SBI     0x18,0x05
    129              };
    130              if ( (DISP_POS & 0x04) == 0) // test p2
   \                     ??Wr_Sym_Disp_9:
   \   000000F8   ....                       LDI     R30,LOW(DISP_POS)
   \   000000FA   ....                       LDI     R31,(DISP_POS) >> 8
   \   000000FC   8100                       LD      R16,Z
   \   000000FE   FD02                       SBRC    R16,2
   \   00000100   C002                       RJMP    ??Wr_Sym_Disp_10
    131              {
    132              ClrBit(DISP_POS_OUT, DISP_POS_2);
   \   00000102   98C6                       CBI     0x18,0x06
   \   00000104   C001                       RJMP    ??Wr_Sym_Disp_11
    133              }
    134              else
    135              {
    136              SetBit(DISP_POS_OUT, DISP_POS_2);
   \                     ??Wr_Sym_Disp_10:
   \   00000106   9AC6                       SBI     0x18,0x06
    137              };
    138              if ( (DISP_POS & 0x08) == 0)  // test p3
   \                     ??Wr_Sym_Disp_11:
   \   00000108   ....                       LDI     R30,LOW(DISP_POS)
   \   0000010A   ....                       LDI     R31,(DISP_POS) >> 8
   \   0000010C   8100                       LD      R16,Z
   \   0000010E   FD03                       SBRC    R16,3
   \   00000110   C002                       RJMP    ??Wr_Sym_Disp_12
    139              {
    140              ClrBit(DISP_POS_OUT, DISP_POS_3);
   \   00000112   98C7                       CBI     0x18,0x07
   \   00000114   C001                       RJMP    ??Wr_Sym_Disp_13
    141              }
    142              else
    143              {
    144              SetBit(DISP_POS_OUT, DISP_POS_3);
   \                     ??Wr_Sym_Disp_12:
   \   00000116   9AC7                       SBI     0x18,0x07
    145              };
    146             /* 4.2 Write Fields Bits to Port Indicator */
    147             DISP_PORT_CONT = 0xff;  // All bits Port DISP output
   \                     ??Wr_Sym_Disp_13:
   \   00000118   EF0F                       LDI     R16,255
   \   0000011A   BB0A                       OUT     0x1A,R16
    148             DISP_PORT_OUT = cBits;   // Output Indicator Posicion
   \   0000011C   BB8B                       OUT     0x1B,R24
    149          
    150          }
   \   0000011E   9189                       LD      R24,Y+
   \   00000120   9508                       RET
    151          /*  END Reset  DISP_CONTR_A2.2  */
    152          /*------------------------------*/
    153          
    154          
    155          /*--------------------------*/
    156          /*  Reset  KEY_CONTR_A2.1   */

   \                                 In segment CODE, align 2, keep-with-next
    157          void Reset_KEY_CONTR ( void ) // Clear Arrs and Variables
    158               {
   \   __nearfunc void Reset_KEY_CONTR();
   \                     Reset_KEY_CONTR:
   \   00000000   2F59                       MOV     R21,R25
   \   00000002   2F48                       MOV     R20,R24
   \   00000004   9723                       SBIW    R29 : R28,3
    159              volatile unsigned char cTmp;
    160              volatile int i;
    161          
    162             /* Status KEY_CONTRL y=0 Reset */
    163              A21_y = 0;
   \   00000006   E000                       LDI     R16,0
   \   00000008   9300....                   STS     A21_y,R16
    164          
    165             /* Erase Array and Variabke */
    166          
    167              for (i=0;i<=BUFFER_SIZE_SCN0-1;i++)
   \   0000000C   E000                       LDI     R16,0
   \   0000000E   E010                       LDI     R17,0
   \   00000010   8308                       ST      Y,R16
   \   00000012   8319                       STD     Y+1,R17
   \   00000014   C022                       RJMP    ??Reset_KEY_CONTR_0
    168                {
    169                SCN0[i] = 0 ;         // Erase Arr
   \                     ??Reset_KEY_CONTR_1:
   \   00000016   E000                       LDI     R16,0
   \   00000018   8128                       LD      R18,Y
   \   0000001A   8139                       LDD     R19,Y+1
   \   0000001C   01F9                       MOVW    R31 : R30,R19 : R18
   \   0000001E   ....                       SUBI    R30,LOW((-(SCN0) & 0xFFFF))
   \   00000020   ....                       SBCI    R31,(-(SCN0) & 0xFFFF) >> 8
   \   00000022   8300                       ST      Z,R16
    170                SCN1[i] = 0 ;         // Erase Arr
   \   00000024   E000                       LDI     R16,0
   \   00000026   8128                       LD      R18,Y
   \   00000028   8139                       LDD     R19,Y+1
   \   0000002A   01F9                       MOVW    R31 : R30,R19 : R18
   \   0000002C   ....                       SUBI    R30,LOW((-(SCN1) & 0xFFFF))
   \   0000002E   ....                       SBCI    R31,(-(SCN1) & 0xFFFF) >> 8
   \   00000030   8300                       ST      Z,R16
    171                SCN2[i] = 0 ;         // Erase Arr
   \   00000032   E000                       LDI     R16,0
   \   00000034   8128                       LD      R18,Y
   \   00000036   8139                       LDD     R19,Y+1
   \   00000038   01F9                       MOVW    R31 : R30,R19 : R18
   \   0000003A   ....                       SUBI    R30,LOW((-(SCN2) & 0xFFFF))
   \   0000003C   ....                       SBCI    R31,(-(SCN2) & 0xFFFF) >> 8
   \   0000003E   8300                       ST      Z,R16
    172                SCN3[i] = 0 ;         // Erase Arr
   \   00000040   E000                       LDI     R16,0
   \   00000042   8128                       LD      R18,Y
   \   00000044   8139                       LDD     R19,Y+1
   \   00000046   01F9                       MOVW    R31 : R30,R19 : R18
   \   00000048   ....                       SUBI    R30,LOW((-(SCN3) & 0xFFFF))
   \   0000004A   ....                       SBCI    R31,(-(SCN3) & 0xFFFF) >> 8
   \   0000004C   8300                       ST      Z,R16
   \   0000004E   8108                       LD      R16,Y
   \   00000050   8119                       LDD     R17,Y+1
   \   00000052   5F0F                       SUBI    R16,255
   \   00000054   4F1F                       SBCI    R17,255
   \   00000056   8308                       ST      Y,R16
   \   00000058   8319                       STD     Y+1,R17
   \                     ??Reset_KEY_CONTR_0:
   \   0000005A   8188                       LD      R24,Y
   \   0000005C   8199                       LDD     R25,Y+1
   \   0000005E   3088                       CPI     R24,8
   \   00000060   4090                       SBCI    R25,0
   \   00000062   F2CC                       BRLT    ??Reset_KEY_CONTR_1
    173                 };
    174          
    175              Head_SCN0 = 0;
   \   00000064   E000                       LDI     R16,0
   \   00000066   9300....                   STS     Head_SCN0,R16
    176              Head_SCN1 = 0;
   \   0000006A   E000                       LDI     R16,0
   \   0000006C   9300....                   STS     Head_SCN1,R16
    177              Head_SCN2 = 0;
   \   00000070   E000                       LDI     R16,0
   \   00000072   9300....                   STS     Head_SCN2,R16
    178              Head_SCN3 = 0;
   \   00000076   E000                       LDI     R16,0
   \   00000078   9300....                   STS     Head_SCN3,R16
    179          
    180              SUM_SCN0 = 0;
   \   0000007C   E000                       LDI     R16,0
   \   0000007E   9300....                   STS     SUM_SCN0,R16
    181              SUM_SCN1 = 0;
   \   00000082   E000                       LDI     R16,0
   \   00000084   9300....                   STS     SUM_SCN1,R16
    182              SUM_SCN2 = 0;
   \   00000088   E000                       LDI     R16,0
   \   0000008A   9300....                   STS     SUM_SCN2,R16
    183              SUM_SCN3 = 0;
   \   0000008E   E000                       LDI     R16,0
   \   00000090   9300....                   STS     SUM_SCN3,R16
    184              SUM_SCN4 = 0;
   \   00000094   E000                       LDI     R16,0
   \   00000096   9300....                   STS     SUM_SCN4,R16
    185              SUM_SCN5 = 0;
   \   0000009A   E000                       LDI     R16,0
   \   0000009C   9300....                   STS     SUM_SCN5,R16
    186              SUM_SCN6 = 0;
   \   000000A0   E000                       LDI     R16,0
   \   000000A2   9300....                   STS     SUM_SCN6,R16
    187              SUM_SCN7 = 0;
   \   000000A6   E000                       LDI     R16,0
   \   000000A8   9300....                   STS     SUM_SCN7,R16
    188              SUM_SCN8 = 0;
   \   000000AC   E000                       LDI     R16,0
   \   000000AE   9300....                   STS     SUM_SCN8,R16
    189              SUM_SCN9 = 0;
   \   000000B2   E000                       LDI     R16,0
   \   000000B4   9300....                   STS     SUM_SCN9,R16
    190              SUM_SCN10 = 0;
   \   000000B8   E000                       LDI     R16,0
   \   000000BA   9300....                   STS     SUM_SCN10,R16
    191              SUM_SCN11 = 0;
   \   000000BE   E000                       LDI     R16,0
   \   000000C0   9300....                   STS     SUM_SCN11,R16
    192              SUM_SCN12 = 0;
   \   000000C4   E000                       LDI     R16,0
   \   000000C6   9300....                   STS     SUM_SCN12,R16
    193              SUM_SCN13 = 0;
   \   000000CA   E000                       LDI     R16,0
   \   000000CC   9300....                   STS     SUM_SCN13,R16
    194              SUM_SCN14 = 0;
   \   000000D0   E000                       LDI     R16,0
   \   000000D2   9300....                   STS     SUM_SCN14,R16
    195              SUM_SCN15 = 0;
   \   000000D6   E000                       LDI     R16,0
   \   000000D8   9300....                   STS     SUM_SCN15,R16
    196          
    197              NEW_SCN0 = 0;
   \   000000DC   E000                       LDI     R16,0
   \   000000DE   9300....                   STS     NEW_SCN0,R16
    198              NEW_SCN1 = 0;
   \   000000E2   E000                       LDI     R16,0
   \   000000E4   9300....                   STS     NEW_SCN1,R16
    199              NEW_SCN2 = 0;
   \   000000E8   E000                       LDI     R16,0
   \   000000EA   9300....                   STS     NEW_SCN2,R16
    200              NEW_SCN3 = 0;
   \   000000EE   E000                       LDI     R16,0
   \   000000F0   9300....                   STS     NEW_SCN3,R16
    201          
    202              OLD_SCN0 = 0;
   \   000000F4   E000                       LDI     R16,0
   \   000000F6   9300....                   STS     OLD_SCN0,R16
    203              OLD_SCN1 = 0;
   \   000000FA   E000                       LDI     R16,0
   \   000000FC   9300....                   STS     OLD_SCN1,R16
    204              OLD_SCN2 = 0;
   \   00000100   E000                       LDI     R16,0
   \   00000102   9300....                   STS     OLD_SCN2,R16
    205              OLD_SCN3 = 0;
   \   00000106   E000                       LDI     R16,0
   \   00000108   9300....                   STS     OLD_SCN3,R16
    206          
    207          
    208              for (i=0;i<=H_KEY-1;i++)
   \   0000010C   E000                       LDI     R16,0
   \   0000010E   E010                       LDI     R17,0
   \   00000110   8308                       ST      Y,R16
   \   00000112   8319                       STD     Y+1,R17
   \   00000114   C022                       RJMP    ??Reset_KEY_CONTR_2
    209                {
    210                M00[i] = 1 ;         // Disable All event Scan Code
   \                     ??Reset_KEY_CONTR_3:
   \   00000116   E001                       LDI     R16,1
   \   00000118   8128                       LD      R18,Y
   \   0000011A   8139                       LDD     R19,Y+1
   \   0000011C   01F9                       MOVW    R31 : R30,R19 : R18
   \   0000011E   ....                       SUBI    R30,LOW((-(M00) & 0xFFFF))
   \   00000120   ....                       SBCI    R31,(-(M00) & 0xFFFF) >> 8
   \   00000122   8300                       ST      Z,R16
    211                M01[i] = 1 ;         // Enable  All event Scan Code
   \   00000124   E001                       LDI     R16,1
   \   00000126   8128                       LD      R18,Y
   \   00000128   8139                       LDD     R19,Y+1
   \   0000012A   01F9                       MOVW    R31 : R30,R19 : R18
   \   0000012C   ....                       SUBI    R30,LOW((-(M01) & 0xFFFF))
   \   0000012E   ....                       SBCI    R31,(-(M01) & 0xFFFF) >> 8
   \   00000130   8300                       ST      Z,R16
    212                M10[i] = 1 ;         // Enable  All event Scan Code
   \   00000132   E001                       LDI     R16,1
   \   00000134   8128                       LD      R18,Y
   \   00000136   8139                       LDD     R19,Y+1
   \   00000138   01F9                       MOVW    R31 : R30,R19 : R18
   \   0000013A   ....                       SUBI    R30,LOW((-(M10) & 0xFFFF))
   \   0000013C   ....                       SBCI    R31,(-(M10) & 0xFFFF) >> 8
   \   0000013E   8300                       ST      Z,R16
    213                M11[i] = 1 ;         // Disable All event Scan Code
   \   00000140   E001                       LDI     R16,1
   \   00000142   8128                       LD      R18,Y
   \   00000144   8139                       LDD     R19,Y+1
   \   00000146   01F9                       MOVW    R31 : R30,R19 : R18
   \   00000148   ....                       SUBI    R30,LOW((-(M11) & 0xFFFF))
   \   0000014A   ....                       SBCI    R31,(-(M11) & 0xFFFF) >> 8
   \   0000014C   8300                       ST      Z,R16
   \   0000014E   8108                       LD      R16,Y
   \   00000150   8119                       LDD     R17,Y+1
   \   00000152   5F0F                       SUBI    R16,255
   \   00000154   4F1F                       SBCI    R17,255
   \   00000156   8308                       ST      Y,R16
   \   00000158   8319                       STD     Y+1,R17
   \                     ??Reset_KEY_CONTR_2:
   \   0000015A   8188                       LD      R24,Y
   \   0000015C   8199                       LDD     R25,Y+1
   \   0000015E   3084                       CPI     R24,4
   \   00000160   4090                       SBCI    R25,0
   \   00000162   F2CC                       BRLT    ??Reset_KEY_CONTR_3
    214                 };
    215              A21_y = 1;    // New status A2x
   \   00000164   E001                       LDI     R16,1
   \   00000166   9300....                   STS     A21_y,R16
    216              c_y1 = 0;     // Variable for transitive process
   \   0000016A   E000                       LDI     R16,0
   \   0000016C   9300....                   STS     c_y1,R16
    217                            // for input status KEY
    218               }
   \   00000170   9623                       ADIW    R29 : R28,3
   \   00000172   2F84                       MOV     R24,R20
   \   00000174   2F95                       MOV     R25,R21
   \   00000176   9508                       RET
    219          /*  END Reset  KEY_CONTR_A2.1   */
    220          /*------------------------------*/
    221          
    222          
    223          /*---------------------------*/
    224          /*  Start Timer 0 for  A2x    */

   \                                 In segment CODE, align 2, keep-with-next
    225          void Start_Timer0 ( void )
    226               {
    227               SetBit(TIMSK,TOIE0);     // enable Overflow interrupt
   \   __nearfunc void Start_Timer0();
   \                     Start_Timer0:
   \   00000000   B709                       IN      R16,0x39
   \   00000002   6002                       ORI     R16,0x02
   \   00000004   BF09                       OUT     0x39,R16
    228               TCCR0 = TCCR0 | 0x03;    // CK/64
   \   00000006   B703                       IN      R16,0x33
   \   00000008   6003                       ORI     R16,0x03
   \   0000000A   BF03                       OUT     0x33,R16
    229               /*  Set mTC_0 */
    230               mTC_0 = 0x8D;            // 1 mc for ZQ=7,3728 MGh
   \   0000000C   E80D                       LDI     R16,141
   \   0000000E   9300....                   STS     mTC_0,R16
    231               /* Set period Timer0 */
    232               TCNT0 = mTC_0;   // Set counter Timer0
   \   00000012   9100....                   LDS     R16,mTC_0
   \   00000016   BF02                       OUT     0x32,R16
    233               }
   \   00000018   9508                       RET
    234          
    235          /*---------------------------*/
    236          /*  Stop Timer 0 for  A2x    */

   \                                 In segment CODE, align 2, keep-with-next
    237          void Stop_Timer0 ( void )
    238               {
    239               ClrBit(TIMSK,TOIE0);     // disable Overflow interrupt
   \   __nearfunc void Stop_Timer0();
   \                     Stop_Timer0:
   \   00000000   B709                       IN      R16,0x39
   \   00000002   7F0D                       ANDI    R16,0xFD
   \   00000004   BF09                       OUT     0x39,R16
    240               TCCR0 = TCCR0 & ~(0x07); // Stop Timer0
   \   00000006   B703                       IN      R16,0x33
   \   00000008   7F08                       ANDI    R16,0xF8
   \   0000000A   BF03                       OUT     0x33,R16
    241               }
   \   0000000C   9508                       RET
    242          
    243          /*---------------------------*/
    244          /*  Init Timer 0 for  A2x    */

   \                                 In segment CODE, align 2, keep-with-next
    245          void Init_Timer0 ( void )
    246               {
    247               /* Disable interrupt */
    248               Stop_Timer0();           // Stop
   \   __nearfunc void Init_Timer0();
   \                     Init_Timer0:
   \   00000000   ....                       RCALL   Stop_Timer0
    249          
    250               SetBit(SFIOR,PSR10);     // Reset Prescaler for Timer 0 and 1
   \   00000002   B700                       IN      R16,0x30
   \   00000004   6001                       ORI     R16,0x01
   \   00000006   BF00                       OUT     0x30,R16
    251               ClrBit(SFIOR,PSR10);
   \   00000008   B700                       IN      R16,0x30
   \   0000000A   7F0E                       ANDI    R16,0xFE
   \   0000000C   BF00                       OUT     0x30,R16
    252          
    253               /* Set Mode Timer0 */
    254               ClrBit(TCCR0,COM00);     // disconnectedfrom output pin OC0
   \   0000000E   B703                       IN      R16,0x33
   \   00000010   7E0F                       ANDI    R16,0xEF
   \   00000012   BF03                       OUT     0x33,R16
    255               ClrBit(TCCR0,COM01);     //
   \   00000014   B703                       IN      R16,0x33
   \   00000016   7D0F                       ANDI    R16,0xDF
   \   00000018   BF03                       OUT     0x33,R16
    256               ClrBit(TCCR0,FOC0);      // No Compare
   \   0000001A   B703                       IN      R16,0x33
   \   0000001C   770F                       ANDI    R16,0x7F
   \   0000001E   BF03                       OUT     0x33,R16
    257               ClrBit(TCCR0,PWM0);      // No pulse modulator
   \   00000020   B703                       IN      R16,0x33
   \   00000022   7B0F                       ANDI    R16,0xBF
   \   00000024   BF03                       OUT     0x33,R16
    258               ClrBit(TCCR0,CTC0);      // Clear
   \   00000026   B703                       IN      R16,0x33
   \   00000028   7F07                       ANDI    R16,0xF7
   \   0000002A   BF03                       OUT     0x33,R16
    259               /* Enable intrrupt and start Timer0 */
    260               }
   \   0000002C   9508                       RET
    261          
    262          /*---------------------------*/
    263          /*  Calculate status KEY     */

   \                                 In segment CODE, align 2, keep-with-next
    264          void Cal_Key_Contr ( void )
    265            {
   \   __nearfunc void Cal_Key_Contr();
   \                     Cal_Key_Contr:
   \   00000000   9721                       SBIW    R29 : R28,1
    266              volatile unsigned char i;
    267              unsigned char scan;
    268          
    269            /*************************/
    270            /*  Output puls bit SEL0 */
    271             SetBit(KEY_PORT_CONT,SEL0); // Bit port to output
   \   00000002   9AA4                       SBI     0x14,0x04
    272             SetBit(KEY_PORT_OUT, SEL0);     // Output "1" SEL0
   \   00000004   9AAC                       SBI     0x15,0x04
    273             for (i=0;i<50;i++)
   \   00000006   E000                       LDI     R16,0
   \   00000008   8308                       ST      Y,R16
   \   0000000A   C004                       RJMP    ??Cal_Key_Contr_0
    274              {
    275               ClrBit(KEY_PORT_OUT, SEL0);     // Output "0" SEL0
   \                     ??Cal_Key_Contr_1:
   \   0000000C   98AC                       CBI     0x15,0x04
   \   0000000E   8108                       LD      R16,Y
   \   00000010   9503                       INC     R16
   \   00000012   8308                       ST      Y,R16
   \                     ??Cal_Key_Contr_0:
   \   00000014   8108                       LD      R16,Y
   \   00000016   3302                       CPI     R16,50
   \   00000018   F3C8                       BRCS    ??Cal_Key_Contr_1
    276              };
    277             SetBit(KEY_PORT_OUT, SEL0);     // Output "1" SEL0
   \   0000001A   9AAC                       SBI     0x15,0x04
    278            /* 2. Input scan-code for SEL0 */
    279             KEY_PORT_CONT = KEY_PORT_CONT & ~( 8+4+2+1); // PORT input
   \   0000001C   B304                       IN      R16,0x14
   \   0000001E   7F00                       ANDI    R16,0xF0
   \   00000020   BB04                       OUT     0x14,R16
    280             scan = KEY_PORT_IN & 0x0F; // scan port SEL0
   \   00000022   B303                       IN      R16,0x13
   \   00000024   700F                       ANDI    R16,0x0F
    281            /* 3. Calcumate mediam */
    282            SUM_SCN0 = SUM_SCN0 - (SCN0[Head_SCN0]& 0x01 );
   \   00000026   9110....                   LDS     R17,SUM_SCN0
   \   0000002A   9120....                   LDS     R18,Head_SCN0
   \   0000002E   E030                       LDI     R19,0
   \   00000030   01F9                       MOVW    R31 : R30,R19 : R18
   \   00000032   ....                       SUBI    R30,LOW((-(SCN0) & 0xFFFF))
   \   00000034   ....                       SBCI    R31,(-(SCN0) & 0xFFFF) >> 8
   \   00000036   8120                       LD      R18,Z
   \   00000038   7021                       ANDI    R18,0x01
   \   0000003A   1B12                       SUB     R17,R18
   \   0000003C   9310....                   STS     SUM_SCN0,R17
    283            SUM_SCN0 = SUM_SCN0 + (scan & 0x01);
   \   00000040   2F10                       MOV     R17,R16
   \   00000042   7011                       ANDI    R17,0x01
   \   00000044   ....                       LDI     R30,LOW(SUM_SCN0)
   \   00000046   ....                       LDI     R31,(SUM_SCN0) >> 8
   \   00000048   8120                       LD      R18,Z
   \   0000004A   0F21                       ADD     R18,R17
   \   0000004C   8320                       ST      Z,R18
    284            SUM_SCN1 = SUM_SCN1 - ((SCN0[Head_SCN0]& 0x02)>>1);
   \   0000004E   9110....                   LDS     R17,SUM_SCN1
   \   00000052   9120....                   LDS     R18,Head_SCN0
   \   00000056   E030                       LDI     R19,0
   \   00000058   01F9                       MOVW    R31 : R30,R19 : R18
   \   0000005A   ....                       SUBI    R30,LOW((-(SCN0) & 0xFFFF))
   \   0000005C   ....                       SBCI    R31,(-(SCN0) & 0xFFFF) >> 8
   \   0000005E   8120                       LD      R18,Z
   \   00000060   7022                       ANDI    R18,0x02
   \   00000062   9525                       ASR     R18
   \   00000064   1B12                       SUB     R17,R18
   \   00000066   9310....                   STS     SUM_SCN1,R17
    285            SUM_SCN1 = SUM_SCN1 + ((scan & 0x02)>>1);
   \   0000006A   2F10                       MOV     R17,R16
   \   0000006C   7012                       ANDI    R17,0x02
   \   0000006E   9515                       ASR     R17
   \   00000070   ....                       LDI     R30,LOW(SUM_SCN1)
   \   00000072   ....                       LDI     R31,(SUM_SCN1) >> 8
   \   00000074   8120                       LD      R18,Z
   \   00000076   0F21                       ADD     R18,R17
   \   00000078   8320                       ST      Z,R18
    286            SUM_SCN2 = SUM_SCN2 - ((SCN0[Head_SCN0]& 0x04)>>2);
   \   0000007A   9110....                   LDS     R17,SUM_SCN2
   \   0000007E   9120....                   LDS     R18,Head_SCN0
   \   00000082   E030                       LDI     R19,0
   \   00000084   01F9                       MOVW    R31 : R30,R19 : R18
   \   00000086   ....                       SUBI    R30,LOW((-(SCN0) & 0xFFFF))
   \   00000088   ....                       SBCI    R31,(-(SCN0) & 0xFFFF) >> 8
   \   0000008A   8120                       LD      R18,Z
   \   0000008C   7024                       ANDI    R18,0x04
   \   0000008E   9525                       ASR     R18
   \   00000090   9525                       ASR     R18
   \   00000092   1B12                       SUB     R17,R18
   \   00000094   9310....                   STS     SUM_SCN2,R17
    287            SUM_SCN2 = SUM_SCN2 + ((scan & 0x04)>>2);
   \   00000098   2F10                       MOV     R17,R16
   \   0000009A   7014                       ANDI    R17,0x04
   \   0000009C   9515                       ASR     R17
   \   0000009E   9515                       ASR     R17
   \   000000A0   ....                       LDI     R30,LOW(SUM_SCN2)
   \   000000A2   ....                       LDI     R31,(SUM_SCN2) >> 8
   \   000000A4   8120                       LD      R18,Z
   \   000000A6   0F21                       ADD     R18,R17
   \   000000A8   8320                       ST      Z,R18
    288            SUM_SCN3 = SUM_SCN3 - ((SCN0[Head_SCN0] & 0x08)>>3);
   \   000000AA   9110....                   LDS     R17,SUM_SCN3
   \   000000AE   9120....                   LDS     R18,Head_SCN0
   \   000000B2   E030                       LDI     R19,0
   \   000000B4   01F9                       MOVW    R31 : R30,R19 : R18
   \   000000B6   ....                       SUBI    R30,LOW((-(SCN0) & 0xFFFF))
   \   000000B8   ....                       SBCI    R31,(-(SCN0) & 0xFFFF) >> 8
   \   000000BA   8120                       LD      R18,Z
   \   000000BC   7028                       ANDI    R18,0x08
   \   000000BE   9525                       ASR     R18
   \   000000C0   9525                       ASR     R18
   \   000000C2   9525                       ASR     R18
   \   000000C4   1B12                       SUB     R17,R18
   \   000000C6   9310....                   STS     SUM_SCN3,R17
    289            SUM_SCN3 = SUM_SCN3 + ((scan & 0x08)>>3);
   \   000000CA   2F10                       MOV     R17,R16
   \   000000CC   7018                       ANDI    R17,0x08
   \   000000CE   9515                       ASR     R17
   \   000000D0   9515                       ASR     R17
   \   000000D2   9515                       ASR     R17
   \   000000D4   ....                       LDI     R30,LOW(SUM_SCN3)
   \   000000D6   ....                       LDI     R31,(SUM_SCN3) >> 8
   \   000000D8   8120                       LD      R18,Z
   \   000000DA   0F21                       ADD     R18,R17
   \   000000DC   8320                       ST      Z,R18
    290          
    291          
    292            SCN0[Head_SCN0] = scan;
   \   000000DE   9120....                   LDS     R18,Head_SCN0
   \   000000E2   E030                       LDI     R19,0
   \   000000E4   01F9                       MOVW    R31 : R30,R19 : R18
   \   000000E6   ....                       SUBI    R30,LOW((-(SCN0) & 0xFFFF))
   \   000000E8   ....                       SBCI    R31,(-(SCN0) & 0xFFFF) >> 8
   \   000000EA   8300                       ST      Z,R16
    293          
    294            Head_SCN0 = (Head_SCN0+1) & BUFFER_MASK_SCN0;
   \   000000EC   9100....                   LDS     R16,Head_SCN0
   \   000000F0   9503                       INC     R16
   \   000000F2   7007                       ANDI    R16,0x07
   \   000000F4   9300....                   STS     Head_SCN0,R16
    295          
    296            OLD_SCN0 = NEW_SCN0;
   \   000000F8   9100....                   LDS     R16,NEW_SCN0
   \   000000FC   9300....                   STS     OLD_SCN0,R16
    297            NEW_SCN0 = 0;
   \   00000100   E000                       LDI     R16,0
   \   00000102   9300....                   STS     NEW_SCN0,R16
    298            i = (unsigned char)( SUM_SCN0 / BUFFER_SIZE_KEY);
   \   00000106   9100....                   LDS     R16,SUM_SCN0
   \   0000010A   E048                       LDI     R20,8
   \   0000010C   ........                   CALL    ?UC_DIVMOD_L01
   \   00000110   8308                       ST      Y,R16
    299            NEW_SCN0 = NEW_SCN0 | i;
   \   00000112   9100....                   LDS     R16,NEW_SCN0
   \   00000116   8118                       LD      R17,Y
   \   00000118   2B10                       OR      R17,R16
   \   0000011A   9310....                   STS     NEW_SCN0,R17
    300            i = (unsigned char)( SUM_SCN1 / BUFFER_SIZE_KEY );
   \   0000011E   9100....                   LDS     R16,SUM_SCN1
   \   00000122   E048                       LDI     R20,8
   \   00000124   ........                   CALL    ?UC_DIVMOD_L01
   \   00000128   8308                       ST      Y,R16
    301            NEW_SCN0 = NEW_SCN0 | (i<<1);
   \   0000012A   9100....                   LDS     R16,NEW_SCN0
   \   0000012E   8118                       LD      R17,Y
   \   00000130   0F11                       LSL     R17
   \   00000132   2B10                       OR      R17,R16
   \   00000134   9310....                   STS     NEW_SCN0,R17
    302            i = (unsigned char)( SUM_SCN2 / BUFFER_SIZE_KEY);
   \   00000138   9100....                   LDS     R16,SUM_SCN2
   \   0000013C   E048                       LDI     R20,8
   \   0000013E   ........                   CALL    ?UC_DIVMOD_L01
   \   00000142   8308                       ST      Y,R16
    303            NEW_SCN0 = NEW_SCN0 | (i<<2);
   \   00000144   9100....                   LDS     R16,NEW_SCN0
   \   00000148   8118                       LD      R17,Y
   \   0000014A   0F11                       LSL     R17
   \   0000014C   0F11                       LSL     R17
   \   0000014E   2B10                       OR      R17,R16
   \   00000150   9310....                   STS     NEW_SCN0,R17
    304            i = (unsigned char)( SUM_SCN3 / BUFFER_SIZE_KEY );
   \   00000154   9100....                   LDS     R16,SUM_SCN3
   \   00000158   E048                       LDI     R20,8
   \   0000015A   ........                   CALL    ?UC_DIVMOD_L01
   \   0000015E   8308                       ST      Y,R16
    305            NEW_SCN0 = NEW_SCN0 | (i<<3);
   \   00000160   9100....                   LDS     R16,NEW_SCN0
   \   00000164   8118                       LD      R17,Y
   \   00000166   0F11                       LSL     R17
   \   00000168   0F11                       LSL     R17
   \   0000016A   0F11                       LSL     R17
   \   0000016C   2B10                       OR      R17,R16
   \   0000016E   9310....                   STS     NEW_SCN0,R17
    306          
    307            /***************************/
    308            /* Output puls bit SEL1 */
    309            SetBit(KEY_PORT_CONT,SEL1); // Bit port to output
   \   00000172   9AA5                       SBI     0x14,0x05
    310             SetBit(KEY_PORT_OUT, SEL1);     // Output "1" SEL1
   \   00000174   9AAD                       SBI     0x15,0x05
    311             for (i=0;i<50;i++)
   \   00000176   E000                       LDI     R16,0
   \   00000178   8308                       ST      Y,R16
   \   0000017A   C004                       RJMP    ??Cal_Key_Contr_2
    312              {
    313               ClrBit(KEY_PORT_OUT, SEL1);     // Output "0" SEL1
   \                     ??Cal_Key_Contr_3:
   \   0000017C   98AD                       CBI     0x15,0x05
   \   0000017E   8108                       LD      R16,Y
   \   00000180   9503                       INC     R16
   \   00000182   8308                       ST      Y,R16
   \                     ??Cal_Key_Contr_2:
   \   00000184   8108                       LD      R16,Y
   \   00000186   3302                       CPI     R16,50
   \   00000188   F3C8                       BRCS    ??Cal_Key_Contr_3
    314              };
    315             SetBit(KEY_PORT_OUT, SEL1);     // Output "1" SEL1
   \   0000018A   9AAD                       SBI     0x15,0x05
    316            /*  Input scan-code for SEL1 */
    317             KEY_PORT_CONT = KEY_PORT_CONT & ~( 8+4+2+1); // PORT input
   \   0000018C   B304                       IN      R16,0x14
   \   0000018E   7F00                       ANDI    R16,0xF0
   \   00000190   BB04                       OUT     0x14,R16
    318             scan = KEY_PORT_IN & 0x0F; // scan port SEL1
   \   00000192   B303                       IN      R16,0x13
   \   00000194   700F                       ANDI    R16,0x0F
    319            /*  Calcumate mediam */
    320            SUM_SCN4 = SUM_SCN4 - (SCN1[Head_SCN1]& 0x01 );
   \   00000196   9110....                   LDS     R17,SUM_SCN4
   \   0000019A   9120....                   LDS     R18,Head_SCN1
   \   0000019E   E030                       LDI     R19,0
   \   000001A0   01F9                       MOVW    R31 : R30,R19 : R18
   \   000001A2   ....                       SUBI    R30,LOW((-(SCN1) & 0xFFFF))
   \   000001A4   ....                       SBCI    R31,(-(SCN1) & 0xFFFF) >> 8
   \   000001A6   8120                       LD      R18,Z
   \   000001A8   7021                       ANDI    R18,0x01
   \   000001AA   1B12                       SUB     R17,R18
   \   000001AC   9310....                   STS     SUM_SCN4,R17
    321            SUM_SCN4 = SUM_SCN4 + (scan & 0x01);
   \   000001B0   2F10                       MOV     R17,R16
   \   000001B2   7011                       ANDI    R17,0x01
   \   000001B4   ....                       LDI     R30,LOW(SUM_SCN4)
   \   000001B6   ....                       LDI     R31,(SUM_SCN4) >> 8
   \   000001B8   8120                       LD      R18,Z
   \   000001BA   0F21                       ADD     R18,R17
   \   000001BC   8320                       ST      Z,R18
    322            SUM_SCN5 = SUM_SCN5 - ((SCN1[Head_SCN1]& 0x02)>>1);
   \   000001BE   9110....                   LDS     R17,SUM_SCN5
   \   000001C2   9120....                   LDS     R18,Head_SCN1
   \   000001C6   E030                       LDI     R19,0
   \   000001C8   01F9                       MOVW    R31 : R30,R19 : R18
   \   000001CA   ....                       SUBI    R30,LOW((-(SCN1) & 0xFFFF))
   \   000001CC   ....                       SBCI    R31,(-(SCN1) & 0xFFFF) >> 8
   \   000001CE   8120                       LD      R18,Z
   \   000001D0   7022                       ANDI    R18,0x02
   \   000001D2   9525                       ASR     R18
   \   000001D4   1B12                       SUB     R17,R18
   \   000001D6   9310....                   STS     SUM_SCN5,R17
    323            SUM_SCN5 = SUM_SCN5 + ((scan & 0x02)>>1);
   \   000001DA   2F10                       MOV     R17,R16
   \   000001DC   7012                       ANDI    R17,0x02
   \   000001DE   9515                       ASR     R17
   \   000001E0   ....                       LDI     R30,LOW(SUM_SCN5)
   \   000001E2   ....                       LDI     R31,(SUM_SCN5) >> 8
   \   000001E4   8120                       LD      R18,Z
   \   000001E6   0F21                       ADD     R18,R17
   \   000001E8   8320                       ST      Z,R18
    324            SUM_SCN6 = SUM_SCN6 - ((SCN1[Head_SCN1]& 0x04)>>2);
   \   000001EA   9110....                   LDS     R17,SUM_SCN6
   \   000001EE   9120....                   LDS     R18,Head_SCN1
   \   000001F2   E030                       LDI     R19,0
   \   000001F4   01F9                       MOVW    R31 : R30,R19 : R18
   \   000001F6   ....                       SUBI    R30,LOW((-(SCN1) & 0xFFFF))
   \   000001F8   ....                       SBCI    R31,(-(SCN1) & 0xFFFF) >> 8
   \   000001FA   8120                       LD      R18,Z
   \   000001FC   7024                       ANDI    R18,0x04
   \   000001FE   9525                       ASR     R18
   \   00000200   9525                       ASR     R18
   \   00000202   1B12                       SUB     R17,R18
   \   00000204   9310....                   STS     SUM_SCN6,R17
    325            SUM_SCN6 = SUM_SCN6 + ((scan & 0x04)>>2);
   \   00000208   2F10                       MOV     R17,R16
   \   0000020A   7014                       ANDI    R17,0x04
   \   0000020C   9515                       ASR     R17
   \   0000020E   9515                       ASR     R17
   \   00000210   ....                       LDI     R30,LOW(SUM_SCN6)
   \   00000212   ....                       LDI     R31,(SUM_SCN6) >> 8
   \   00000214   8120                       LD      R18,Z
   \   00000216   0F21                       ADD     R18,R17
   \   00000218   8320                       ST      Z,R18
    326            SUM_SCN7 = SUM_SCN7 - ((SCN1[Head_SCN1] & 0x08)>>3);
   \   0000021A   9110....                   LDS     R17,SUM_SCN7
   \   0000021E   9120....                   LDS     R18,Head_SCN1
   \   00000222   E030                       LDI     R19,0
   \   00000224   01F9                       MOVW    R31 : R30,R19 : R18
   \   00000226   ....                       SUBI    R30,LOW((-(SCN1) & 0xFFFF))
   \   00000228   ....                       SBCI    R31,(-(SCN1) & 0xFFFF) >> 8
   \   0000022A   8120                       LD      R18,Z
   \   0000022C   7028                       ANDI    R18,0x08
   \   0000022E   9525                       ASR     R18
   \   00000230   9525                       ASR     R18
   \   00000232   9525                       ASR     R18
   \   00000234   1B12                       SUB     R17,R18
   \   00000236   9310....                   STS     SUM_SCN7,R17
    327            SUM_SCN7 = SUM_SCN7 + ((scan & 0x08)>>3);
   \   0000023A   2F10                       MOV     R17,R16
   \   0000023C   7018                       ANDI    R17,0x08
   \   0000023E   9515                       ASR     R17
   \   00000240   9515                       ASR     R17
   \   00000242   9515                       ASR     R17
   \   00000244   ....                       LDI     R30,LOW(SUM_SCN7)
   \   00000246   ....                       LDI     R31,(SUM_SCN7) >> 8
   \   00000248   8120                       LD      R18,Z
   \   0000024A   0F21                       ADD     R18,R17
   \   0000024C   8320                       ST      Z,R18
    328          
    329            SCN1[Head_SCN1] = scan;
   \   0000024E   9120....                   LDS     R18,Head_SCN1
   \   00000252   E030                       LDI     R19,0
   \   00000254   01F9                       MOVW    R31 : R30,R19 : R18
   \   00000256   ....                       SUBI    R30,LOW((-(SCN1) & 0xFFFF))
   \   00000258   ....                       SBCI    R31,(-(SCN1) & 0xFFFF) >> 8
   \   0000025A   8300                       ST      Z,R16
    330          
    331            Head_SCN1 = (Head_SCN1+1) & BUFFER_MASK_SCN1;
   \   0000025C   9100....                   LDS     R16,Head_SCN1
   \   00000260   9503                       INC     R16
   \   00000262   7007                       ANDI    R16,0x07
   \   00000264   9300....                   STS     Head_SCN1,R16
    332          
    333            OLD_SCN1 = NEW_SCN1;
   \   00000268   9100....                   LDS     R16,NEW_SCN1
   \   0000026C   9300....                   STS     OLD_SCN1,R16
    334            NEW_SCN1 = 0;
   \   00000270   E000                       LDI     R16,0
   \   00000272   9300....                   STS     NEW_SCN1,R16
    335            i = (unsigned char)( SUM_SCN4 / BUFFER_SIZE_KEY);
   \   00000276   9100....                   LDS     R16,SUM_SCN4
   \   0000027A   E048                       LDI     R20,8
   \   0000027C   ........                   CALL    ?UC_DIVMOD_L01
   \   00000280   8308                       ST      Y,R16
    336            NEW_SCN1 = NEW_SCN1 | i;
   \   00000282   9100....                   LDS     R16,NEW_SCN1
   \   00000286   8118                       LD      R17,Y
   \   00000288   2B10                       OR      R17,R16
   \   0000028A   9310....                   STS     NEW_SCN1,R17
    337            i = (unsigned char)( SUM_SCN5 / BUFFER_SIZE_KEY );
   \   0000028E   9100....                   LDS     R16,SUM_SCN5
   \   00000292   E048                       LDI     R20,8
   \   00000294   ........                   CALL    ?UC_DIVMOD_L01
   \   00000298   8308                       ST      Y,R16
    338            NEW_SCN1 = NEW_SCN1 | (i<<1);
   \   0000029A   9100....                   LDS     R16,NEW_SCN1
   \   0000029E   8118                       LD      R17,Y
   \   000002A0   0F11                       LSL     R17
   \   000002A2   2B10                       OR      R17,R16
   \   000002A4   9310....                   STS     NEW_SCN1,R17
    339            i = (unsigned char)( SUM_SCN6 / BUFFER_SIZE_KEY);
   \   000002A8   9100....                   LDS     R16,SUM_SCN6
   \   000002AC   E048                       LDI     R20,8
   \   000002AE   ........                   CALL    ?UC_DIVMOD_L01
   \   000002B2   8308                       ST      Y,R16
    340            NEW_SCN1 = NEW_SCN1 | (i<<2);
   \   000002B4   9100....                   LDS     R16,NEW_SCN1
   \   000002B8   8118                       LD      R17,Y
   \   000002BA   0F11                       LSL     R17
   \   000002BC   0F11                       LSL     R17
   \   000002BE   2B10                       OR      R17,R16
   \   000002C0   9310....                   STS     NEW_SCN1,R17
    341            i = (unsigned char)( SUM_SCN7 / BUFFER_SIZE_KEY );
   \   000002C4   9100....                   LDS     R16,SUM_SCN7
   \   000002C8   E048                       LDI     R20,8
   \   000002CA   ........                   CALL    ?UC_DIVMOD_L01
   \   000002CE   8308                       ST      Y,R16
    342            NEW_SCN1 = NEW_SCN1 | (i<<3);
   \   000002D0   9100....                   LDS     R16,NEW_SCN1
   \   000002D4   8118                       LD      R17,Y
   \   000002D6   0F11                       LSL     R17
   \   000002D8   0F11                       LSL     R17
   \   000002DA   0F11                       LSL     R17
   \   000002DC   2B10                       OR      R17,R16
   \   000002DE   9310....                   STS     NEW_SCN1,R17
    343          
    344            /************************/
    345            /* Output puls bit SEL2 */
    346             SetBit(KEY_PORT_CONT,SEL2); // Bit port to output
   \   000002E2   9AA6                       SBI     0x14,0x06
    347             SetBit(KEY_PORT_OUT, SEL2);     // Output "1" SEL2
   \   000002E4   9AAE                       SBI     0x15,0x06
    348             for (i=0;i<50;i++)
   \   000002E6   E000                       LDI     R16,0
   \   000002E8   8308                       ST      Y,R16
   \   000002EA   C004                       RJMP    ??Cal_Key_Contr_4
    349              {
    350               ClrBit(KEY_PORT_OUT, SEL2);     // Output "0" SEL2
   \                     ??Cal_Key_Contr_5:
   \   000002EC   98AE                       CBI     0x15,0x06
   \   000002EE   8108                       LD      R16,Y
   \   000002F0   9503                       INC     R16
   \   000002F2   8308                       ST      Y,R16
   \                     ??Cal_Key_Contr_4:
   \   000002F4   8108                       LD      R16,Y
   \   000002F6   3302                       CPI     R16,50
   \   000002F8   F3C8                       BRCS    ??Cal_Key_Contr_5
    351              };
    352             SetBit(KEY_PORT_OUT, SEL2);     // Output "1" SEL2
   \   000002FA   9AAE                       SBI     0x15,0x06
    353            /* 2. Input scan-code for SEL2 */
    354             KEY_PORT_CONT = KEY_PORT_CONT & ~( 8+4+2+1); // PORT input
   \   000002FC   B304                       IN      R16,0x14
   \   000002FE   7F00                       ANDI    R16,0xF0
   \   00000300   BB04                       OUT     0x14,R16
    355             scan = KEY_PORT_IN & 0x0F; // scan port SEL2
   \   00000302   B303                       IN      R16,0x13
   \   00000304   700F                       ANDI    R16,0x0F
    356            /* 3. Calcumate mediam */
    357            SUM_SCN8 = SUM_SCN8 - (SCN2[Head_SCN2]& 0x01 );
   \   00000306   9110....                   LDS     R17,SUM_SCN8
   \   0000030A   9120....                   LDS     R18,Head_SCN2
   \   0000030E   E030                       LDI     R19,0
   \   00000310   01F9                       MOVW    R31 : R30,R19 : R18
   \   00000312   ....                       SUBI    R30,LOW((-(SCN2) & 0xFFFF))
   \   00000314   ....                       SBCI    R31,(-(SCN2) & 0xFFFF) >> 8
   \   00000316   8120                       LD      R18,Z
   \   00000318   7021                       ANDI    R18,0x01
   \   0000031A   1B12                       SUB     R17,R18
   \   0000031C   9310....                   STS     SUM_SCN8,R17
    358            SUM_SCN8 = SUM_SCN8 + (scan & 0x01);
   \   00000320   2F10                       MOV     R17,R16
   \   00000322   7011                       ANDI    R17,0x01
   \   00000324   ....                       LDI     R30,LOW(SUM_SCN8)
   \   00000326   ....                       LDI     R31,(SUM_SCN8) >> 8
   \   00000328   8120                       LD      R18,Z
   \   0000032A   0F21                       ADD     R18,R17
   \   0000032C   8320                       ST      Z,R18
    359            SUM_SCN9 = SUM_SCN9 - ((SCN2[Head_SCN2]& 0x02)>>1);
   \   0000032E   9110....                   LDS     R17,SUM_SCN9
   \   00000332   9120....                   LDS     R18,Head_SCN2
   \   00000336   E030                       LDI     R19,0
   \   00000338   01F9                       MOVW    R31 : R30,R19 : R18
   \   0000033A   ....                       SUBI    R30,LOW((-(SCN2) & 0xFFFF))
   \   0000033C   ....                       SBCI    R31,(-(SCN2) & 0xFFFF) >> 8
   \   0000033E   8120                       LD      R18,Z
   \   00000340   7022                       ANDI    R18,0x02
   \   00000342   9525                       ASR     R18
   \   00000344   1B12                       SUB     R17,R18
   \   00000346   9310....                   STS     SUM_SCN9,R17
    360            SUM_SCN9 = SUM_SCN9 + ((scan & 0x02)>>1);
   \   0000034A   2F10                       MOV     R17,R16
   \   0000034C   7012                       ANDI    R17,0x02
   \   0000034E   9515                       ASR     R17
   \   00000350   ....                       LDI     R30,LOW(SUM_SCN9)
   \   00000352   ....                       LDI     R31,(SUM_SCN9) >> 8
   \   00000354   8120                       LD      R18,Z
   \   00000356   0F21                       ADD     R18,R17
   \   00000358   8320                       ST      Z,R18
    361            SUM_SCN10 = SUM_SCN10 - ((SCN2[Head_SCN2]& 0x04)>>2);
   \   0000035A   9110....                   LDS     R17,SUM_SCN10
   \   0000035E   9120....                   LDS     R18,Head_SCN2
   \   00000362   E030                       LDI     R19,0
   \   00000364   01F9                       MOVW    R31 : R30,R19 : R18
   \   00000366   ....                       SUBI    R30,LOW((-(SCN2) & 0xFFFF))
   \   00000368   ....                       SBCI    R31,(-(SCN2) & 0xFFFF) >> 8
   \   0000036A   8120                       LD      R18,Z
   \   0000036C   7024                       ANDI    R18,0x04
   \   0000036E   9525                       ASR     R18
   \   00000370   9525                       ASR     R18
   \   00000372   1B12                       SUB     R17,R18
   \   00000374   9310....                   STS     SUM_SCN10,R17
    362            SUM_SCN10 = SUM_SCN10 + ((scan & 0x04)>>2);
   \   00000378   2F10                       MOV     R17,R16
   \   0000037A   7014                       ANDI    R17,0x04
   \   0000037C   9515                       ASR     R17
   \   0000037E   9515                       ASR     R17
   \   00000380   ....                       LDI     R30,LOW(SUM_SCN10)
   \   00000382   ....                       LDI     R31,(SUM_SCN10) >> 8
   \   00000384   8120                       LD      R18,Z
   \   00000386   0F21                       ADD     R18,R17
   \   00000388   8320                       ST      Z,R18
    363            SUM_SCN11 = SUM_SCN11 - ((SCN2[Head_SCN2] & 0x08)>>3);
   \   0000038A   9110....                   LDS     R17,SUM_SCN11
   \   0000038E   9120....                   LDS     R18,Head_SCN2
   \   00000392   E030                       LDI     R19,0
   \   00000394   01F9                       MOVW    R31 : R30,R19 : R18
   \   00000396   ....                       SUBI    R30,LOW((-(SCN2) & 0xFFFF))
   \   00000398   ....                       SBCI    R31,(-(SCN2) & 0xFFFF) >> 8
   \   0000039A   8120                       LD      R18,Z
   \   0000039C   7028                       ANDI    R18,0x08
   \   0000039E   9525                       ASR     R18
   \   000003A0   9525                       ASR     R18
   \   000003A2   9525                       ASR     R18
   \   000003A4   1B12                       SUB     R17,R18
   \   000003A6   9310....                   STS     SUM_SCN11,R17
    364            SUM_SCN11 = SUM_SCN11+ ((scan & 0x08)>>3);
   \   000003AA   2F10                       MOV     R17,R16
   \   000003AC   7018                       ANDI    R17,0x08
   \   000003AE   9515                       ASR     R17
   \   000003B0   9515                       ASR     R17
   \   000003B2   9515                       ASR     R17
   \   000003B4   ....                       LDI     R30,LOW(SUM_SCN11)
   \   000003B6   ....                       LDI     R31,(SUM_SCN11) >> 8
   \   000003B8   8120                       LD      R18,Z
   \   000003BA   0F21                       ADD     R18,R17
   \   000003BC   8320                       ST      Z,R18
    365          
    366          
    367            SCN2[Head_SCN2] = scan;
   \   000003BE   9120....                   LDS     R18,Head_SCN2
   \   000003C2   E030                       LDI     R19,0
   \   000003C4   01F9                       MOVW    R31 : R30,R19 : R18
   \   000003C6   ....                       SUBI    R30,LOW((-(SCN2) & 0xFFFF))
   \   000003C8   ....                       SBCI    R31,(-(SCN2) & 0xFFFF) >> 8
   \   000003CA   8300                       ST      Z,R16
    368          
    369            Head_SCN2 = (Head_SCN2+1) & BUFFER_MASK_SCN0;
   \   000003CC   9100....                   LDS     R16,Head_SCN2
   \   000003D0   9503                       INC     R16
   \   000003D2   7007                       ANDI    R16,0x07
   \   000003D4   9300....                   STS     Head_SCN2,R16
    370          
    371            OLD_SCN2 = NEW_SCN2;
   \   000003D8   9100....                   LDS     R16,NEW_SCN2
   \   000003DC   9300....                   STS     OLD_SCN2,R16
    372            NEW_SCN2 = 0;
   \   000003E0   E000                       LDI     R16,0
   \   000003E2   9300....                   STS     NEW_SCN2,R16
    373            i = (unsigned char)( SUM_SCN8 / BUFFER_SIZE_KEY);
   \   000003E6   9100....                   LDS     R16,SUM_SCN8
   \   000003EA   E048                       LDI     R20,8
   \   000003EC   ........                   CALL    ?UC_DIVMOD_L01
   \   000003F0   8308                       ST      Y,R16
    374            NEW_SCN2 = NEW_SCN2 | i;
   \   000003F2   9100....                   LDS     R16,NEW_SCN2
   \   000003F6   8118                       LD      R17,Y
   \   000003F8   2B10                       OR      R17,R16
   \   000003FA   9310....                   STS     NEW_SCN2,R17
    375            i = (unsigned char)( SUM_SCN9 / BUFFER_SIZE_KEY );
   \   000003FE   9100....                   LDS     R16,SUM_SCN9
   \   00000402   E048                       LDI     R20,8
   \   00000404   ........                   CALL    ?UC_DIVMOD_L01
   \   00000408   8308                       ST      Y,R16
    376            NEW_SCN2 = NEW_SCN2 | (i<<1);
   \   0000040A   9100....                   LDS     R16,NEW_SCN2
   \   0000040E   8118                       LD      R17,Y
   \   00000410   0F11                       LSL     R17
   \   00000412   2B10                       OR      R17,R16
   \   00000414   9310....                   STS     NEW_SCN2,R17
    377            i = (unsigned char)( SUM_SCN10 / BUFFER_SIZE_KEY);
   \   00000418   9100....                   LDS     R16,SUM_SCN10
   \   0000041C   E048                       LDI     R20,8
   \   0000041E   ........                   CALL    ?UC_DIVMOD_L01
   \   00000422   8308                       ST      Y,R16
    378            NEW_SCN2 = NEW_SCN2 | (i<<2);
   \   00000424   9100....                   LDS     R16,NEW_SCN2
   \   00000428   8118                       LD      R17,Y
   \   0000042A   0F11                       LSL     R17
   \   0000042C   0F11                       LSL     R17
   \   0000042E   2B10                       OR      R17,R16
   \   00000430   9310....                   STS     NEW_SCN2,R17
    379            i = (unsigned char)( SUM_SCN11 / BUFFER_SIZE_KEY );
   \   00000434   9100....                   LDS     R16,SUM_SCN11
   \   00000438   E048                       LDI     R20,8
   \   0000043A   ........                   CALL    ?UC_DIVMOD_L01
   \   0000043E   8308                       ST      Y,R16
    380            NEW_SCN2 = NEW_SCN2 | (i<<3);
   \   00000440   9100....                   LDS     R16,NEW_SCN2
   \   00000444   8118                       LD      R17,Y
   \   00000446   0F11                       LSL     R17
   \   00000448   0F11                       LSL     R17
   \   0000044A   0F11                       LSL     R17
   \   0000044C   2B10                       OR      R17,R16
   \   0000044E   9310....                   STS     NEW_SCN2,R17
    381          
    382            /*************************/
    383            /*  Output puls bit SEL3 */
    384             SetBit(KEY_PORT_CONT,SEL3); // Bit port to output
   \   00000452   9AA7                       SBI     0x14,0x07
    385             SetBit(KEY_PORT_OUT, SEL3);     // Output "1" SEL3
   \   00000454   9AAF                       SBI     0x15,0x07
    386             for (i=0;i<50;i++)
   \   00000456   E000                       LDI     R16,0
   \   00000458   8308                       ST      Y,R16
   \   0000045A   C004                       RJMP    ??Cal_Key_Contr_6
    387              {
    388               ClrBit(KEY_PORT_OUT, SEL3);     // Output "0" SEL3
   \                     ??Cal_Key_Contr_7:
   \   0000045C   98AF                       CBI     0x15,0x07
   \   0000045E   8108                       LD      R16,Y
   \   00000460   9503                       INC     R16
   \   00000462   8308                       ST      Y,R16
   \                     ??Cal_Key_Contr_6:
   \   00000464   8108                       LD      R16,Y
   \   00000466   3302                       CPI     R16,50
   \   00000468   F3C8                       BRCS    ??Cal_Key_Contr_7
    389              };
    390             SetBit(KEY_PORT_OUT, SEL3);     // Output "1" SEL3
   \   0000046A   9AAF                       SBI     0x15,0x07
    391            /* 2. Input scan-code for SEL0 */
    392             KEY_PORT_CONT = KEY_PORT_CONT & ~( 8+4+2+1); // PORT input
   \   0000046C   B304                       IN      R16,0x14
   \   0000046E   7F00                       ANDI    R16,0xF0
   \   00000470   BB04                       OUT     0x14,R16
    393             scan = KEY_PORT_IN & 0x0F; // scan port SEL3
   \   00000472   B303                       IN      R16,0x13
   \   00000474   700F                       ANDI    R16,0x0F
    394            /* 3. Calcumate mediam */
    395            SUM_SCN12 = SUM_SCN12 - (SCN3[Head_SCN3]& 0x01 );
   \   00000476   9110....                   LDS     R17,SUM_SCN12
   \   0000047A   9120....                   LDS     R18,Head_SCN3
   \   0000047E   E030                       LDI     R19,0
   \   00000480   01F9                       MOVW    R31 : R30,R19 : R18
   \   00000482   ....                       SUBI    R30,LOW((-(SCN3) & 0xFFFF))
   \   00000484   ....                       SBCI    R31,(-(SCN3) & 0xFFFF) >> 8
   \   00000486   8120                       LD      R18,Z
   \   00000488   7021                       ANDI    R18,0x01
   \   0000048A   1B12                       SUB     R17,R18
   \   0000048C   9310....                   STS     SUM_SCN12,R17
    396            SUM_SCN12 = SUM_SCN12 + (scan & 0x01);
   \   00000490   2F10                       MOV     R17,R16
   \   00000492   7011                       ANDI    R17,0x01
   \   00000494   ....                       LDI     R30,LOW(SUM_SCN12)
   \   00000496   ....                       LDI     R31,(SUM_SCN12) >> 8
   \   00000498   8120                       LD      R18,Z
   \   0000049A   0F21                       ADD     R18,R17
   \   0000049C   8320                       ST      Z,R18
    397            SUM_SCN13 = SUM_SCN13 - ((SCN3[Head_SCN3]& 0x02)>>1);
   \   0000049E   9110....                   LDS     R17,SUM_SCN13
   \   000004A2   9120....                   LDS     R18,Head_SCN3
   \   000004A6   E030                       LDI     R19,0
   \   000004A8   01F9                       MOVW    R31 : R30,R19 : R18
   \   000004AA   ....                       SUBI    R30,LOW((-(SCN3) & 0xFFFF))
   \   000004AC   ....                       SBCI    R31,(-(SCN3) & 0xFFFF) >> 8
   \   000004AE   8120                       LD      R18,Z
   \   000004B0   7022                       ANDI    R18,0x02
   \   000004B2   9525                       ASR     R18
   \   000004B4   1B12                       SUB     R17,R18
   \   000004B6   9310....                   STS     SUM_SCN13,R17
    398            SUM_SCN13 = SUM_SCN13 + ((scan & 0x02)>>1);
   \   000004BA   2F10                       MOV     R17,R16
   \   000004BC   7012                       ANDI    R17,0x02
   \   000004BE   9515                       ASR     R17
   \   000004C0   ....                       LDI     R30,LOW(SUM_SCN13)
   \   000004C2   ....                       LDI     R31,(SUM_SCN13) >> 8
   \   000004C4   8120                       LD      R18,Z
   \   000004C6   0F21                       ADD     R18,R17
   \   000004C8   8320                       ST      Z,R18
    399            SUM_SCN14 = SUM_SCN14 - ((SCN3[Head_SCN3]& 0x04)>>2);
   \   000004CA   9110....                   LDS     R17,SUM_SCN14
   \   000004CE   9120....                   LDS     R18,Head_SCN3
   \   000004D2   E030                       LDI     R19,0
   \   000004D4   01F9                       MOVW    R31 : R30,R19 : R18
   \   000004D6   ....                       SUBI    R30,LOW((-(SCN3) & 0xFFFF))
   \   000004D8   ....                       SBCI    R31,(-(SCN3) & 0xFFFF) >> 8
   \   000004DA   8120                       LD      R18,Z
   \   000004DC   7024                       ANDI    R18,0x04
   \   000004DE   9525                       ASR     R18
   \   000004E0   9525                       ASR     R18
   \   000004E2   1B12                       SUB     R17,R18
   \   000004E4   9310....                   STS     SUM_SCN14,R17
    400            SUM_SCN14 = SUM_SCN14 + ((scan & 0x04)>>2);
   \   000004E8   2F10                       MOV     R17,R16
   \   000004EA   7014                       ANDI    R17,0x04
   \   000004EC   9515                       ASR     R17
   \   000004EE   9515                       ASR     R17
   \   000004F0   ....                       LDI     R30,LOW(SUM_SCN14)
   \   000004F2   ....                       LDI     R31,(SUM_SCN14) >> 8
   \   000004F4   8120                       LD      R18,Z
   \   000004F6   0F21                       ADD     R18,R17
   \   000004F8   8320                       ST      Z,R18
    401            SUM_SCN15 = SUM_SCN15 - ((SCN3[Head_SCN3] & 0x08)>>3);
   \   000004FA   9110....                   LDS     R17,SUM_SCN15
   \   000004FE   9120....                   LDS     R18,Head_SCN3
   \   00000502   E030                       LDI     R19,0
   \   00000504   01F9                       MOVW    R31 : R30,R19 : R18
   \   00000506   ....                       SUBI    R30,LOW((-(SCN3) & 0xFFFF))
   \   00000508   ....                       SBCI    R31,(-(SCN3) & 0xFFFF) >> 8
   \   0000050A   8120                       LD      R18,Z
   \   0000050C   7028                       ANDI    R18,0x08
   \   0000050E   9525                       ASR     R18
   \   00000510   9525                       ASR     R18
   \   00000512   9525                       ASR     R18
   \   00000514   1B12                       SUB     R17,R18
   \   00000516   9310....                   STS     SUM_SCN15,R17
    402            SUM_SCN15 = SUM_SCN15 + ((scan & 0x08)>>3);
   \   0000051A   2F10                       MOV     R17,R16
   \   0000051C   7018                       ANDI    R17,0x08
   \   0000051E   9515                       ASR     R17
   \   00000520   9515                       ASR     R17
   \   00000522   9515                       ASR     R17
   \   00000524   ....                       LDI     R30,LOW(SUM_SCN15)
   \   00000526   ....                       LDI     R31,(SUM_SCN15) >> 8
   \   00000528   8120                       LD      R18,Z
   \   0000052A   0F21                       ADD     R18,R17
   \   0000052C   8320                       ST      Z,R18
    403          
    404            SCN3[Head_SCN3] = scan;
   \   0000052E   9120....                   LDS     R18,Head_SCN3
   \   00000532   E030                       LDI     R19,0
   \   00000534   01F9                       MOVW    R31 : R30,R19 : R18
   \   00000536   ....                       SUBI    R30,LOW((-(SCN3) & 0xFFFF))
   \   00000538   ....                       SBCI    R31,(-(SCN3) & 0xFFFF) >> 8
   \   0000053A   8300                       ST      Z,R16
    405          
    406            Head_SCN3 = (Head_SCN3+1) & BUFFER_MASK_SCN0;
   \   0000053C   9100....                   LDS     R16,Head_SCN3
   \   00000540   9503                       INC     R16
   \   00000542   7007                       ANDI    R16,0x07
   \   00000544   9300....                   STS     Head_SCN3,R16
    407          
    408            OLD_SCN3 = NEW_SCN3;
   \   00000548   9100....                   LDS     R16,NEW_SCN3
   \   0000054C   9300....                   STS     OLD_SCN3,R16
    409            NEW_SCN3 = 0;
   \   00000550   E000                       LDI     R16,0
   \   00000552   9300....                   STS     NEW_SCN3,R16
    410            i = (unsigned char)( SUM_SCN12 / BUFFER_SIZE_KEY);
   \   00000556   9100....                   LDS     R16,SUM_SCN12
   \   0000055A   E048                       LDI     R20,8
   \   0000055C   ........                   CALL    ?UC_DIVMOD_L01
   \   00000560   8308                       ST      Y,R16
    411            NEW_SCN3 = NEW_SCN3 | i;
   \   00000562   9100....                   LDS     R16,NEW_SCN3
   \   00000566   8118                       LD      R17,Y
   \   00000568   2B10                       OR      R17,R16
   \   0000056A   9310....                   STS     NEW_SCN3,R17
    412            i = (unsigned char)( SUM_SCN13 / BUFFER_SIZE_KEY );
   \   0000056E   9100....                   LDS     R16,SUM_SCN13
   \   00000572   E048                       LDI     R20,8
   \   00000574   ........                   CALL    ?UC_DIVMOD_L01
   \   00000578   8308                       ST      Y,R16
    413            NEW_SCN3 = NEW_SCN3 | (i<<1);
   \   0000057A   9100....                   LDS     R16,NEW_SCN3
   \   0000057E   8118                       LD      R17,Y
   \   00000580   0F11                       LSL     R17
   \   00000582   2B10                       OR      R17,R16
   \   00000584   9310....                   STS     NEW_SCN3,R17
    414            i = (unsigned char)( SUM_SCN14 / BUFFER_SIZE_KEY);
   \   00000588   9100....                   LDS     R16,SUM_SCN14
   \   0000058C   E048                       LDI     R20,8
   \   0000058E   ........                   CALL    ?UC_DIVMOD_L01
   \   00000592   8308                       ST      Y,R16
    415            NEW_SCN3 = NEW_SCN3 | (i<<2);
   \   00000594   9100....                   LDS     R16,NEW_SCN3
   \   00000598   8118                       LD      R17,Y
   \   0000059A   0F11                       LSL     R17
   \   0000059C   0F11                       LSL     R17
   \   0000059E   2B10                       OR      R17,R16
   \   000005A0   9310....                   STS     NEW_SCN3,R17
    416            i = (unsigned char)( SUM_SCN15 / BUFFER_SIZE_KEY );
   \   000005A4   9100....                   LDS     R16,SUM_SCN15
   \   000005A8   E048                       LDI     R20,8
   \   000005AA   ........                   CALL    ?UC_DIVMOD_L01
   \   000005AE   8308                       ST      Y,R16
    417            NEW_SCN3 = NEW_SCN3 | (i<<3);
   \   000005B0   9100....                   LDS     R16,NEW_SCN3
   \   000005B4   8118                       LD      R17,Y
   \   000005B6   0F11                       LSL     R17
   \   000005B8   0F11                       LSL     R17
   \   000005BA   0F11                       LSL     R17
   \   000005BC   2B10                       OR      R17,R16
   \   000005BE   9310....                   STS     NEW_SCN3,R17
    418          
    419            /* Return vector [type   event, scan-code] */
    420              if ( ((NEW_SCN2 & 0x01) - (OLD_SCN2 & 0x01)) > 0 )
   \   000005C2   9100....                   LDS     R16,NEW_SCN2
   \   000005C6   9110....                   LDS     R17,OLD_SCN2
    421              {
    422              //DDRA = 0xFF;
    423              //PORTA = ~((unsigned char) PORTA);
    424              };
    425            }
   \   000005CA   9621                       ADIW    R29 : R28,1
   \   000005CC   9508                       RET
    426          /*  END Calculate status KEY */
    427          /*---------------------------*/
    428          
    429          /*-----------------------------*/
    430          /*  Calculate events KEY  0->0 */

   \                                 In segment CODE, align 2, keep-with-next
    431          unsigned char Key_Event_00 ( unsigned char sel ) // sel = [0,1,2,3]
    432            {
    433            unsigned char tmp;
    434            switch (sel)
   \   __nearfunc unsigned char Key_Event_00(unsigned char);
   \                     Key_Event_00:
   \   00000000   2F10                       MOV     R17,R16
   \   00000002   5010                       SUBI    R17,0
   \   00000004   F041                       BREQ    ??Key_Event_00_0
   \   00000006   951A                       DEC     R17
   \   00000008   F0D9                       BREQ    ??Key_Event_00_1
   \   0000000A   951A                       DEC     R17
   \   0000000C   F171                       BREQ    ??Key_Event_00_2
   \   0000000E   951A                       DEC     R17
   \   00000010   F409                       BRNE    ??Key_Event_00_3
   \   00000012   C040                       RJMP    ??Key_Event_00_4
   \                     ??Key_Event_00_3:
   \   00000014   C054                       RJMP    ??Key_Event_00_5
    435            {
    436            case 0:
    437            /* calculate event */
    438            tmp = (( ~(NEW_SCN0) & ~OLD_SCN0 ) & M00[sel]) & 0x0F;
   \                     ??Key_Event_00_0:
   \   00000016   9110....                   LDS     R17,NEW_SCN0
   \   0000001A   9120....                   LDS     R18,OLD_SCN0
   \   0000001E   9510                       COM     R17
   \   00000020   9520                       COM     R18
   \   00000022   2321                       AND     R18,R17
   \   00000024   E010                       LDI     R17,0
   \   00000026   01F8                       MOVW    R31 : R30,R17 : R16
   \   00000028   ....                       SUBI    R30,LOW((-(M00) & 0xFFFF))
   \   0000002A   ....                       SBCI    R31,(-(M00) & 0xFFFF) >> 8
   \   0000002C   8110                       LD      R17,Z
   \   0000002E   2312                       AND     R17,R18
   \   00000030   701F                       ANDI    R17,0x0F
    439            EVEN_M00[sel] = tmp;
   \   00000032   2F20                       MOV     R18,R16
   \   00000034   E030                       LDI     R19,0
   \   00000036   01F9                       MOVW    R31 : R30,R19 : R18
   \   00000038   ....                       SUBI    R30,LOW((-(EVEN_M00) & 0xFFFF))
   \   0000003A   ....                       SBCI    R31,(-(EVEN_M00) & 0xFFFF) >> 8
   \   0000003C   8310                       ST      Z,R17
   \   0000003E   C040                       RJMP    ??Key_Event_00_6
    440            break;
    441            case 1:
    442            tmp = (( ~(NEW_SCN1) & ~OLD_SCN1 ) & M00[sel]) & 0x0F;
   \                     ??Key_Event_00_1:
   \   00000040   9110....                   LDS     R17,NEW_SCN1
   \   00000044   9120....                   LDS     R18,OLD_SCN1
   \   00000048   9510                       COM     R17
   \   0000004A   9520                       COM     R18
   \   0000004C   2321                       AND     R18,R17
   \   0000004E   E010                       LDI     R17,0
   \   00000050   01F8                       MOVW    R31 : R30,R17 : R16
   \   00000052   ....                       SUBI    R30,LOW((-(M00) & 0xFFFF))
   \   00000054   ....                       SBCI    R31,(-(M00) & 0xFFFF) >> 8
   \   00000056   8110                       LD      R17,Z
   \   00000058   2312                       AND     R17,R18
   \   0000005A   701F                       ANDI    R17,0x0F
    443            EVEN_M00[sel] = tmp;
   \   0000005C   2F20                       MOV     R18,R16
   \   0000005E   E030                       LDI     R19,0
   \   00000060   01F9                       MOVW    R31 : R30,R19 : R18
   \   00000062   ....                       SUBI    R30,LOW((-(EVEN_M00) & 0xFFFF))
   \   00000064   ....                       SBCI    R31,(-(EVEN_M00) & 0xFFFF) >> 8
   \   00000066   8310                       ST      Z,R17
   \   00000068   C02B                       RJMP    ??Key_Event_00_6
    444            break;
    445            case 2:
    446            tmp = (( ~(NEW_SCN2) & ~OLD_SCN2 ) & M00[sel]) & 0x0F;
   \                     ??Key_Event_00_2:
   \   0000006A   9110....                   LDS     R17,NEW_SCN2
   \   0000006E   9120....                   LDS     R18,OLD_SCN2
   \   00000072   9510                       COM     R17
   \   00000074   9520                       COM     R18
   \   00000076   2321                       AND     R18,R17
   \   00000078   E010                       LDI     R17,0
   \   0000007A   01F8                       MOVW    R31 : R30,R17 : R16
   \   0000007C   ....                       SUBI    R30,LOW((-(M00) & 0xFFFF))
   \   0000007E   ....                       SBCI    R31,(-(M00) & 0xFFFF) >> 8
   \   00000080   8110                       LD      R17,Z
   \   00000082   2312                       AND     R17,R18
   \   00000084   701F                       ANDI    R17,0x0F
    447            EVEN_M00[sel] = tmp;
   \   00000086   2F20                       MOV     R18,R16
   \   00000088   E030                       LDI     R19,0
   \   0000008A   01F9                       MOVW    R31 : R30,R19 : R18
   \   0000008C   ....                       SUBI    R30,LOW((-(EVEN_M00) & 0xFFFF))
   \   0000008E   ....                       SBCI    R31,(-(EVEN_M00) & 0xFFFF) >> 8
   \   00000090   8310                       ST      Z,R17
   \   00000092   C016                       RJMP    ??Key_Event_00_6
    448            break;
    449            case 3:
    450            tmp = (( ~(NEW_SCN3) & ~OLD_SCN3 ) & M00[sel]) & 0x0F;
   \                     ??Key_Event_00_4:
   \   00000094   9110....                   LDS     R17,NEW_SCN3
   \   00000098   9120....                   LDS     R18,OLD_SCN3
   \   0000009C   9510                       COM     R17
   \   0000009E   9520                       COM     R18
   \   000000A0   2321                       AND     R18,R17
   \   000000A2   E010                       LDI     R17,0
   \   000000A4   01F8                       MOVW    R31 : R30,R17 : R16
   \   000000A6   ....                       SUBI    R30,LOW((-(M00) & 0xFFFF))
   \   000000A8   ....                       SBCI    R31,(-(M00) & 0xFFFF) >> 8
   \   000000AA   8110                       LD      R17,Z
   \   000000AC   2312                       AND     R17,R18
   \   000000AE   701F                       ANDI    R17,0x0F
    451            EVEN_M00[sel] = tmp;
   \   000000B0   2F20                       MOV     R18,R16
   \   000000B2   E030                       LDI     R19,0
   \   000000B4   01F9                       MOVW    R31 : R30,R19 : R18
   \   000000B6   ....                       SUBI    R30,LOW((-(EVEN_M00) & 0xFFFF))
   \   000000B8   ....                       SBCI    R31,(-(EVEN_M00) & 0xFFFF) >> 8
   \   000000BA   8310                       ST      Z,R17
   \   000000BC   C001                       RJMP    ??Key_Event_00_6
    452            break;
    453            default:
    454            tmp = 0;
   \                     ??Key_Event_00_5:
   \   000000BE   E010                       LDI     R17,0
    455            break;
    456            };
    457           return ( tmp);
   \                     ??Key_Event_00_6:
   \   000000C0   2F01                       MOV     R16,R17
   \   000000C2   9508                       RET
    458            }
    459          
    460          /*  END Calculate events KEY 0->0 */
    461          /*--------------------------------*/
    462          
    463          /*-----------------------------*/
    464          /*  Calculate events KEY  0->1 */

   \                                 In segment CODE, align 2, keep-with-next
    465          unsigned char Key_Event_01 ( unsigned char sel )// sel = [0,1,2,3]
    466            {
    467            unsigned char tmp;
    468            switch (sel)
   \   __nearfunc unsigned char Key_Event_01(unsigned char);
   \                     Key_Event_01:
   \   00000000   2F10                       MOV     R17,R16
   \   00000002   5010                       SUBI    R17,0
   \   00000004   F039                       BREQ    ??Key_Event_01_0
   \   00000006   951A                       DEC     R17
   \   00000008   F0C9                       BREQ    ??Key_Event_01_1
   \   0000000A   951A                       DEC     R17
   \   0000000C   F159                       BREQ    ??Key_Event_01_2
   \   0000000E   951A                       DEC     R17
   \   00000010   F1E9                       BREQ    ??Key_Event_01_3
   \   00000012   C050                       RJMP    ??Key_Event_01_4
    469            {
    470            case 0:
    471            /* calculate event */
    472            tmp = (( (NEW_SCN0) & ~OLD_SCN0 ) & M01[sel]) & 0x0F;
   \                     ??Key_Event_01_0:
   \   00000014   9110....                   LDS     R17,NEW_SCN0
   \   00000018   9120....                   LDS     R18,OLD_SCN0
   \   0000001C   9520                       COM     R18
   \   0000001E   2321                       AND     R18,R17
   \   00000020   E010                       LDI     R17,0
   \   00000022   01F8                       MOVW    R31 : R30,R17 : R16
   \   00000024   ....                       SUBI    R30,LOW((-(M01) & 0xFFFF))
   \   00000026   ....                       SBCI    R31,(-(M01) & 0xFFFF) >> 8
   \   00000028   8110                       LD      R17,Z
   \   0000002A   2312                       AND     R17,R18
   \   0000002C   701F                       ANDI    R17,0x0F
    473            EVEN_M01[sel] = tmp;
   \   0000002E   2F20                       MOV     R18,R16
   \   00000030   E030                       LDI     R19,0
   \   00000032   01F9                       MOVW    R31 : R30,R19 : R18
   \   00000034   ....                       SUBI    R30,LOW((-(EVEN_M01) & 0xFFFF))
   \   00000036   ....                       SBCI    R31,(-(EVEN_M01) & 0xFFFF) >> 8
   \   00000038   8310                       ST      Z,R17
   \   0000003A   C03D                       RJMP    ??Key_Event_01_5
    474            break;
    475            case 1:
    476            tmp = (( (NEW_SCN1) & ~OLD_SCN1 ) & M01[sel]) & 0x0F;
   \                     ??Key_Event_01_1:
   \   0000003C   9110....                   LDS     R17,NEW_SCN1
   \   00000040   9120....                   LDS     R18,OLD_SCN1
   \   00000044   9520                       COM     R18
   \   00000046   2321                       AND     R18,R17
   \   00000048   E010                       LDI     R17,0
   \   0000004A   01F8                       MOVW    R31 : R30,R17 : R16
   \   0000004C   ....                       SUBI    R30,LOW((-(M01) & 0xFFFF))
   \   0000004E   ....                       SBCI    R31,(-(M01) & 0xFFFF) >> 8
   \   00000050   8110                       LD      R17,Z
   \   00000052   2312                       AND     R17,R18
   \   00000054   701F                       ANDI    R17,0x0F
    477            EVEN_M01[sel] = tmp;
   \   00000056   2F20                       MOV     R18,R16
   \   00000058   E030                       LDI     R19,0
   \   0000005A   01F9                       MOVW    R31 : R30,R19 : R18
   \   0000005C   ....                       SUBI    R30,LOW((-(EVEN_M01) & 0xFFFF))
   \   0000005E   ....                       SBCI    R31,(-(EVEN_M01) & 0xFFFF) >> 8
   \   00000060   8310                       ST      Z,R17
   \   00000062   C029                       RJMP    ??Key_Event_01_5
    478            break;
    479            case 2:
    480            tmp = (( (NEW_SCN2) & ~OLD_SCN2 ) & M01[sel]) & 0x0F;
   \                     ??Key_Event_01_2:
   \   00000064   9110....                   LDS     R17,NEW_SCN2
   \   00000068   9120....                   LDS     R18,OLD_SCN2
   \   0000006C   9520                       COM     R18
   \   0000006E   2321                       AND     R18,R17
   \   00000070   E010                       LDI     R17,0
   \   00000072   01F8                       MOVW    R31 : R30,R17 : R16
   \   00000074   ....                       SUBI    R30,LOW((-(M01) & 0xFFFF))
   \   00000076   ....                       SBCI    R31,(-(M01) & 0xFFFF) >> 8
   \   00000078   8110                       LD      R17,Z
   \   0000007A   2312                       AND     R17,R18
   \   0000007C   701F                       ANDI    R17,0x0F
    481            EVEN_M01[sel] = tmp;
   \   0000007E   2F20                       MOV     R18,R16
   \   00000080   E030                       LDI     R19,0
   \   00000082   01F9                       MOVW    R31 : R30,R19 : R18
   \   00000084   ....                       SUBI    R30,LOW((-(EVEN_M01) & 0xFFFF))
   \   00000086   ....                       SBCI    R31,(-(EVEN_M01) & 0xFFFF) >> 8
   \   00000088   8310                       ST      Z,R17
   \   0000008A   C015                       RJMP    ??Key_Event_01_5
    482            break;
    483            case 3:
    484            tmp = (( (NEW_SCN3) & ~OLD_SCN3 ) & M01[sel]) & 0x0F;
   \                     ??Key_Event_01_3:
   \   0000008C   9110....                   LDS     R17,NEW_SCN3
   \   00000090   9120....                   LDS     R18,OLD_SCN3
   \   00000094   9520                       COM     R18
   \   00000096   2321                       AND     R18,R17
   \   00000098   E010                       LDI     R17,0
   \   0000009A   01F8                       MOVW    R31 : R30,R17 : R16
   \   0000009C   ....                       SUBI    R30,LOW((-(M01) & 0xFFFF))
   \   0000009E   ....                       SBCI    R31,(-(M01) & 0xFFFF) >> 8
   \   000000A0   8110                       LD      R17,Z
   \   000000A2   2312                       AND     R17,R18
   \   000000A4   701F                       ANDI    R17,0x0F
    485            EVEN_M01[sel] = tmp;
   \   000000A6   2F20                       MOV     R18,R16
   \   000000A8   E030                       LDI     R19,0
   \   000000AA   01F9                       MOVW    R31 : R30,R19 : R18
   \   000000AC   ....                       SUBI    R30,LOW((-(EVEN_M01) & 0xFFFF))
   \   000000AE   ....                       SBCI    R31,(-(EVEN_M01) & 0xFFFF) >> 8
   \   000000B0   8310                       ST      Z,R17
   \   000000B2   C001                       RJMP    ??Key_Event_01_5
    486            break;
    487            default:
    488            tmp = 0;
   \                     ??Key_Event_01_4:
   \   000000B4   E010                       LDI     R17,0
    489            break;
    490             };
    491          return ( tmp);
   \                     ??Key_Event_01_5:
   \   000000B6   2F01                       MOV     R16,R17
   \   000000B8   9508                       RET
    492            }
    493          
    494          /*  END Calculate events KEY 0->1 */
    495          /*--------------------------------*/
    496          
    497          /*-----------------------------*/
    498          /*  Calculate events KEY  1->0 */

   \                                 In segment CODE, align 2, keep-with-next
    499          unsigned char Key_Event_10 ( unsigned char sel )// sel = [0,1,2,3]
    500            {
    501            unsigned char tmp;
    502            switch (sel)
   \   __nearfunc unsigned char Key_Event_10(unsigned char);
   \                     Key_Event_10:
   \   00000000   2F10                       MOV     R17,R16
   \   00000002   5010                       SUBI    R17,0
   \   00000004   F039                       BREQ    ??Key_Event_10_0
   \   00000006   951A                       DEC     R17
   \   00000008   F0C9                       BREQ    ??Key_Event_10_1
   \   0000000A   951A                       DEC     R17
   \   0000000C   F159                       BREQ    ??Key_Event_10_2
   \   0000000E   951A                       DEC     R17
   \   00000010   F1E9                       BREQ    ??Key_Event_10_3
   \   00000012   C050                       RJMP    ??Key_Event_10_4
    503            {
    504            case 0:
    505            /* calculate event */
    506            tmp = (( ~(NEW_SCN0) & OLD_SCN0 ) & M10[sel]) & 0x0F;
   \                     ??Key_Event_10_0:
   \   00000014   9120....                   LDS     R18,NEW_SCN0
   \   00000018   9110....                   LDS     R17,OLD_SCN0
   \   0000001C   9520                       COM     R18
   \   0000001E   2321                       AND     R18,R17
   \   00000020   E010                       LDI     R17,0
   \   00000022   01F8                       MOVW    R31 : R30,R17 : R16
   \   00000024   ....                       SUBI    R30,LOW((-(M10) & 0xFFFF))
   \   00000026   ....                       SBCI    R31,(-(M10) & 0xFFFF) >> 8
   \   00000028   8110                       LD      R17,Z
   \   0000002A   2312                       AND     R17,R18
   \   0000002C   701F                       ANDI    R17,0x0F
    507            EVEN_M10[sel] = tmp;
   \   0000002E   2F20                       MOV     R18,R16
   \   00000030   E030                       LDI     R19,0
   \   00000032   01F9                       MOVW    R31 : R30,R19 : R18
   \   00000034   ....                       SUBI    R30,LOW((-(EVEN_M10) & 0xFFFF))
   \   00000036   ....                       SBCI    R31,(-(EVEN_M10) & 0xFFFF) >> 8
   \   00000038   8310                       ST      Z,R17
   \   0000003A   C03D                       RJMP    ??Key_Event_10_5
    508            break;
    509            case 1:
    510            tmp = (( ~(NEW_SCN1) & OLD_SCN1 ) & M10[sel]) & 0x0F;
   \                     ??Key_Event_10_1:
   \   0000003C   9120....                   LDS     R18,NEW_SCN1
   \   00000040   9110....                   LDS     R17,OLD_SCN1
   \   00000044   9520                       COM     R18
   \   00000046   2321                       AND     R18,R17
   \   00000048   E010                       LDI     R17,0
   \   0000004A   01F8                       MOVW    R31 : R30,R17 : R16
   \   0000004C   ....                       SUBI    R30,LOW((-(M10) & 0xFFFF))
   \   0000004E   ....                       SBCI    R31,(-(M10) & 0xFFFF) >> 8
   \   00000050   8110                       LD      R17,Z
   \   00000052   2312                       AND     R17,R18
   \   00000054   701F                       ANDI    R17,0x0F
    511            EVEN_M10[sel] = tmp;
   \   00000056   2F20                       MOV     R18,R16
   \   00000058   E030                       LDI     R19,0
   \   0000005A   01F9                       MOVW    R31 : R30,R19 : R18
   \   0000005C   ....                       SUBI    R30,LOW((-(EVEN_M10) & 0xFFFF))
   \   0000005E   ....                       SBCI    R31,(-(EVEN_M10) & 0xFFFF) >> 8
   \   00000060   8310                       ST      Z,R17
   \   00000062   C029                       RJMP    ??Key_Event_10_5
    512            break;
    513            case 2:
    514            tmp = (( ~(NEW_SCN2) & OLD_SCN2 ) & M10[sel]) & 0x0F;
   \                     ??Key_Event_10_2:
   \   00000064   9120....                   LDS     R18,NEW_SCN2
   \   00000068   9110....                   LDS     R17,OLD_SCN2
   \   0000006C   9520                       COM     R18
   \   0000006E   2321                       AND     R18,R17
   \   00000070   E010                       LDI     R17,0
   \   00000072   01F8                       MOVW    R31 : R30,R17 : R16
   \   00000074   ....                       SUBI    R30,LOW((-(M10) & 0xFFFF))
   \   00000076   ....                       SBCI    R31,(-(M10) & 0xFFFF) >> 8
   \   00000078   8110                       LD      R17,Z
   \   0000007A   2312                       AND     R17,R18
   \   0000007C   701F                       ANDI    R17,0x0F
    515            EVEN_M10[sel] = tmp;
   \   0000007E   2F20                       MOV     R18,R16
   \   00000080   E030                       LDI     R19,0
   \   00000082   01F9                       MOVW    R31 : R30,R19 : R18
   \   00000084   ....                       SUBI    R30,LOW((-(EVEN_M10) & 0xFFFF))
   \   00000086   ....                       SBCI    R31,(-(EVEN_M10) & 0xFFFF) >> 8
   \   00000088   8310                       ST      Z,R17
   \   0000008A   C015                       RJMP    ??Key_Event_10_5
    516            break;
    517            case 3:
    518            tmp = (( ~(NEW_SCN3) & OLD_SCN3 ) & M10[sel]) & 0x0F;
   \                     ??Key_Event_10_3:
   \   0000008C   9120....                   LDS     R18,NEW_SCN3
   \   00000090   9110....                   LDS     R17,OLD_SCN3
   \   00000094   9520                       COM     R18
   \   00000096   2321                       AND     R18,R17
   \   00000098   E010                       LDI     R17,0
   \   0000009A   01F8                       MOVW    R31 : R30,R17 : R16
   \   0000009C   ....                       SUBI    R30,LOW((-(M10) & 0xFFFF))
   \   0000009E   ....                       SBCI    R31,(-(M10) & 0xFFFF) >> 8
   \   000000A0   8110                       LD      R17,Z
   \   000000A2   2312                       AND     R17,R18
   \   000000A4   701F                       ANDI    R17,0x0F
    519            EVEN_M10[sel] = tmp;
   \   000000A6   2F20                       MOV     R18,R16
   \   000000A8   E030                       LDI     R19,0
   \   000000AA   01F9                       MOVW    R31 : R30,R19 : R18
   \   000000AC   ....                       SUBI    R30,LOW((-(EVEN_M10) & 0xFFFF))
   \   000000AE   ....                       SBCI    R31,(-(EVEN_M10) & 0xFFFF) >> 8
   \   000000B0   8310                       ST      Z,R17
   \   000000B2   C001                       RJMP    ??Key_Event_10_5
    520            break;
    521            default:
    522            tmp = 0;
   \                     ??Key_Event_10_4:
   \   000000B4   E010                       LDI     R17,0
    523            break;
    524             };
    525           return ( tmp);
   \                     ??Key_Event_10_5:
   \   000000B6   2F01                       MOV     R16,R17
   \   000000B8   9508                       RET
    526            }
    527          
    528          /*  END Calculate events KEY 1->0 */
    529          /*--------------------------------*/
    530          
    531          /*-----------------------------*/
    532          /*  Calculate events KEY  1->1 */

   \                                 In segment CODE, align 2, keep-with-next
    533          unsigned char Key_Event_11 ( unsigned char sel )// sel = [0,1,2,3]
    534            {
    535            unsigned char tmp;
    536            switch (sel)
   \   __nearfunc unsigned char Key_Event_11(unsigned char);
   \                     Key_Event_11:
   \   00000000   2F10                       MOV     R17,R16
   \   00000002   5010                       SUBI    R17,0
   \   00000004   F039                       BREQ    ??Key_Event_11_0
   \   00000006   951A                       DEC     R17
   \   00000008   F0C1                       BREQ    ??Key_Event_11_1
   \   0000000A   951A                       DEC     R17
   \   0000000C   F149                       BREQ    ??Key_Event_11_2
   \   0000000E   951A                       DEC     R17
   \   00000010   F1D1                       BREQ    ??Key_Event_11_3
   \   00000012   C04C                       RJMP    ??Key_Event_11_4
    537            {
    538            case 0:
    539            /* calculate event */
    540            tmp = (( (NEW_SCN0) & OLD_SCN0 ) & M11[sel]) & 0x0F;
   \                     ??Key_Event_11_0:
   \   00000014   9110....                   LDS     R17,NEW_SCN0
   \   00000018   9120....                   LDS     R18,OLD_SCN0
   \   0000001C   2321                       AND     R18,R17
   \   0000001E   E010                       LDI     R17,0
   \   00000020   01F8                       MOVW    R31 : R30,R17 : R16
   \   00000022   ....                       SUBI    R30,LOW((-(M11) & 0xFFFF))
   \   00000024   ....                       SBCI    R31,(-(M11) & 0xFFFF) >> 8
   \   00000026   8110                       LD      R17,Z
   \   00000028   2312                       AND     R17,R18
   \   0000002A   701F                       ANDI    R17,0x0F
    541            EVEN_M11[sel] = tmp;
   \   0000002C   2F20                       MOV     R18,R16
   \   0000002E   E030                       LDI     R19,0
   \   00000030   01F9                       MOVW    R31 : R30,R19 : R18
   \   00000032   ....                       SUBI    R30,LOW((-(EVEN_M11) & 0xFFFF))
   \   00000034   ....                       SBCI    R31,(-(EVEN_M11) & 0xFFFF) >> 8
   \   00000036   8310                       ST      Z,R17
   \   00000038   C03A                       RJMP    ??Key_Event_11_5
    542            break;
    543            case 1:
    544            tmp = (( (NEW_SCN1) & OLD_SCN1 ) & M11[sel]) & 0x0F;
   \                     ??Key_Event_11_1:
   \   0000003A   9110....                   LDS     R17,NEW_SCN1
   \   0000003E   9120....                   LDS     R18,OLD_SCN1
   \   00000042   2321                       AND     R18,R17
   \   00000044   E010                       LDI     R17,0
   \   00000046   01F8                       MOVW    R31 : R30,R17 : R16
   \   00000048   ....                       SUBI    R30,LOW((-(M11) & 0xFFFF))
   \   0000004A   ....                       SBCI    R31,(-(M11) & 0xFFFF) >> 8
   \   0000004C   8110                       LD      R17,Z
   \   0000004E   2312                       AND     R17,R18
   \   00000050   701F                       ANDI    R17,0x0F
    545            EVEN_M11[sel] = tmp;
   \   00000052   2F20                       MOV     R18,R16
   \   00000054   E030                       LDI     R19,0
   \   00000056   01F9                       MOVW    R31 : R30,R19 : R18
   \   00000058   ....                       SUBI    R30,LOW((-(EVEN_M11) & 0xFFFF))
   \   0000005A   ....                       SBCI    R31,(-(EVEN_M11) & 0xFFFF) >> 8
   \   0000005C   8310                       ST      Z,R17
   \   0000005E   C027                       RJMP    ??Key_Event_11_5
    546            break;
    547            case 2:
    548            tmp = (( (NEW_SCN2) & OLD_SCN2 ) & M11[sel]) & 0x0F;
   \                     ??Key_Event_11_2:
   \   00000060   9110....                   LDS     R17,NEW_SCN2
   \   00000064   9120....                   LDS     R18,OLD_SCN2
   \   00000068   2321                       AND     R18,R17
   \   0000006A   E010                       LDI     R17,0
   \   0000006C   01F8                       MOVW    R31 : R30,R17 : R16
   \   0000006E   ....                       SUBI    R30,LOW((-(M11) & 0xFFFF))
   \   00000070   ....                       SBCI    R31,(-(M11) & 0xFFFF) >> 8
   \   00000072   8110                       LD      R17,Z
   \   00000074   2312                       AND     R17,R18
   \   00000076   701F                       ANDI    R17,0x0F
    549            EVEN_M11[sel] = tmp;
   \   00000078   2F20                       MOV     R18,R16
   \   0000007A   E030                       LDI     R19,0
   \   0000007C   01F9                       MOVW    R31 : R30,R19 : R18
   \   0000007E   ....                       SUBI    R30,LOW((-(EVEN_M11) & 0xFFFF))
   \   00000080   ....                       SBCI    R31,(-(EVEN_M11) & 0xFFFF) >> 8
   \   00000082   8310                       ST      Z,R17
   \   00000084   C014                       RJMP    ??Key_Event_11_5
    550            break;
    551            case 3:
    552            tmp = (( (NEW_SCN3) & OLD_SCN3 ) & M11[sel]) & 0x0F;
   \                     ??Key_Event_11_3:
   \   00000086   9110....                   LDS     R17,NEW_SCN3
   \   0000008A   9120....                   LDS     R18,OLD_SCN3
   \   0000008E   2321                       AND     R18,R17
   \   00000090   E010                       LDI     R17,0
   \   00000092   01F8                       MOVW    R31 : R30,R17 : R16
   \   00000094   ....                       SUBI    R30,LOW((-(M11) & 0xFFFF))
   \   00000096   ....                       SBCI    R31,(-(M11) & 0xFFFF) >> 8
   \   00000098   8110                       LD      R17,Z
   \   0000009A   2312                       AND     R17,R18
   \   0000009C   701F                       ANDI    R17,0x0F
    553            EVEN_M11[sel] = tmp;
   \   0000009E   2F20                       MOV     R18,R16
   \   000000A0   E030                       LDI     R19,0
   \   000000A2   01F9                       MOVW    R31 : R30,R19 : R18
   \   000000A4   ....                       SUBI    R30,LOW((-(EVEN_M11) & 0xFFFF))
   \   000000A6   ....                       SBCI    R31,(-(EVEN_M11) & 0xFFFF) >> 8
   \   000000A8   8310                       ST      Z,R17
   \   000000AA   C001                       RJMP    ??Key_Event_11_5
    554            break;
    555            default:
    556            tmp = 0;
   \                     ??Key_Event_11_4:
   \   000000AC   E010                       LDI     R17,0
    557            break;
    558            };
    559           return ( tmp);
   \                     ??Key_Event_11_5:
   \   000000AE   2F01                       MOV     R16,R17
   \   000000B0   9508                       RET
    560            }
    561          /*  END Calculate events KEY 1->1 */
    562          /*--------------------------------*/
    563          
    564          
    565          /*----------------------------*/
    566          /* Interrupt Timer 0 Overflow */
    567          #pragma vector=TIMER0_OVF_vect

   \                                 In segment CODE, align 2, keep-with-next
    568            static __interrupt void Overflow_Timer0(void)
                                           ^
Warning[Pe177]: function "Overflow_Timer0" was declared but never referenced
    569            {
   \   static __nearfunc __interrupt void Overflow_Timer0();
   \                     Overflow_Timer0:
   \   00000000   939A                       ST      -Y,R25
   \   00000002   938A                       ST      -Y,R24
   \   00000004   93FA                       ST      -Y,R31
   \   00000006   93EA                       ST      -Y,R30
   \   00000008   923A                       ST      -Y,R3
   \   0000000A   922A                       ST      -Y,R2
   \   0000000C   921A                       ST      -Y,R1
   \   0000000E   920A                       ST      -Y,R0
   \   00000010   937A                       ST      -Y,R23
   \   00000012   936A                       ST      -Y,R22
   \   00000014   935A                       ST      -Y,R21
   \   00000016   934A                       ST      -Y,R20
   \   00000018   933A                       ST      -Y,R19
   \   0000001A   932A                       ST      -Y,R18
   \   0000001C   931A                       ST      -Y,R17
   \   0000001E   930A                       ST      -Y,R16
   \   00000020   B79F                       IN      R25,0x3F
    570            unsigned char tmp;
    571            unsigned char i;
    572          
    573          #ifdef TEST_KEY_CONTR
    574            /* test pulse time */
    575            DDRA = 0xFF;
   \   00000022   EF0F                       LDI     R16,255
   \   00000024   BB0A                       OUT     0x1A,R16
    576            ClrBit (PORTA,PA0);
   \   00000026   98D8                       CBI     0x1B,0x00
    577          #endif
    578          
    579            switch (A21_y)  // Select for status A2x
   \   00000028   9100....                   LDS     R16,A21_y
   \   0000002C   950A                       DEC     R16
   \   0000002E   F019                       BREQ    ??Overflow_Timer0_0
   \   00000030   950A                       DEC     R16
   \   00000032   F079                       BREQ    ??Overflow_Timer0_1
   \   00000034   C00F                       RJMP    ??Overflow_Timer0_2
    580              {
    581              case 0: // Reset and Init Timer0
    582              break;
    583              case 1: // Transitive process A2x
    584              Cal_Key_Contr();
   \                     ??Overflow_Timer0_0:
   \   00000036   ....                       RCALL   Cal_Key_Contr
    585                if (c_y1 > TRANS_KEY)
   \   00000038   9100....                   LDS     R16,c_y1
   \   0000003C   300B                       CPI     R16,11
   \   0000003E   F018                       BRCS    ??Overflow_Timer0_3
    586                  {
    587                  A21_y = 2;  // change status
   \   00000040   E002                       LDI     R16,2
   \   00000042   9300....                   STS     A21_y,R16
    588                  };
    589              c_y1++;
   \                     ??Overflow_Timer0_3:
   \   00000046   ....                       LDI     R30,LOW(c_y1)
   \   00000048   ....                       LDI     R31,(c_y1) >> 8
   \   0000004A   8100                       LD      R16,Z
   \   0000004C   9503                       INC     R16
   \   0000004E   8300                       ST      Z,R16
   \   00000050   C001                       RJMP    ??Overflow_Timer0_2
    590              break;
    591              case 2:
    592              // Event
    593              Cal_Key_Contr();
   \                     ??Overflow_Timer0_1:
   \   00000052   ....                       RCALL   Cal_Key_Contr
    594              break;
    595              default:
    596              break;
    597              };
    598          
    599            tmp = 0;
   \                     ??Overflow_Timer0_2:
   \   00000054   E000                       LDI     R16,0
    600            for (i=0;i<=3;i++)
   \   00000056   E080                       LDI     R24,0
   \   00000058   C004                       RJMP    ??Overflow_Timer0_4
    601            {
    602            tmp = Key_Event_00(i);
   \                     ??Overflow_Timer0_5:
   \   0000005A   2F08                       MOV     R16,R24
   \   0000005C   ....                       RCALL   Key_Event_00
    603            tmp = tmp | tmp;
   \   0000005E   2B00                       OR      R16,R16
   \   00000060   9583                       INC     R24
   \                     ??Overflow_Timer0_4:
   \   00000062   3084                       CPI     R24,4
   \   00000064   F3D0                       BRCS    ??Overflow_Timer0_5
    604            };
    605            EVEN_M00_SUM = tmp;   // if tmp = 0 then no Events
   \   00000066   9300....                   STS     EVEN_M00_SUM,R16
    606          
    607            tmp = 0;
   \   0000006A   E000                       LDI     R16,0
    608            for (i=0;i<=3;i++)
   \   0000006C   E080                       LDI     R24,0
   \   0000006E   C004                       RJMP    ??Overflow_Timer0_6
    609            {
    610            tmp = Key_Event_01(i);
   \                     ??Overflow_Timer0_7:
   \   00000070   2F08                       MOV     R16,R24
   \   00000072   ....                       RCALL   Key_Event_01
    611            tmp = tmp | tmp;
   \   00000074   2B00                       OR      R16,R16
   \   00000076   9583                       INC     R24
   \                     ??Overflow_Timer0_6:
   \   00000078   3084                       CPI     R24,4
   \   0000007A   F3D0                       BRCS    ??Overflow_Timer0_7
    612            };
    613            EVEN_M01_SUM = tmp;   // if tmp = 0 then no Events
   \   0000007C   9300....                   STS     EVEN_M01_SUM,R16
    614          
    615            tmp = 0;
   \   00000080   E000                       LDI     R16,0
    616            for (i=0;i<=3;i++)
   \   00000082   E080                       LDI     R24,0
   \   00000084   C004                       RJMP    ??Overflow_Timer0_8
    617            {
    618            tmp = Key_Event_10(i);
   \                     ??Overflow_Timer0_9:
   \   00000086   2F08                       MOV     R16,R24
   \   00000088   ....                       RCALL   Key_Event_10
    619            tmp = tmp | tmp;
   \   0000008A   2B00                       OR      R16,R16
   \   0000008C   9583                       INC     R24
   \                     ??Overflow_Timer0_8:
   \   0000008E   3084                       CPI     R24,4
   \   00000090   F3D0                       BRCS    ??Overflow_Timer0_9
    620            };
    621            EVEN_M10_SUM = tmp;   // if tmp = 0 then no Events
   \   00000092   9300....                   STS     EVEN_M10_SUM,R16
    622          
    623            tmp = 0;
   \   00000096   E000                       LDI     R16,0
    624            for (i=0;i<=3;i++)
   \   00000098   E080                       LDI     R24,0
   \   0000009A   C004                       RJMP    ??Overflow_Timer0_10
    625            {
    626            tmp = Key_Event_11(i);
   \                     ??Overflow_Timer0_11:
   \   0000009C   2F08                       MOV     R16,R24
   \   0000009E   ....                       RCALL   Key_Event_11
    627            tmp = tmp | tmp;
   \   000000A0   2B00                       OR      R16,R16
   \   000000A2   9583                       INC     R24
   \                     ??Overflow_Timer0_10:
   \   000000A4   3084                       CPI     R24,4
   \   000000A6   F3D0                       BRCS    ??Overflow_Timer0_11
    628            };
    629            EVEN_M11_SUM = tmp;   // if tmp = 0 then no Events
   \   000000A8   9300....                   STS     EVEN_M11_SUM,R16
    630          
    631          
    632            if (tmp != 0) // test YES Events
    633            {
    634            // DDRA = 0xFF;
    635            // PORTA = ~(PORTA);
    636            };            // end test
    637          
    638          
    639            Wr_Sym_Disp(DISP_POS); // Output Indicator
   \   000000AC   9100....                   LDS     R16,DISP_POS
   \   000000B0   ....                       RCALL   Wr_Sym_Disp
    640          
    641          #ifdef TEST_KEY_CONTR
    642            /* test pulse time */
    643            DDRA = 0xFF;
   \   000000B2   EF0F                       LDI     R16,255
   \   000000B4   BB0A                       OUT     0x1A,R16
    644            SetBit (PORTA,PA0);
   \   000000B6   9AD8                       SBI     0x1B,0x00
    645          #endif
    646            cTest++;
   \   000000B8   ....                       LDI     R30,LOW(cTest)
   \   000000BA   ....                       LDI     R31,(cTest) >> 8
   \   000000BC   8100                       LD      R16,Z
   \   000000BE   9503                       INC     R16
   \   000000C0   8300                       ST      Z,R16
    647            //DDRA = 0xFF;
    648            //ClrBit (PORTA,PA0);
    649            PORTA = ~(cTest);
   \   000000C2   9100....                   LDS     R16,cTest
   \   000000C6   9500                       COM     R16
   \   000000C8   BB0B                       OUT     0x1B,R16
    650            //PORTA = ~( TCNT0 - mTC_0);
    651            //PORTA = ~( (cTest & 0xf0) | (PORTA & 0x0F));
    652            //PORTA = ~(tmp);
    653          
    654            /* Increment counter interrupt Timer 0 */
    655            COUNT_TIME++;
   \   000000CA   ....                       LDI     R30,LOW(COUNT_TIME)
   \   000000CC   ....                       LDI     R31,(COUNT_TIME) >> 8
   \   000000CE   8100                       LD      R16,Z
   \   000000D0   8111                       LDD     R17,Z+1
   \   000000D2   5F0F                       SUBI    R16,255
   \   000000D4   4F1F                       SBCI    R17,255
   \   000000D6   8300                       ST      Z,R16
   \   000000D8   8311                       STD     Z+1,R17
    656          
    657            /* Corect TIME0 */
    658            TCNT0 = mTC_0+TCNT0;
   \   000000DA   9100....                   LDS     R16,mTC_0
   \   000000DE   B712                       IN      R17,0x32
   \   000000E0   0F10                       ADD     R17,R16
   \   000000E2   BF12                       OUT     0x32,R17
    659            }
   \   000000E4   BF9F                       OUT     0x3F,R25
   \   000000E6   9109                       LD      R16,Y+
   \   000000E8   9119                       LD      R17,Y+
   \   000000EA   9129                       LD      R18,Y+
   \   000000EC   9139                       LD      R19,Y+
   \   000000EE   9149                       LD      R20,Y+
   \   000000F0   9159                       LD      R21,Y+
   \   000000F2   9169                       LD      R22,Y+
   \   000000F4   9179                       LD      R23,Y+
   \   000000F6   9009                       LD      R0,Y+
   \   000000F8   9019                       LD      R1,Y+
   \   000000FA   9029                       LD      R2,Y+
   \   000000FC   9039                       LD      R3,Y+
   \   000000FE   91E9                       LD      R30,Y+
   \   00000100   91F9                       LD      R31,Y+
   \   00000102   9189                       LD      R24,Y+
   \   00000104   9199                       LD      R25,Y+
   \   00000106   9518                       RETI
    660          /* END Interrupt Timer 0 Overflow */
    661          /*--------------------------------*/
    662          
    663          /*---------------------------------------*/
    664          /*  Init SPI Inteface for KEY_CONTR A2x  */

   \                                 In segment CODE, align 2, keep-with-next
    665          void Init_SPI ( void)
    666          {
    667           /* Disable Interrupt SPI */
    668           ClrBit (SPCR,SPIE);
   \   __nearfunc void Init_SPI();
   \                     Init_SPI:
   \   00000000   986F                       CBI     0x0D,0x07
    669           ClrBit (SPCR,SPE);
   \   00000002   986E                       CBI     0x0D,0x06
    670          
    671           SetBit (SPCR, MSTR); // Mode Master
   \   00000004   9A6C                       SBI     0x0D,0x04
    672           SetBit (SPCR, CPOL); // Mode SCK 1_0_1
   \   00000006   9A6B                       SBI     0x0D,0x03
    673           SetBit (SPCR, CPHA);
   \   00000008   9A6A                       SBI     0x0D,0x02
    674          
    675           ClrBit (SPSR, SPI2X);// "0"  Fcl/128
   \   0000000A   9870                       CBI     0x0E,0x00
    676           SetBit (SPCR, SPR1); // "1"
   \   0000000C   9A69                       SBI     0x0D,0x01
    677           SetBit (SPCR, SPR0); // "1"
   \   0000000E   9A68                       SBI     0x0D,0x00
    678          
    679           /* Enable Interrupt SPI */
    680           SetBit (SPCR,SPE);
   \   00000010   9A6E                       SBI     0x0D,0x06
    681           SetBit (SPCR,SPIE);
   \   00000012   9A6F                       SBI     0x0D,0x07
    682          }
   \   00000014   9508                       RET
    683          /*  END Init SPI Inteface for KEY_CONTR A2x  */
    684          /*-------------------------------------------*/
    685          
    686          /*---------------*/
    687          /* Interrupt SPI */
    688          #pragma vector=SPI_STC_vect

   \                                 In segment CODE, align 2, keep-with-next
    689            static __interrupt void SPI_STC(void)
                                           ^
Warning[Pe177]: function "SPI_STC" was declared but never referenced
    690            {
   \   static __nearfunc __interrupt void SPI_STC();
   \                     SPI_STC:
   \   00000000   93FA                       ST      -Y,R31
   \   00000002   93EA                       ST      -Y,R30
   \   00000004   931A                       ST      -Y,R17
   \   00000006   930A                       ST      -Y,R16
   \   00000008   B71F                       IN      R17,0x3F
    691            SPDR = 'U';
   \   0000000A   E505                       LDI     R16,85
   \   0000000C   B90F                       OUT     0x0F,R16
    692          
    693             cTest++;
   \   0000000E   ....                       LDI     R30,LOW(cTest)
   \   00000010   ....                       LDI     R31,(cTest) >> 8
   \   00000012   8100                       LD      R16,Z
   \   00000014   9503                       INC     R16
   \   00000016   8300                       ST      Z,R16
    694            //DDRA = 0xFF;
    695            //PORTA = ~(cTest);
    696            }
   \   00000018   BF1F                       OUT     0x3F,R17
   \   0000001A   9109                       LD      R16,Y+
   \   0000001C   9119                       LD      R17,Y+
   \   0000001E   91E9                       LD      R30,Y+
   \   00000020   91F9                       LD      R31,Y+
   \   00000022   9518                       RETI
    697          /* END Interrupt SPI  */
    698          /*--------------------*/
    699          
    700          #ifdef TEST_KEY_CONTR
    701          /* main - a simple test program*/

   \                                 In segment CODE, align 2, keep-with-next
    702          void main( void )
    703                  {
   \   __nearfunc void main();
   \                     main:
   \   00000000   939A                       ST      -Y,R25
   \   00000002   938A                       ST      -Y,R24
   \   00000004   972B                       SBIW    R29 : R28,11
    704                  static volatile unsigned char c_y1;
    705                  volatile long int l_i;
    706                  volatile unsigned char cByte;
    707                  volatile int iByte;
    708                  volatile int iRet;
    709                  volatile unsigned int i;
    710          
    711                  _CLI();  // disable global interrupt
   \   00000006   94F8               cli
    712          
    713          
    714                  /*----------------------------------------*/
    715                  // 1. Init_SPI(); // test init SPI inteface
    716          
    717          
    718                  /*-----------------------*/
    719                  /* 2. Init UART0         */
    720                  Reset_UART0();
   \   00000008   ........                   CALL    Reset_UART0
    721                  Init_S_UART0(57600); // 57600 default
   \   0000000C   E000                       LDI     R16,0
   \   0000000E   EE11                       LDI     R17,225
   \   00000010   ........                   CALL    Init_S_UART0
    722                  Init_2S_UART0(0);
   \   00000014   E000                       LDI     R16,0
   \   00000016   ........                   CALL    Init_2S_UART0
    723                  Init_B_UART0(1);  // Size Bits '8'
   \   0000001A   E001                       LDI     R16,1
   \   0000001C   ........                   CALL    Init_B_UART0
    724                  Init_P_UART0(0);  // Parity    'N'
   \   00000020   E000                       LDI     R16,0
   \   00000022   ........                   CALL    Init_P_UART0
    725                                    // Stop Bit  '1'
    726                  Echo_OFF_UART0(); // Set Echo
   \   00000026   ........                   CALL    Echo_OFF_UART0
    727                  ControlStream_OFF_UART0();     // Flow Control OFF
   \   0000002A   ........                   CALL    ControlStream_OFF_UART0
    728                  XON_XOFF_OFF_CONTR_Rx_UART0(); // Disable Software Control OFF
   \   0000002E   ........                   CALL    XON_XOFF_OFF_CONTR_Rx_UART0
    729                  XON_XOFF_OFF_CONTR_Tx_UART0(); // Disable Tx Control
   \   00000032   ........                   CALL    XON_XOFF_OFF_CONTR_Tx_UART0
    730                  /* Enable control hardware flow all signals */
    731                   DSR_OFF_CONTR_UART0();  // Disable Hardware Flow Control DSR
   \   00000036   ........                   CALL    DSR_OFF_CONTR_UART0
    732                   DTR_OFF_CONTR_UART0();  // Disable Hardware Flow Control DTR
   \   0000003A   ........                   CALL    DTR_OFF_CONTR_UART0
    733                   CTS_OFF_CONTR_UART0();  // Disable Hardware Flow Control CTS
   \   0000003E   ........                   CALL    CTS_OFF_CONTR_UART0
    734                   RTS_OFF_CONTR_UART0();  // Disable Hardware Flow Control RTS
   \   00000042   ........                   CALL    RTS_OFF_CONTR_UART0
    735                   RTS_CLR_UART0();       // RTS0=0 Request to send
   \   00000046   ........                   CALL    RTS_CLR_UART0
    736                   DTR_CLR_UART0();       // DTR0=0 Data Terminal Ready
   \   0000004A   ........                   CALL    DTR_CLR_UART0
    737                   CTS_CLR_UART0();
   \   0000004E   ........                   CALL    CTS_CLR_UART0
    738                   DSR_CLR_UART0();
   \   00000052   ........                   CALL    DSR_CLR_UART0
    739                  /* Enable error counters*/
    740                  Enable_Err_Count_UART0();
   \   00000056   ........                   CALL    Enable_Err_Count_UART0
    741                  i = 0;
   \   0000005A   E000                       LDI     R16,0
   \   0000005C   E010                       LDI     R17,0
   \   0000005E   830A                       STD     Y+2,R16
   \   00000060   831B                       STD     Y+3,R17
    742          
    743                  /*-------------------------*/
    744                  /* 3. Set A2.1 KEY_CONTR   */
    745                  Reset_KEY_CONTR();
   \   00000062   ....                       RCALL   Reset_KEY_CONTR
    746                  c_y1 = 0; // temp variable status A21_y1=1 c_y1 = 0...4
   \   00000064   E000                       LDI     R16,0
   \   00000066   9300....                   STS     ??c_y1,R16
    747                  /* Set A2.2 DISP_CONTR */
    748                  Reset_DISP_CONTR ();
   \   0000006A   ....                       RCALL   Reset_DISP_CONTR
    749                  /* Init Timer0 */
    750                  Init_Timer0();
   \   0000006C   ....                       RCALL   Init_Timer0
    751          
    752                  /*-------------------*/
    753                  /* 4. Begin programm */
    754                  _SEI(); // enable global interrupt
   \   0000006E   9478               sei
    755                  /* Start Timer0 */
    756                  Start_Timer0();
   \   00000070   ....                       RCALL   Start_Timer0
    757                  iRet = printf("Test ver 0.02 for file 'A2x.c' KEY_CONTR \n\r");
   \   00000072   ....                       LDI     R16,LOW(`?<Constant "Test ver 0.02 for fil...">`)
   \   00000074   ....                       LDI     R17,(`?<Constant "Test ver 0.02 for fil...">`) >> 8
   \   00000076   ........                   CALL    printf
   \   0000007A   830C                       STD     Y+4,R16
   \   0000007C   831D                       STD     Y+5,R17
    758                  
    759                  //SPDR = 'U'; // For start and interrupt Transmit On Byte 8 bits
    760          
    761                  i=0;
   \   0000007E   E000                       LDI     R16,0
   \   00000080   E010                       LDI     R17,0
   \   00000082   830A                       STD     Y+2,R16
   \   00000084   831B                       STD     Y+3,R17
   \   00000086   C033                       RJMP    ??main_0
    762          
    763                  while ( 1 ) /* forever */
    764                          {
    765                          /* test new function getchar() and prints stdin */
    766                          /* Reset point for BUFFER BUF_CMD */
    767                          Head_CMD = 0; // point begin
    768                          do 
    769                          { 
    770                            iByte = getchar_K();     // new size buffer 40 yes
    771                            iRet = printf("%c",toupper( (unsigned char) iByte));
    772                            /* Save elements BUF_CMD */
    773                            BUF_CMD[Head_CMD] = (unsigned char) iByte;
    774                            Head_CMD++;
    775                                  if ( Head_CMD > (BUFFER_SIZE_CMD-1) )
    776                                  {
    777                                   Head_CMD--; // end buffer
    778                                  };
    779                            
    780                            if (iByte == 0x0A)  // ^J LF  
    781                            {
    782                            iRet = printf("\r");                  
    783                            };
    784                          }
    785                          while ( iByte != 0x0A);
    786                          /*test print strings */
    787                          for (i=0;i<BUFFER_SIZE_CMD-1;i++)
    788                          {
    789                          iRet = printf("%c",BUF_CMD[i]);
   \                     ??main_1:
   \   00000088   810A                       LDD     R16,Y+2
   \   0000008A   811B                       LDD     R17,Y+3
   \   0000008C   01F8                       MOVW    R31 : R30,R17 : R16
   \   0000008E   ....                       SUBI    R30,LOW((-(BUF_CMD) & 0xFFFF))
   \   00000090   ....                       SBCI    R31,(-(BUF_CMD) & 0xFFFF) >> 8
   \   00000092   8100                       LD      R16,Z
   \   00000094   E010                       LDI     R17,0
   \   00000096   931A                       ST      -Y,R17
   \   00000098   930A                       ST      -Y,R16
   \   0000009A   ....                       LDI     R16,LOW(`?<Constant "%c">`)
   \   0000009C   ....                       LDI     R17,(`?<Constant "%c">`) >> 8
   \   0000009E   ........                   CALL    printf
   \   000000A2   9622                       ADIW    R29 : R28,2
   \   000000A4   830C                       STD     Y+4,R16
   \   000000A6   831D                       STD     Y+5,R17
   \   000000A8   810A                       LDD     R16,Y+2
   \   000000AA   811B                       LDD     R17,Y+3
   \   000000AC   5F0F                       SUBI    R16,255
   \   000000AE   4F1F                       SBCI    R17,255
   \   000000B0   830A                       STD     Y+2,R16
   \   000000B2   831B                       STD     Y+3,R17
   \                     ??main_2:
   \   000000B4   818A                       LDD     R24,Y+2
   \   000000B6   819B                       LDD     R25,Y+3
   \   000000B8   3287                       CPI     R24,39
   \   000000BA   4090                       SBCI    R25,0
   \   000000BC   F328                       BRCS    ??main_1
    790                          };
    791                          
    792                          /*
    793                          cByte = (unsigned char) i;
    794                          iRet = printf("%c",' '); // yes
    795                          iRet = printf("%c",cByte); // yes
    796                          */
    797          
    798                          /* test init variables */
    799                          i++;
   \   000000BE   810A                       LDD     R16,Y+2
   \   000000C0   811B                       LDD     R17,Y+3
   \   000000C2   5F0F                       SUBI    R16,255
   \   000000C4   4F1F                       SBCI    R17,255
   \   000000C6   830A                       STD     Y+2,R16
   \   000000C8   831B                       STD     Y+3,R17
    800                          cByte = 'a';
   \   000000CA   E601                       LDI     R16,97
   \   000000CC   830E                       STD     Y+6,R16
    801                          iByte = 0;
   \   000000CE   E000                       LDI     R16,0
   \   000000D0   E010                       LDI     R17,0
   \   000000D2   8308                       ST      Y,R16
   \   000000D4   8319                       STD     Y+1,R17
    802                          iRet = 0;
   \   000000D6   E000                       LDI     R16,0
   \   000000D8   E010                       LDI     R17,0
   \   000000DA   830C                       STD     Y+4,R16
   \   000000DC   831D                       STD     Y+5,R17
    803                          l_i = 0;
   \   000000DE   E000                       LDI     R16,0
   \   000000E0   E010                       LDI     R17,0
   \   000000E2   E020                       LDI     R18,0
   \   000000E4   E030                       LDI     R19,0
   \   000000E6   830F                       STD     Y+7,R16
   \   000000E8   8718                       STD     Y+8,R17
   \   000000EA   8729                       STD     Y+9,R18
   \   000000EC   873A                       STD     Y+10,R19
   \                     ??main_0:
   \   000000EE   E000                       LDI     R16,0
   \   000000F0   9300....                   STS     Head_CMD,R16
   \                     ??main_3:
   \   000000F4   ........                   CALL    getchar_K
   \   000000F8   8308                       ST      Y,R16
   \   000000FA   8319                       STD     Y+1,R17
   \   000000FC   ....                       LDI     R16,LOW((_Small_Ctype + 1))
   \   000000FE   ....                       LDI     R17,(_Small_Ctype + 1) >> 8
   \   00000100   8128                       LD      R18,Y
   \   00000102   8139                       LDD     R19,Y+1
   \   00000104   2FE2                       MOV     R30,R18
   \   00000106   E0F0                       LDI     R31,0
   \   00000108   0FE0                       ADD     R30,R16
   \   0000010A   1FF1                       ADC     R31,R17
   \   0000010C   9104                       LPM     R16,Z
   \   0000010E   7002                       ANDI    R16,0x02
   \   00000110   2300                       TST     R16
   \   00000112   F031                       BREQ    ??main_4
   \   00000114   8108                       LD      R16,Y
   \   00000116   8119                       LDD     R17,Y+1
   \   00000118   E010                       LDI     R17,0
   \   0000011A   750F                       ANDI    R16,0x5F
   \   0000011C   7010                       ANDI    R17,0x00
   \   0000011E   C003                       RJMP    ??main_5
   \                     ??main_4:
   \   00000120   8108                       LD      R16,Y
   \   00000122   8119                       LDD     R17,Y+1
   \   00000124   E010                       LDI     R17,0
   \                     ??main_5:
   \   00000126   931A                       ST      -Y,R17
   \   00000128   930A                       ST      -Y,R16
   \   0000012A   ....                       LDI     R16,LOW(`?<Constant "%c">`)
   \   0000012C   ....                       LDI     R17,(`?<Constant "%c">`) >> 8
   \   0000012E   ........                   CALL    printf
   \   00000132   9622                       ADIW    R29 : R28,2
   \   00000134   830C                       STD     Y+4,R16
   \   00000136   831D                       STD     Y+5,R17
   \   00000138   8108                       LD      R16,Y
   \   0000013A   8119                       LDD     R17,Y+1
   \   0000013C   9120....                   LDS     R18,Head_CMD
   \   00000140   E030                       LDI     R19,0
   \   00000142   01F9                       MOVW    R31 : R30,R19 : R18
   \   00000144   ....                       SUBI    R30,LOW((-(BUF_CMD) & 0xFFFF))
   \   00000146   ....                       SBCI    R31,(-(BUF_CMD) & 0xFFFF) >> 8
   \   00000148   8300                       ST      Z,R16
   \   0000014A   ....                       LDI     R30,LOW(Head_CMD)
   \   0000014C   ....                       LDI     R31,(Head_CMD) >> 8
   \   0000014E   8100                       LD      R16,Z
   \   00000150   9503                       INC     R16
   \   00000152   8300                       ST      Z,R16
   \   00000154   9100....                   LDS     R16,Head_CMD
   \   00000158   3208                       CPI     R16,40
   \   0000015A   F028                       BRCS    ??main_6
   \   0000015C   ....                       LDI     R30,LOW(Head_CMD)
   \   0000015E   ....                       LDI     R31,(Head_CMD) >> 8
   \   00000160   8100                       LD      R16,Z
   \   00000162   950A                       DEC     R16
   \   00000164   8300                       ST      Z,R16
   \                     ??main_6:
   \   00000166   8108                       LD      R16,Y
   \   00000168   8119                       LDD     R17,Y+1
   \   0000016A   300A                       CPI     R16,10
   \   0000016C   E000                       LDI     R16,0
   \   0000016E   0710                       CPC     R17,R16
   \   00000170   F431                       BRNE    ??main_7
   \   00000172   ....                       LDI     R16,LOW(`?<Constant "\\r">`)
   \   00000174   ....                       LDI     R17,(`?<Constant "\\r">`) >> 8
   \   00000176   ........                   CALL    printf
   \   0000017A   830C                       STD     Y+4,R16
   \   0000017C   831D                       STD     Y+5,R17
   \                     ??main_7:
   \   0000017E   8108                       LD      R16,Y
   \   00000180   8119                       LDD     R17,Y+1
   \   00000182   300A                       CPI     R16,10
   \   00000184   E000                       LDI     R16,0
   \   00000186   0710                       CPC     R17,R16
   \   00000188   F009                       BREQ    ??main_8
   \   0000018A   CFB4                       RJMP    ??main_3
   \                     ??main_8:
   \   0000018C   E000                       LDI     R16,0
   \   0000018E   E010                       LDI     R17,0
   \   00000190   830A                       STD     Y+2,R16
   \   00000192   831B                       STD     Y+3,R17
   \   00000194   CF8F                       RJMP    ??main_2
    804                          };
    805                  }

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   unsigned char volatile __near c_y1;
   \                     ??c_y1:
   \   00000000                              DS 1

   \                                 In segment INTVEC, offset 0x2c, root
   \   00000000   ........                   JMP     Overflow_Timer0

   \                                 In segment INTVEC, offset 0x30, root
   \   00000000   ........                   JMP     SPI_STC

   \                                 In segment NEAR_I, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_I>`
   \   char __near <Constant "\r">[2];
   \                     `?<Constant "\\r">`:
   \   00000000                              DS 2
   \   00000002                              REQUIRE `?<Initializer for <Constant "\\r">>`

   \                                 In segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "\\r">>`:
   \   00000000   000D                       DB "\015"

   \                                 In segment NEAR_I, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_I>`
   \   char __near <Constant "%c">[3];
   \                     `?<Constant "%c">`:
   \   00000000                              DS 3
   \   00000003                              REQUIRE `?<Initializer for <Constant "%c">>`

   \                                 In segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "%c">>`:
   \   00000000   632500                     DB "%c"

   \                                 In segment NEAR_I, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_I>`
   \   char __near <Constant "Test ver 0.02 for fil...">[44];
   \                     `?<Constant "Test ver 0.02 for fil...">`:
   \   00000000                              DS 44
   \   0000002C                              REQUIRE `?<Initializer for <Constant "Test ver 0.02 for`

   \                                 In segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "Test ver 0.02 for`:
   \   00000000   655474737620               DB "Test ver 0.02 for file 'A2x.c' KEY_CONTR \012\015"
   \            72653020302E
   \            20326F662072
   \            6966656C2720
   \            32412E782763
   \            4B205945435F
   \            4E4F52540A20
   \            000D        
    806          #endif

   Maximum stack usage in bytes:

     Function                        CSTACK  RSTACK
     --------                        ------  ------
     Cal_Key_Contr                       1       2 
     Init_SPI                            0       0 
     Init_Timer0                         0       2 
       -> Stop_Timer0                    0       2 
     Key_Event_00                        0       0 
     Key_Event_01                        0       0 
     Key_Event_10                        0       0 
     Key_Event_11                        0       0 
     Overflow_Timer0                    16       2 
       -> Cal_Key_Contr                 16       2 
       -> Cal_Key_Contr                 16       2 
       -> Key_Event_00                  16       2 
       -> Key_Event_01                  16       2 
       -> Key_Event_10                  16       2 
       -> Key_Event_11                  16       2 
       -> Wr_Sym_Disp                   16       2 
     Reset_DISP_CONTR                    3       0 
     Reset_KEY_CONTR                     3       0 
     SPI_STC                             4       0 
     Start_Timer0                        0       0 
     Stop_Timer0                         0       0 
     Wr_Sym_Disp                         1       2 
     main                               15       2 
       -> Reset_UART0                   13       2 
       -> Init_S_UART0                  13       2 
       -> Init_2S_UART0                 13       2 
       -> Init_B_UART0                  13       2 
       -> Init_P_UART0                  13       2 
       -> Echo_OFF_UART0                13       2 
       -> ControlStream_OFF_UART0       13       2 
       -> XON_XOFF_OFF_CONTR_Rx_UART0
                                        13       2 
       -> XON_XOFF_OFF_CONTR_Tx_UART0
                                        13       2 
       -> DSR_OFF_CONTR_UART0           13       2 
       -> DTR_OFF_CONTR_UART0           13       2 
       -> CTS_OFF_CONTR_UART0           13       2 
       -> RTS_OFF_CONTR_UART0           13       2 
       -> RTS_CLR_UART0                 13       2 
       -> DTR_CLR_UART0                 13       2 
       -> CTS_CLR_UART0                 13       2 
       -> DSR_CLR_UART0                 13       2 
       -> Enable_Err_Count_UART0        13       2 
       -> Reset_KEY_CONTR               13       2 
       -> Reset_DISP_CONTR              13       2 
       -> Init_Timer0                   13       2 
       -> Start_Timer0                  13       2 
       -> printf                        13       2 
       -> printf                        15       2 
       -> getchar_K                     13       2 
       -> printf                        15       2 
       -> printf                        13       2 

 
     14 bytes in segment ABSOLUTE
   3834 bytes in segment CODE
     12 bytes in segment INITTAB
      8 bytes in segment INTVEC
    128 bytes in segment NEAR_F
     49 bytes in segment NEAR_I
     49 bytes in segment NEAR_ID
    194 bytes in segment NEAR_Z
 
   4019 bytes of CODE memory (+ 12 bytes shared)
    243 bytes of DATA memory (+ 14 bytes shared)

Errors: none
Warnings: 2
