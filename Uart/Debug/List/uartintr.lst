##############################################################################
#                                                                            #
# IAR Atmel AVR C/EC++ Compiler V2.26N/WIN             24/Aug/2002  13:52:58 #
# Copyright 1996-2001 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Source file  =  C:\AVR_CC\UART_MOD\uartintr.c                           #
#    Command line =  --cpu=m161 -ms -o C:\AVR_CC\UART_MOD\Debug\Obj\ -I      #
#                    C:\AVR_CC\AVR\SRC\CLIB\INC\ -lCN                        #
#                    C:\AVR_CC\UART_MOD\Debug\List\ -lA                      #
#                    C:\AVR_CC\UART_MOD\Debug\List\ -e -y                    #
#                    --initializers_in_flash -z3 --no_cse --no_inline        #
#                    --no_code_motion --no_cross_call --no_clustering        #
#                    --debug -DENABLE_BIT_DEFINITIONS                        #
#                    C:\AVR_CC\UART_MOD\uartintr.c                           #
#    List file    =  C:\AVR_CC\UART_MOD\Debug\List\uartintr.lst              #
#    Object file  =  C:\AVR_CC\UART_MOD\Debug\Obj\uartintr.r90               #
#                                                                            #
#                                                                            #
##############################################################################

      1          /* Code adapted from Atmel AVR Application Note AVR306
      2           * Interrupt mode driver for UART.
      3           */
      4          
      5          #include "iom161.h"

   \                                 In segment ABSOLUTE, at 0x29
   \   union <unnamed> volatile __io _A_UBRR0;
   \                     _A_UBRR0:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x2a
   \   union <unnamed> volatile __io _A_UCSR0B;
   \                     _A_UCSR0B:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x2c
   \   union <unnamed> volatile __io _A_UDR0;
   \                     _A_UDR0:
   \   00000000                              DS 1
      6          #include "macros.h"
      7          #include "uart.h"
      8          #include <stdio.h>
      9          //#include "iostream.h"
     10          //#include "yfuns.h"
     11          //#undef __putchar
     12          //#undef __getchar
     13          
     14          
     15          /* IMPORTANT: these vector numbers are for 8515! If you use other devices
     16           * you must change them to the different set of numbers.
     17           *
     18           * UART_RX_interrupt set to UART, Rx Complete
     19           * UART_TX_interrupt set to UART Data Register Empty
     20           */
     21          
     22          /* Debug test module */
     23          #define TEST  
     24          
     25          /* UART0 Buffer Defines */
     26          #define UART0_RX_BUFFER_SIZE 128 /* 1,2,4,8,16,32,64,128 or 256 bytes */
     27          #define UART0_RX_BUFFER_MASK ( UART0_RX_BUFFER_SIZE - 1 )
     28          #define UART0_TX_BUFFER_SIZE 128 /* 1,2,4,8,16,32,64,128 or 256 bytes */
     29          #define UART0_TX_BUFFER_MASK ( UART0_TX_BUFFER_SIZE - 1 )
     30          
     31          //#if ( UART0_RX_BUFFER_SIZE & UART0_RX_BUFFER_MASK )
     32          //#error RX buffer size is not a power of 2
     33          //#endif
     34          
     35          /* Static Variables */

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
     36          static unsigned char UART0_RxBuf[UART0_RX_BUFFER_SIZE];
   \   static unsigned char __near UART0_RxBuf[128];
   \                     UART0_RxBuf:
   \   00000000                              DS 128

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
     37          static volatile unsigned char UART0_RxHead;
   \   static unsigned char volatile __near UART0_RxHead;
   \                     UART0_RxHead:
   \   00000000                              DS 1

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
     38          static volatile unsigned char UART0_RxTail;
   \   static unsigned char volatile __near UART0_RxTail;
   \                     UART0_RxTail:
   \   00000000                              DS 1

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
     39          static unsigned char UART0_TxBuf[UART0_TX_BUFFER_SIZE];
   \   static unsigned char __near UART0_TxBuf[128];
   \                     UART0_TxBuf:
   \   00000000                              DS 128

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
     40          static volatile unsigned char UART0_TxHead;
   \   static unsigned char volatile __near UART0_TxHead;
   \                     UART0_TxHead:
   \   00000000                              DS 1

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
     41          static volatile unsigned char UART0_TxTail;
   \   static unsigned char volatile __near UART0_TxTail;
   \                     UART0_TxTail:
   \   00000000                              DS 1
     42          // New putchar
     43          //static volatile __io unsigned char _PORTA @ 0x1B ;
     44          //static volatile __io unsigned char _DDRA  @ 0x1A;
     45          //static volatile __io unsigned char _PINA  @ 0x19;   
     46          
     47          
     48          /* initialize UART */

   \                                 In segment CODE, align 2, keep-with-next
     49          void InitUART0( unsigned char baudrate )
     50          	{
     51          	unsigned char x;
     52          	UBRR0 = baudrate; /* set the baud rate */
   \   __nearfunc void InitUART0(unsigned char);
   \                     InitUART0:
   \   00000000   B909                       OUT     0x09,R16
     53          	/* enable UART receiver and transmitter, and
     54          	receive interrupt */
     55          	UCSR0B = ( (1<<RXCIE0) | (1<<RXEN0) | (1<<TXEN0) );
   \   00000002   E908                       LDI     R16,152
   \   00000004   B90A                       OUT     0x0A,R16
     56          	x = 0; /* flush receive buffer */
   \   00000006   E000                       LDI     R16,0
     57          	UART0_RxTail = x;
   \   00000008   9300....                   STS     UART0_RxTail,R16
     58          	UART0_RxHead = x;
   \   0000000C   9300....                   STS     UART0_RxHead,R16
     59          	UART0_TxTail = x;
   \   00000010   9300....                   STS     UART0_TxTail,R16
     60          	UART0_TxHead = x;
   \   00000014   9300....                   STS     UART0_TxHead,R16
     61          	}
   \   00000018   9508                       RET
     62          
     63          
     64          #pragma vector=UART0_RX_vect

   \                                 In segment CODE, align 2, keep-with-next
     65          static __interrupt void UART0_RX(void)
     66          {
   \   static __nearfunc __interrupt void UART0_RX();
   \                     UART0_RX:
   \   00000000   938A                       ST      -Y,R24
   \   00000002   93FA                       ST      -Y,R31
   \   00000004   93EA                       ST      -Y,R30
   \   00000006   923A                       ST      -Y,R3
   \   00000008   922A                       ST      -Y,R2
   \   0000000A   921A                       ST      -Y,R1
   \   0000000C   920A                       ST      -Y,R0
   \   0000000E   937A                       ST      -Y,R23
   \   00000010   936A                       ST      -Y,R22
   \   00000012   935A                       ST      -Y,R21
   \   00000014   934A                       ST      -Y,R20
   \   00000016   933A                       ST      -Y,R19
   \   00000018   932A                       ST      -Y,R18
   \   0000001A   931A                       ST      -Y,R17
   \   0000001C   930A                       ST      -Y,R16
   \   0000001E   B78F                       IN      R24,0x3F
     67                
     68                  unsigned char data;
     69          	unsigned char tmphead;
     70           // !! Add store register SREG to STEK	
     71                  asm (" PUSH R0 \n");
   \   00000020   920F                PUSH R0 
     72          	data = UDR0; /* read the received data */
   \   00000022   B11C                       IN      R17,0x0C
     73          	/* calculate buffer index */
     74          	tmphead = ( UART0_RxHead + 1 ) & UART0_RX_BUFFER_MASK;
   \   00000024   9100....                   LDS     R16,UART0_RxHead
   \   00000028   9503                       INC     R16
   \   0000002A   770F                       ANDI    R16,0x7F
     75          	UART0_RxHead = tmphead; /* store new index */
   \   0000002C   9300....                   STS     UART0_RxHead,R16
     76          	if ( tmphead == UART0_RxTail )
   \   00000030   9120....                   LDS     R18,UART0_RxTail
     77          		{
     78          		/* ERROR! Receive buffer overflow */
     79          		}
     80          	UART0_RxBuf[tmphead] = data; /* store received data in buffer */
   \   00000034   2F40                       MOV     R20,R16
   \   00000036   E050                       LDI     R21,0
   \   00000038   01FA                       MOVW    R31 : R30,R21 : R20
   \   0000003A   ....                       SUBI    R30,LOW((-(UART0_RxBuf) & 0xFFFF))
   \   0000003C   ....                       SBCI    R31,(-(UART0_RxBuf) & 0xFFFF) >> 8
   \   0000003E   8310                       ST      Z,R17
     81           // !! Add restore register SREG from STEK
     82                  asm (" POP R0 \n");
   \   00000040   900F                POP R0 
     83          }
   \   00000042   BF8F                       OUT     0x3F,R24
   \   00000044   9109                       LD      R16,Y+
   \   00000046   9119                       LD      R17,Y+
   \   00000048   9129                       LD      R18,Y+
   \   0000004A   9139                       LD      R19,Y+
   \   0000004C   9149                       LD      R20,Y+
   \   0000004E   9159                       LD      R21,Y+
   \   00000050   9169                       LD      R22,Y+
   \   00000052   9179                       LD      R23,Y+
   \   00000054   9009                       LD      R0,Y+
   \   00000056   9019                       LD      R1,Y+
   \   00000058   9029                       LD      R2,Y+
   \   0000005A   9039                       LD      R3,Y+
   \   0000005C   91E9                       LD      R30,Y+
   \   0000005E   91F9                       LD      R31,Y+
   \   00000060   9189                       LD      R24,Y+
   \   00000062   9518                       RETI
     84          
     85          /* interrupt handlers */
     86          
     87          
     88          #pragma vector=UART0_UDRE_vect

   \                                 In segment CODE, align 2, keep-with-next
     89          static __interrupt void UART0_UDRE(void)
     90          {
   \   static __nearfunc __interrupt void UART0_UDRE();
   \                     UART0_UDRE:
   \   00000000   938A                       ST      -Y,R24
   \   00000002   93FA                       ST      -Y,R31
   \   00000004   93EA                       ST      -Y,R30
   \   00000006   923A                       ST      -Y,R3
   \   00000008   922A                       ST      -Y,R2
   \   0000000A   921A                       ST      -Y,R1
   \   0000000C   920A                       ST      -Y,R0
   \   0000000E   937A                       ST      -Y,R23
   \   00000010   936A                       ST      -Y,R22
   \   00000012   935A                       ST      -Y,R21
   \   00000014   934A                       ST      -Y,R20
   \   00000016   933A                       ST      -Y,R19
   \   00000018   932A                       ST      -Y,R18
   \   0000001A   931A                       ST      -Y,R17
   \   0000001C   930A                       ST      -Y,R16
   \   0000001E   B78F                       IN      R24,0x3F
     91          	unsigned char tmptail;
     92          
     93                  asm (" PUSH R0 \n");
   \   00000020   920F                PUSH R0 
     94          
     95          	/* check if all data is transmitted */
     96          	if ( UART0_TxHead != UART0_TxTail )
   \   00000022   9100....                   LDS     R16,UART0_TxHead
   \   00000026   9110....                   LDS     R17,UART0_TxTail
   \   0000002A   1701                       CP      R16,R17
   \   0000002C   F069                       BREQ    ??UART0_UDRE_0
     97          		{
     98          		/* calculate buffer index */
     99          		tmptail = ( UART0_TxTail + 1 ) & UART0_TX_BUFFER_MASK;
   \   0000002E   9100....                   LDS     R16,UART0_TxTail
   \   00000032   9503                       INC     R16
   \   00000034   770F                       ANDI    R16,0x7F
    100          		UART0_TxTail = tmptail; /* store new index */
   \   00000036   9300....                   STS     UART0_TxTail,R16
    101          		//PORTA = ~UART0_TxBuf[tmptail]; /* test */
    102          		UDR0 = UART0_TxBuf[tmptail]; /* start transmition */
   \   0000003A   E010                       LDI     R17,0
   \   0000003C   01F8                       MOVW    R31 : R30,R17 : R16
   \   0000003E   ....                       SUBI    R30,LOW((-(UART0_TxBuf) & 0xFFFF))
   \   00000040   ....                       SBCI    R31,(-(UART0_TxBuf) & 0xFFFF) >> 8
   \   00000042   8100                       LD      R16,Z
   \   00000044   B90C                       OUT     0x0C,R16
   \   00000046   C001                       RJMP    ??UART0_UDRE_1
    103          		}
    104          	else
    105          		{
    106          		UCSR0B &= ~(1<<UDRIE0); /* disable UDRE interrupt */
   \                     ??UART0_UDRE_0:
   \   00000048   9855                       CBI     0x0A,0x05
    107          		};
    108                  asm (" POP R0 \n");		
   \                     ??UART0_UDRE_1:
   \   0000004A   900F                POP R0 
    109          	}
   \   0000004C   BF8F                       OUT     0x3F,R24
   \   0000004E   9109                       LD      R16,Y+
   \   00000050   9119                       LD      R17,Y+
   \   00000052   9129                       LD      R18,Y+
   \   00000054   9139                       LD      R19,Y+
   \   00000056   9149                       LD      R20,Y+
   \   00000058   9159                       LD      R21,Y+
   \   0000005A   9169                       LD      R22,Y+
   \   0000005C   9179                       LD      R23,Y+
   \   0000005E   9009                       LD      R0,Y+
   \   00000060   9019                       LD      R1,Y+
   \   00000062   9029                       LD      R2,Y+
   \   00000064   9039                       LD      R3,Y+
   \   00000066   91E9                       LD      R30,Y+
   \   00000068   91F9                       LD      R31,Y+
   \   0000006A   9189                       LD      R24,Y+
   \   0000006C   9518                       RETI
    110          
    111          /* Read and write functions */

   \                                 In segment CODE, align 2, keep-with-next
    112          unsigned char ReceiveByte( void )
    113          	{
    114          	unsigned char tmptail;
    115          
    116          	while ( UART0_RxHead == UART0_RxTail ) /* wait for incomming data */
   \   __nearfunc unsigned char ReceiveByte();
   \                     ReceiveByte:
   \                     ??ReceiveByte_0:
   \   00000000   9100....                   LDS     R16,UART0_RxHead
   \   00000004   9110....                   LDS     R17,UART0_RxTail
   \   00000008   1701                       CP      R16,R17
   \   0000000A   F3D1                       BREQ    ??ReceiveByte_0
    117          		;
    118          	tmptail = ( UART0_RxTail + 1 ) & UART0_RX_BUFFER_MASK;/* calculate buffer index */
   \   0000000C   9100....                   LDS     R16,UART0_RxTail
   \   00000010   9503                       INC     R16
   \   00000012   770F                       ANDI    R16,0x7F
    119          	UART0_RxTail = tmptail; /* store new index */
   \   00000014   9300....                   STS     UART0_RxTail,R16
    120          	return UART0_RxBuf[tmptail]; /* return data */
   \   00000018   E010                       LDI     R17,0
   \   0000001A   01F8                       MOVW    R31 : R30,R17 : R16
   \   0000001C   ....                       SUBI    R30,LOW((-(UART0_RxBuf) & 0xFFFF))
   \   0000001E   ....                       SBCI    R31,(-(UART0_RxBuf) & 0xFFFF) >> 8
   \   00000020   8100                       LD      R16,Z
   \   00000022   9508                       RET
    121          	}
    122          

   \                                 In segment CODE, align 2, keep-with-next
    123          void TransmitByte( unsigned char data )
    124          	{
    125          	unsigned char tmphead;
    126          	/* calculate buffer index */
    127          	tmphead = ( UART0_TxHead + 1 ) & UART0_TX_BUFFER_MASK; 
   \   __nearfunc void TransmitByte(unsigned char);
   \                     TransmitByte:
   \   00000000   9120....                   LDS     R18,UART0_TxHead
   \   00000004   9523                       INC     R18
   \   00000006   772F                       ANDI    R18,0x7F
    128          		/* wait for free space in buffer */
    129          
    130          	while ( tmphead == UART0_TxTail )
   \                     ??TransmitByte_0:
   \   00000008   9110....                   LDS     R17,UART0_TxTail
   \   0000000C   1721                       CP      R18,R17
   \   0000000E   F3E1                       BREQ    ??TransmitByte_0
    131          		;
    132          	UART0_TxBuf[tmphead] = data; /* store data in buffer */
   \   00000010   E030                       LDI     R19,0
   \   00000012   01F9                       MOVW    R31 : R30,R19 : R18
   \   00000014   ....                       SUBI    R30,LOW((-(UART0_TxBuf) & 0xFFFF))
   \   00000016   ....                       SBCI    R31,(-(UART0_TxBuf) & 0xFFFF) >> 8
   \   00000018   8300                       ST      Z,R16
    133          	UART0_TxHead = tmphead; /* store new index */
   \   0000001A   9320....                   STS     UART0_TxHead,R18
    134          	UCSR0B |= (1<<UDRIE0); /* enable UDRE interrupt */
   \   0000001E   9A55                       SBI     0x0A,0x05
    135          	}
   \   00000020   9508                       RET
    136          

   \                                 In segment CODE, align 2, keep-with-next
    137          unsigned char DataInReceiveBuffer( void )
    138          	{
    139          	return ( UART0_RxHead != UART0_RxTail ); 
   \   __nearfunc unsigned char DataInReceiveBuffer();
   \                     DataInReceiveBuffer:
   \   00000000   9100....                   LDS     R16,UART0_RxHead
   \   00000004   9110....                   LDS     R17,UART0_RxTail
   \   00000008   1701                       CP      R16,R17
   \   0000000A   F011                       BREQ    ??DataInReceiveBuffer_0
   \   0000000C   E001                       LDI     R16,1
   \   0000000E   9508                       RET
   \                     ??DataInReceiveBuffer_0:
   \   00000010   E000                       LDI     R16,0
   \   00000012   9508                       RET
    140          		/* return 0 (FALSE) if the receive buffer is empty */
    141          	}
    142          
    143          
    144          
    145          #ifdef TEST
    146          /* main - a simple test program*/

   \                                 In segment CODE, align 2, keep-with-next
    147          void main( void )
    148          	{
   \   __nearfunc void main();
   \                     main:
   \   00000000   93BA                       ST      -Y,R27
   \   00000002   93AA                       ST      -Y,R26
   \   00000004   9723                       SBIW    R29 : R28,3
    149          
    150          	volatile unsigned char cByte;
    151          	volatile int iByte=1;
   \   00000006   E001                       LDI     R16,1
   \   00000008   E010                       LDI     R17,0
   \   0000000A   8309                       STD     Y+1,R16
   \   0000000C   831A                       STD     Y+2,R17
    152          	volatile int iRet;
    153          	volatile unsigned char * msg=" ";
   \   0000000E   ....                       LDI     R26,LOW(`?<Constant " ">`)
   \   00000010   ....                       LDI     R27,(`?<Constant " ">`) >> 8
    154          	InitUART0( 23 ); /* set the baudrate to 9600 bps using a 3,6864 MHz crystal */
   \   00000012   E107                       LDI     R16,23
   \   00000014   ....                       RCALL   InitUART0
    155          	_SEI(); /* enable interrupts => enable UART interrupts */
   \   00000016   9478               sei
    156          	while ( 1 ) /* forever */
    157          		{
    158          
    159          		//TestBuf.sputc( ) ;
    160          		//iRet =  fputc(cByte,stdout) ;
    161          		// !! Yes iRet =  putchar(cByte);
    162                          cByte = ReceiveByte();
   \                     ??main_0:
   \   00000018   ....                       RCALL   ReceiveByte
   \   0000001A   8308                       ST      Y,R16
    163                          *msg = cByte;
   \   0000001C   8108                       LD      R16,Y
   \   0000001E   930C                       ST      X,R16
    164                          iByte = (int) cByte;
   \   00000020   8108                       LD      R16,Y
   \   00000022   E010                       LDI     R17,0
   \   00000024   8309                       STD     Y+1,R16
   \   00000026   831A                       STD     Y+2,R17
    165          		TransmitByte(cByte); /* echo the received character */
   \   00000028   8108                       LD      R16,Y
   \   0000002A   ....                       RCALL   TransmitByte
    166          		//iRet = puts("Test puts\n");		
    167                          //putchar((int)cByte);
    168          		iRet = printf("%c", cByte);
   \   0000002C   8108                       LD      R16,Y
   \   0000002E   E010                       LDI     R17,0
   \   00000030   931A                       ST      -Y,R17
   \   00000032   930A                       ST      -Y,R16
   \   00000034   ....                       LDI     R16,LOW(`?<Constant "%c">`)
   \   00000036   ....                       LDI     R17,(`?<Constant "%c">`) >> 8
   \   00000038   ........                   CALL    printf
   \   0000003C   9622                       ADIW    R29 : R28,2
   \   0000003E   8309                       STD     Y+1,R16
   \   00000040   831A                       STD     Y+2,R17
   \   00000042   CFEA                       RJMP    ??main_0
    169          		//iRet = printf("Hello");
    170                          // Yes !! Test
    171                          //iByte =  __getchar();
    172                          //iRet  =  __putchar(iByte);
    173          		//iRet = (int)&cout;
    174          		//iRet = (int)&cin ;
    175                          //cout << "Start test stream standart" << cin;
    176                     }
    177          	}

   \                                 In segment INTVEC, offset 0x34, root
   \   00000000   ........                   JMP     UART0_RX

   \                                 In segment INTVEC, offset 0x3c, root
   \   00000000   ........                   JMP     UART0_UDRE

   \                                 In segment NEAR_I, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_I>`
   \   char __near <Constant " ">[2];
   \                     `?<Constant " ">`:
   \   00000000                              DS 2
   \   00000002                              REQUIRE `?<Initializer for <Constant " ">>`

   \                                 In segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant " ">>`:
   \   00000000   0020                       DB " "

   \                                 In segment NEAR_I, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_I>`
   \   char __near <Constant "%c">[3];
   \                     `?<Constant "%c">`:
   \   00000000                              DS 3
   \   00000003                              REQUIRE `?<Initializer for <Constant "%c">>`

   \                                 In segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "%c">>`:
   \   00000000   632500                     DB "%c"
    178          #endif

   Maximum stack usage in bytes:

     Function             CSTACK  RSTACK
     --------             ------  ------
     DataInReceiveBuffer      0       0 
     InitUART0                0       0 
     ReceiveByte              0       0 
     TransmitByte             0       0 
     UART0_RX                 8       0 
     UART0_UDRE               5       0 
     main                     7       2 
       -> InitUART0           5       2 
       -> ReceiveByte         5       2 
       -> TransmitByte        5       2 
       -> printf              7       2 

 
      3 bytes in segment ABSOLUTE
    394 bytes in segment CODE
     12 bytes in segment INITTAB
      8 bytes in segment INTVEC
      5 bytes in segment NEAR_I
      5 bytes in segment NEAR_ID
    260 bytes in segment NEAR_Z
 
    407 bytes of CODE memory (+ 12 bytes shared)
    265 bytes of DATA memory (+ 3 bytes shared)

Errors: none
Warnings: 2
