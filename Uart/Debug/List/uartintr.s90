        NAME uartintr

        RTMODEL "__64bit_doubles", "disabled"
        RTMODEL "__cpu", "3"
        RTMODEL "__cpu_name", "AT90Mega161"
        RTMODEL "__enhanced_core", "enabled"
        RTMODEL "__has_elpm", "false"
        RTMODEL "__memory_model", "2"
        RTMODEL "__rt_version", "2.30"

        RSEG CSTACK:DATA:NOROOT(0)
        RSEG NEAR_I:DATA:NOROOT(0)
        RSEG NEAR_ID:CODE:NOROOT(0)
        RSEG NEAR_Z:DATA:NOROOT(0)
        RSEG RSTACK:DATA:NOROOT(0)

        EXTERN ?need_segment_init
        EXTERN printf
        FUNCTION printf,0202H

        PUBWEAK `?<Segment init: NEAR_I>`
        PUBWEAK `?<Segment init: NEAR_Z>`
        PUBLIC DataInReceiveBuffer
        FUNCTION DataInReceiveBuffer,0203H
        PUBLIC InitUART0
        FUNCTION InitUART0,0203H
        PUBLIC ReceiveByte
        FUNCTION ReceiveByte,0203H
        PUBLIC TransmitByte
        FUNCTION TransmitByte,0203H
        FUNCTION UART0_RX,080233H
        LOCFRAME CSTACK, 8, STACK
        FUNCTION UART0_UDRE,080233H
        LOCFRAME CSTACK, 5, STACK
        PUBWEAK _A_UBRR0
        PUBWEAK _A_UCSR0B
        PUBWEAK _A_UDR0
        PUBLIC main
        FUNCTION main,0a1a03H
        LOCFRAME CSTACK, 7, STACK
        LOCFRAME RSTACK, 2, STACK
;     1 /* Code adapted from Atmel AVR Application Note AVR306
;     2  * Interrupt mode driver for UART.
;     3  */
;     4 
;     5 #include "iom161.h"

        ASEGN ABSOLUTE:DATA:NOROOT,029H
; union <unnamed> volatile __io _A_UBRR0;
_A_UBRR0:
	DS 1

        ASEGN ABSOLUTE:DATA:NOROOT,02aH
; union <unnamed> volatile __io _A_UCSR0B;
_A_UCSR0B:
	DS 1

        ASEGN ABSOLUTE:DATA:NOROOT,02cH
; union <unnamed> volatile __io _A_UDR0;
_A_UDR0:
	DS 1
;     6 #include "macros.h"
;     7 #include "uart.h"
;     8 #include <stdio.h>
;     9 //#include "iostream.h"
;    10 //#include "yfuns.h"
;    11 //#undef __putchar
;    12 //#undef __getchar
;    13 
;    14 
;    15 /* IMPORTANT: these vector numbers are for 8515! If you use other devices
;    16  * you must change them to the different set of numbers.
;    17  *
;    18  * UART_RX_interrupt set to UART, Rx Complete
;    19  * UART_TX_interrupt set to UART Data Register Empty
;    20  */
;    21 
;    22 /* Debug test module */
;    23 #define TEST  
;    24 
;    25 /* UART0 Buffer Defines */
;    26 #define UART0_RX_BUFFER_SIZE 128 /* 1,2,4,8,16,32,64,128 or 256 bytes */
;    27 #define UART0_RX_BUFFER_MASK ( UART0_RX_BUFFER_SIZE - 1 )
;    28 #define UART0_TX_BUFFER_SIZE 128 /* 1,2,4,8,16,32,64,128 or 256 bytes */
;    29 #define UART0_TX_BUFFER_MASK ( UART0_TX_BUFFER_SIZE - 1 )
;    30 
;    31 //#if ( UART0_RX_BUFFER_SIZE & UART0_RX_BUFFER_MASK )
;    32 //#error RX buffer size is not a power of 2
;    33 //#endif
;    34 
;    35 /* Static Variables */

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
;    36 static unsigned char UART0_RxBuf[UART0_RX_BUFFER_SIZE];
; static unsigned char __near UART0_RxBuf[128];
UART0_RxBuf:
	DS 128

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
;    37 static volatile unsigned char UART0_RxHead;
; static unsigned char volatile __near UART0_RxHead;
UART0_RxHead:
	DS 1

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
;    38 static volatile unsigned char UART0_RxTail;
; static unsigned char volatile __near UART0_RxTail;
UART0_RxTail:
	DS 1

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
;    39 static unsigned char UART0_TxBuf[UART0_TX_BUFFER_SIZE];
; static unsigned char __near UART0_TxBuf[128];
UART0_TxBuf:
	DS 128

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
;    40 static volatile unsigned char UART0_TxHead;
; static unsigned char volatile __near UART0_TxHead;
UART0_TxHead:
	DS 1

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
;    41 static volatile unsigned char UART0_TxTail;
; static unsigned char volatile __near UART0_TxTail;
UART0_TxTail:
	DS 1
;    42 // New putchar
;    43 //static volatile __io unsigned char _PORTA @ 0x1B ;
;    44 //static volatile __io unsigned char _DDRA  @ 0x1A;
;    45 //static volatile __io unsigned char _PINA  @ 0x19;   
;    46 
;    47 
;    48 /* initialize UART */

        RSEG CODE:CODE:NOROOT(1)
;    49 void InitUART0( unsigned char baudrate )
;    50 	{
;    51 	unsigned char x;
;    52 	UBRR0 = baudrate; /* set the baud rate */
; __nearfunc void InitUART0(unsigned char);
InitUART0:
	OUT	0x09,R16
;    53 	/* enable UART receiver and transmitter, and
;    54 	receive interrupt */
;    55 	UCSR0B = ( (1<<RXCIE0) | (1<<RXEN0) | (1<<TXEN0) );
	LDI	R16,152
	OUT	0x0A,R16
;    56 	x = 0; /* flush receive buffer */
	LDI	R16,0
;    57 	UART0_RxTail = x;
	STS	UART0_RxTail,R16
;    58 	UART0_RxHead = x;
	STS	UART0_RxHead,R16
;    59 	UART0_TxTail = x;
	STS	UART0_TxTail,R16
;    60 	UART0_TxHead = x;
	STS	UART0_TxHead,R16
;    61 	}
	RET
;    62 
;    63 
;    64 #pragma vector=UART0_RX_vect

        RSEG CODE:CODE:NOROOT(1)
;    65 static __interrupt void UART0_RX(void)
;    66 {
; static __nearfunc __interrupt void UART0_RX();
UART0_RX:
	ST	-Y,R24
	ST	-Y,R31
	ST	-Y,R30
	ST	-Y,R3
	ST	-Y,R2
	ST	-Y,R1
	ST	-Y,R0
	ST	-Y,R23
	ST	-Y,R22
	ST	-Y,R21
	ST	-Y,R20
	ST	-Y,R19
	ST	-Y,R18
	ST	-Y,R17
	ST	-Y,R16
	IN	R24,0x3F
;    67       
;    68         unsigned char data;
;    69 	unsigned char tmphead;
;    70  // !! Add store register SREG to STEK	
;    71         asm (" PUSH R0 \n");
 PUSH R0 
;    72 	data = UDR0; /* read the received data */
	IN	R17,0x0C
;    73 	/* calculate buffer index */
;    74 	tmphead = ( UART0_RxHead + 1 ) & UART0_RX_BUFFER_MASK;
	LDS	R16,UART0_RxHead
	INC	R16
	ANDI	R16,0x7F
;    75 	UART0_RxHead = tmphead; /* store new index */
	STS	UART0_RxHead,R16
;    76 	if ( tmphead == UART0_RxTail )
	LDS	R18,UART0_RxTail
;    77 		{
;    78 		/* ERROR! Receive buffer overflow */
;    79 		}
;    80 	UART0_RxBuf[tmphead] = data; /* store received data in buffer */
	MOV	R20,R16
	LDI	R21,0
	MOVW	R31 : R30,R21 : R20
	SUBI	R30,LOW((-(UART0_RxBuf) & 0xFFFF))
	SBCI	R31,(-(UART0_RxBuf) & 0xFFFF) >> 8
	ST	Z,R17
;    81  // !! Add restore register SREG from STEK
;    82         asm (" POP R0 \n");
 POP R0 
;    83 }
	OUT	0x3F,R24
	LD	R16,Y+
	LD	R17,Y+
	LD	R18,Y+
	LD	R19,Y+
	LD	R20,Y+
	LD	R21,Y+
	LD	R22,Y+
	LD	R23,Y+
	LD	R0,Y+
	LD	R1,Y+
	LD	R2,Y+
	LD	R3,Y+
	LD	R30,Y+
	LD	R31,Y+
	LD	R24,Y+
	RETI
;    84 
;    85 /* interrupt handlers */
;    86 
;    87 
;    88 #pragma vector=UART0_UDRE_vect

        RSEG CODE:CODE:NOROOT(1)
;    89 static __interrupt void UART0_UDRE(void)
;    90 {
; static __nearfunc __interrupt void UART0_UDRE();
UART0_UDRE:
	ST	-Y,R24
	ST	-Y,R31
	ST	-Y,R30
	ST	-Y,R3
	ST	-Y,R2
	ST	-Y,R1
	ST	-Y,R0
	ST	-Y,R23
	ST	-Y,R22
	ST	-Y,R21
	ST	-Y,R20
	ST	-Y,R19
	ST	-Y,R18
	ST	-Y,R17
	ST	-Y,R16
	IN	R24,0x3F
;    91 	unsigned char tmptail;
;    92 
;    93         asm (" PUSH R0 \n");
 PUSH R0 
;    94 
;    95 	/* check if all data is transmitted */
;    96 	if ( UART0_TxHead != UART0_TxTail )
	LDS	R16,UART0_TxHead
	LDS	R17,UART0_TxTail
	CP	R16,R17
	BREQ	??UART0_UDRE_0
;    97 		{
;    98 		/* calculate buffer index */
;    99 		tmptail = ( UART0_TxTail + 1 ) & UART0_TX_BUFFER_MASK;
	LDS	R16,UART0_TxTail
	INC	R16
	ANDI	R16,0x7F
;   100 		UART0_TxTail = tmptail; /* store new index */
	STS	UART0_TxTail,R16
;   101 		//PORTA = ~UART0_TxBuf[tmptail]; /* test */
;   102 		UDR0 = UART0_TxBuf[tmptail]; /* start transmition */
	LDI	R17,0
	MOVW	R31 : R30,R17 : R16
	SUBI	R30,LOW((-(UART0_TxBuf) & 0xFFFF))
	SBCI	R31,(-(UART0_TxBuf) & 0xFFFF) >> 8
	LD	R16,Z
	OUT	0x0C,R16
	RJMP	??UART0_UDRE_1
;   103 		}
;   104 	else
;   105 		{
;   106 		UCSR0B &= ~(1<<UDRIE0); /* disable UDRE interrupt */
??UART0_UDRE_0:
	CBI	0x0A,0x05
;   107 		};
;   108         asm (" POP R0 \n");		
??UART0_UDRE_1:
 POP R0 
;   109 	}
	OUT	0x3F,R24
	LD	R16,Y+
	LD	R17,Y+
	LD	R18,Y+
	LD	R19,Y+
	LD	R20,Y+
	LD	R21,Y+
	LD	R22,Y+
	LD	R23,Y+
	LD	R0,Y+
	LD	R1,Y+
	LD	R2,Y+
	LD	R3,Y+
	LD	R30,Y+
	LD	R31,Y+
	LD	R24,Y+
	RETI
;   110 
;   111 /* Read and write functions */

        RSEG CODE:CODE:NOROOT(1)
;   112 unsigned char ReceiveByte( void )
;   113 	{
;   114 	unsigned char tmptail;
;   115 
;   116 	while ( UART0_RxHead == UART0_RxTail ) /* wait for incomming data */
; __nearfunc unsigned char ReceiveByte();
ReceiveByte:
??ReceiveByte_0:
	LDS	R16,UART0_RxHead
	LDS	R17,UART0_RxTail
	CP	R16,R17
	BREQ	??ReceiveByte_0
;   117 		;
;   118 	tmptail = ( UART0_RxTail + 1 ) & UART0_RX_BUFFER_MASK;/* calculate buffer index */
	LDS	R16,UART0_RxTail
	INC	R16
	ANDI	R16,0x7F
;   119 	UART0_RxTail = tmptail; /* store new index */
	STS	UART0_RxTail,R16
;   120 	return UART0_RxBuf[tmptail]; /* return data */
	LDI	R17,0
	MOVW	R31 : R30,R17 : R16
	SUBI	R30,LOW((-(UART0_RxBuf) & 0xFFFF))
	SBCI	R31,(-(UART0_RxBuf) & 0xFFFF) >> 8
	LD	R16,Z
	RET
;   121 	}
;   122 

        RSEG CODE:CODE:NOROOT(1)
;   123 void TransmitByte( unsigned char data )
;   124 	{
;   125 	unsigned char tmphead;
;   126 	/* calculate buffer index */
;   127 	tmphead = ( UART0_TxHead + 1 ) & UART0_TX_BUFFER_MASK; 
; __nearfunc void TransmitByte(unsigned char);
TransmitByte:
	LDS	R18,UART0_TxHead
	INC	R18
	ANDI	R18,0x7F
;   128 		/* wait for free space in buffer */
;   129 
;   130 	while ( tmphead == UART0_TxTail )
??TransmitByte_0:
	LDS	R17,UART0_TxTail
	CP	R18,R17
	BREQ	??TransmitByte_0
;   131 		;
;   132 	UART0_TxBuf[tmphead] = data; /* store data in buffer */
	LDI	R19,0
	MOVW	R31 : R30,R19 : R18
	SUBI	R30,LOW((-(UART0_TxBuf) & 0xFFFF))
	SBCI	R31,(-(UART0_TxBuf) & 0xFFFF) >> 8
	ST	Z,R16
;   133 	UART0_TxHead = tmphead; /* store new index */
	STS	UART0_TxHead,R18
;   134 	UCSR0B |= (1<<UDRIE0); /* enable UDRE interrupt */
	SBI	0x0A,0x05
;   135 	}
	RET
;   136 

        RSEG CODE:CODE:NOROOT(1)
;   137 unsigned char DataInReceiveBuffer( void )
;   138 	{
;   139 	return ( UART0_RxHead != UART0_RxTail ); 
; __nearfunc unsigned char DataInReceiveBuffer();
DataInReceiveBuffer:
	LDS	R16,UART0_RxHead
	LDS	R17,UART0_RxTail
	CP	R16,R17
	BREQ	??DataInReceiveBuffer_0
	LDI	R16,1
	RET
??DataInReceiveBuffer_0:
	LDI	R16,0
	RET
;   140 		/* return 0 (FALSE) if the receive buffer is empty */
;   141 	}
;   142 
;   143 
;   144 
;   145 #ifdef TEST
;   146 /* main - a simple test program*/

        RSEG CODE:CODE:NOROOT(1)
;   147 void main( void )
;   148 	{
; __nearfunc void main();
main:
        FUNCALL main, InitUART0
        LOCFRAME CSTACK, 5, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL main, ReceiveByte
        LOCFRAME CSTACK, 5, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL main, TransmitByte
        LOCFRAME CSTACK, 5, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL main, printf
        LOCFRAME CSTACK, 7, STACK
        LOCFRAME RSTACK, 2, STACK
	ST	-Y,R27
	ST	-Y,R26
	SBIW	R29 : R28,3
;   149 
;   150 	volatile unsigned char cByte;
;   151 	volatile int iByte=1;
	LDI	R16,1
	LDI	R17,0
	STD	Y+1,R16
	STD	Y+2,R17
;   152 	volatile int iRet;
;   153 	volatile unsigned char * msg=" ";
	LDI	R26,LOW(`?<Constant " ">`)
	LDI	R27,(`?<Constant " ">`) >> 8
;   154 	InitUART0( 23 ); /* set the baudrate to 9600 bps using a 3,6864 MHz crystal */
	LDI	R16,23
	RCALL	InitUART0
;   155 	_SEI(); /* enable interrupts => enable UART interrupts */
        sei
;   156 	while ( 1 ) /* forever */
;   157 		{
;   158 
;   159 		//TestBuf.sputc( ) ;
;   160 		//iRet =  fputc(cByte,stdout) ;
;   161 		// !! Yes iRet =  putchar(cByte);
;   162                 cByte = ReceiveByte();
??main_0:
	RCALL	ReceiveByte
	ST	Y,R16
;   163                 *msg = cByte;
	LD	R16,Y
	ST	X,R16
;   164                 iByte = (int) cByte;
	LD	R16,Y
	LDI	R17,0
	STD	Y+1,R16
	STD	Y+2,R17
;   165 		TransmitByte(cByte); /* echo the received character */
	LD	R16,Y
	RCALL	TransmitByte
;   166 		//iRet = puts("Test puts\n");		
;   167                 //putchar((int)cByte);
;   168 		iRet = printf("%c", cByte);
	LD	R16,Y
	LDI	R17,0
	ST	-Y,R17
	ST	-Y,R16
	LDI	R16,LOW(`?<Constant "%c">`)
	LDI	R17,(`?<Constant "%c">`) >> 8
	CALL	printf
	ADIW	R29 : R28,2
	STD	Y+1,R16
	STD	Y+2,R17
	RJMP	??main_0
;   169 		//iRet = printf("Hello");
;   170                 // Yes !! Test
;   171                 //iByte =  __getchar();
;   172                 //iRet  =  __putchar(iByte);
;   173 		//iRet = (int)&cout;
;   174 		//iRet = (int)&cin ;
;   175                 //cout << "Start test stream standart" << cin;
;   176            }
;   177 	}

        COMMON INTVEC:CODE:ROOT(1)
        ORG 52
	JMP	UART0_RX

        COMMON INTVEC:CODE:ROOT(1)
        ORG 60
	JMP	UART0_UDRE

        RSEG NEAR_I:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_I>`
; char __near <Constant " ">[2];
`?<Constant " ">`:
	DS 2
	REQUIRE `?<Initializer for <Constant " ">>`

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for <Constant " ">>`:
	DB " "

        RSEG INITTAB:CODE:NOROOT(0)
`?<Segment init: NEAR_I>`:
	DW	SFE(NEAR_I) - SFB(NEAR_I)
	DW	SFB(NEAR_I)
	DW	SFB(NEAR_ID)
	REQUIRE ?need_segment_init

        RSEG NEAR_I:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_I>`
; char __near <Constant "%c">[3];
`?<Constant "%c">`:
	DS 3
	REQUIRE `?<Initializer for <Constant "%c">>`

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "%c">>`:
	DB "%c"

        RSEG INITTAB:CODE:NOROOT(0)
`?<Segment init: NEAR_Z>`:
	DW	SFE(NEAR_Z) - SFB(NEAR_Z)
	DW	SFB(NEAR_Z)
	DW	0
	REQUIRE ?need_segment_init

        END
;   178 #endif
; 
;      3 bytes in segment ABSOLUTE
;    394 bytes in segment CODE
;     12 bytes in segment INITTAB
;      8 bytes in segment INTVEC
;      5 bytes in segment NEAR_I
;      5 bytes in segment NEAR_ID
;    260 bytes in segment NEAR_Z
; 
;    407 bytes of CODE memory (+ 12 bytes shared)
;    265 bytes of DATA memory (+ 3 bytes shared)
;
;Errors: none
;Warnings: 2
