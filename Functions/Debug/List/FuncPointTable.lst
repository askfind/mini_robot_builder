##############################################################################
#                                                                            #
# IAR Atmel AVR C/EC++ Compiler V2.26N/WIN             07/Oct/2002  08:52:56 #
# Copyright 1996-2001 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Source file  =  C:\AVR_CC\Functions\FuncPointTable.c                    #
#    Command line =  --cpu=m161 -ms -o C:\AVR_CC\Functions\Debug\Obj\ -I     #
#                    C:\AVR_CC\AVR\SRC\CLIB\INC\ -lC                         #
#                    C:\AVR_CC\Functions\Debug\List\ -lA                     #
#                    C:\AVR_CC\Functions\Debug\List\ -e -y                   #
#                    --initializers_in_flash -z3 --no_cse --no_inline        #
#                    --no_code_motion --no_cross_call --no_clustering        #
#                    --debug -DENABLE_BIT_DEFINITIONS                        #
#                    C:\AVR_CC\Functions\FuncPointTable.c                    #
#    List file    =  C:\AVR_CC\Functions\Debug\List\FuncPointTable.lst       #
#    Object file  =  C:\AVR_CC\Functions\Debug\Obj\FuncPointTable.r90        #
#                                                                            #
#                                                                            #
##############################################################################

      1          #include "iom161.h"
      2          #include "stdio.h"
      3          
      4          /* Set and clear bits in I/O registers can also be declared as macros */
      5          #define SetBit(ADDRESS,BIT) (ADDRESS |= (1<<BIT))
      6          #define ClrBit(ADDRESS,BIT) (ADDRESS &= ~(1<<BIT))
      7          /* Macro for testing of a single bit in an I/O location*/
      8          /* Macro for testing of a single bit in an I/O location*/
      9          #define CheckBit(ADDRESS,BIT) (ADDRESS & (1<<BIT))
     10          
     11          /* UART0 Buffer Defines */
     12          #define RX_BUFFER_SIZE_UART0 32 /* 1,2,4,8,16,32,64,128 or 256 bytes */
     13          #define RX_BUFFER_MASK_UART0 ( RX_BUFFER_SIZE_UART0 - 1 )
     14          #define TX_BUFFER_SIZE_UART0 32 /* 1,2,4,8,16,32,64,128 or 256 bytes */
     15          #define TX_BUFFER_MASK_UART0 ( TX_BUFFER_SIZE_UART0 - 1 )
     16          
     17          #if ( RX_BUFFER_SIZE_UART0 & RX_BUFFER_MASK_UART0 )
     18          #message "RX buffer size is not a power of 2"
     19          #endif
     20          
     21          /* Static Variables */

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
     22          static volatile unsigned char RxBuf_UART0[RX_BUFFER_SIZE_UART0];
   \   static unsigned char volatile __near RxBuf_UART0[32];
   \                     RxBuf_UART0:
   \   00000000                              DS 32
     23          static volatile unsigned char RxHead_UART0;
     24          static volatile unsigned char RxTail_UART0;
     25          static volatile unsigned char TxBuf_UART0[TX_BUFFER_SIZE_UART0];
     26          static volatile unsigned char TxHead_UART0;
     27          static volatile unsigned char TxTail_UART0;
     28          

   \                                 In segment NEAR_I, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_I>`
     29           static volatile unsigned char x=1;
   \   static unsigned char volatile __near x;
   \                     `x`:
   \   00000000                              DS 1
   \   00000001                              REQUIRE `?<Initializer for x>`

   \                                 In segment NEAR_I, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_I>`
     30           static volatile unsigned char y=2;
   \   static unsigned char volatile __near y;
   \                     `y`:
   \   00000000                              DS 1
   \   00000001                              REQUIRE `?<Initializer for y>`
     31          
     32          

   \                                 In segment CODE, align 2, keep-with-next
     33          void swap( volatile unsigned char *x, volatile unsigned char *y)
     34          {
     35          unsigned char temp;
     36          temp = *x;
   \   __nearfunc void swap(unsigned char volatile *, unsigned char volatile *);
   \                     `swap`:
   \   00000000   2FE0                       MOV     R30,R16
   \   00000002   2FF1                       MOV     R31,R17
   \   00000004   8140                       LD      R20,Z
     37          *x = *y;
   \   00000006   2FE2                       MOV     R30,R18
   \   00000008   2FF3                       MOV     R31,R19
   \   0000000A   8150                       LD      R21,Z
   \   0000000C   2FE0                       MOV     R30,R16
   \   0000000E   2FF1                       MOV     R31,R17
   \   00000010   8350                       ST      Z,R21
     38          *y = temp;
   \   00000012   2FE2                       MOV     R30,R18
   \   00000014   2FF3                       MOV     R31,R19
   \   00000016   8340                       ST      Z,R20
     39          
     40          }
   \   00000018   9508                       RET

   \                                 In segment CODE, align 2, keep-with-next
     41          void  main(void)
     42          {
   \   __nearfunc void main();
   \                     main:
   \   00000000   ........                   CALL    ?PROLOGUE4_L09
     43           int i=0;
   \   00000004   E080                       LDI     R24,0
   \   00000006   E090                       LDI     R25,0
     44          
     45           swap( &x, &y);
   \   00000008   ....                       LDI     R18,LOW(`y`)
   \   0000000A   ....                       LDI     R19,(`y`) >> 8
   \   0000000C   ....                       LDI     R16,LOW(`x`)
   \   0000000E   ....                       LDI     R17,(`x`) >> 8
   \   00000010   ....                       RCALL   `swap`
     46          
     47          
     48           for (;;)
     49           {
     50          /*---------*/
     51          /*  Test 1 */
     52          /*
     53          ;
     54          ;     26 bytes in segment CODE
     55          ;      6 bytes in segment INITTAB
     56          ;     32 bytes in segment NEAR_Z
     57          ;
     58          ;     26 bytes of CODE memory (+ 6 bytes shared)
     59          ;     32 bytes of DATA memory
     60          */
     61          
     62            volatile unsigned char *pointer1 = &RxBuf_UART0[0];
   \                     ??main_0:
   \   00000012   ....                       LDI     R26,LOW(RxBuf_UART0)
   \   00000014   ....                       LDI     R27,(RxBuf_UART0) >> 8
     63            volatile unsigned char *pointer2 = &RxBuf_UART0[31];
   \   00000016   ....                       LDI     R30,LOW((RxBuf_UART0 + 31))
   \   00000018   ....                       LDI     R31,(RxBuf_UART0 + 31) >> 8
     64            *pointer1++ = *--pointer2;
   \   0000001A   9102                       LD      R16,-Z
   \   0000001C   930C                       ST      X,R16
   \   0000001E   9611                       ADIW    R27 : R26,1
     65          
     66          
     67          /*-----------*/
     68          /*  Test 2   */
     69          /*
     70          ;     20 bytes in segment CODE
     71          ;      6 bytes in segment INITTAB
     72          ;     32 bytes in segment NEAR_Z
     73          ;
     74          ;     20 bytes of CODE memory (+ 6 bytes shared)
     75          ;     32 bytes of DATA memory
     76          */
     77          //  RxBuf_UART0[0+1] = RxBuf_UART0[31-1];
     78            i++;
   \   00000020   9601                       ADIW    R25 : R24,1
   \   00000022   CFF7                       RJMP    ??main_0
     79            };
     80          }
                  ^
Warning[Pe001]: last line of file ends without a newline

   \                                 In segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for x>`:
   \   00000000   01                         DB 1

   \                                 In segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for y>`:
   \   00000000   02                         DB 2

   Maximum stack usage in bytes:

     Function   CSTACK  RSTACK
     --------   ------  ------
     main           4       2 
       -> swap      4       2 
     swap           0       0 

 
     62 bytes in segment CODE
     12 bytes in segment INITTAB
      2 bytes in segment NEAR_I
      2 bytes in segment NEAR_ID
     32 bytes in segment NEAR_Z
 
     64 bytes of CODE memory (+ 12 bytes shared)
     34 bytes of DATA memory

Errors: none
Warnings: 1
