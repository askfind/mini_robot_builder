
 Васильев В.И.                                         26.08.2002
 Программист                                            г. Кириши

 Редактирование 03.10.02г. 14:14:29

                   ПРОГРАММНОЕ ОБЕСПЕЧЕНИЕ


        I. АНАЛИЗ

 Выделить сущности, каждая из которых называется автоматом.

Таб. №1 Перечень автоматов
+-----------+---------------------------+------------------------+
|Обозначение|    Наименование           |   Примечание           |
+-----------+---------------------------+------------------------+
|   A0.x    | Командный процессор       | Управление минироботом |
|           |                           | ( модуль программный ) |
+-----------+---------------------------+------------------------+
|   A1.x    | Ассинхронный приемо-пере- | Программно-аппаратный  |
|           | датчик UART0              | ( вектор прерывания )  |
+-----------+---------------------------+------------------------+
|   A2.x    | Пульт управления кнопочный| Программно-аппаратный  |
|           |                           | ( вектор прерывания )  |
+-----------+---------------------------+------------------------+
|   A3.x    | Алфавитно-цифровой дисплей| Программно-аппаратный  |
|           |                           | ( вектор прерывания )  |
+-----------+---------------------------+------------------------+


     Примечание:

     Обозначения   AXX.xx
                   | |  |___ Номер вложенного автомата
                   | |______ Номер автомата
                   |________ Автомат



Таб. №2 Перечень вложенных автоматов A1.xx ( UART0 )
+-----------+---------------------------+------------------------+
|Обозначение|    Наименование           |   Примечание           |
+-----------+---------------------------+------------------------+
|   A1.1    | Приемник UART0            | Программно-аппаратный  |
|           |                           | ( вектор прерывания )  |
+-----------+---------------------------+------------------------+
|   A1.2    | Передатчик UART0          | Программно-аппаратный  |
|           |                           | ( вектор прерывания )  |
+-----------+---------------------------+------------------------+
|   A1.3    | Контроль потока Rx UART0  | Программный            |
+-----------+---------------------------+------------------------+
|   A1.4    | Контроль потока Tx UART0  | Программный            |
+-----------+---------------------------+------------------------+


Рисунок №1 Генератор событий eX миниробота

 **********************************
 ||          Генератор           ||
 ||           событий            ||
 **********************************
   |
  *|__ e0  ( Reset Системный сброс )
   |__ e1  ( INT0  Внешнее прерывание 0 )
   |__ e2  ( INT1  Внешнее прерывание 1 )
   |__ e3  ( INT2  Внешнее прерывание 2 )
   |__ e4  ( TIM2_Comp  Timer2 прерывание от таймера )
   |__ e5  ( TIM2_Ovf   Timer2 прерывание от таймера )
   |__ e6  ( TIM1_Capt  Timer1 прерывание от таймера )
   |__ e7  ( TIM1_CompA Timer1 прерывание от таймера )
   |__ e8  ( TIM1_CompB Timer1 прерывание от таймера )
   |__ e9  ( TIM1_Ovf   Timer1 прерывание от таймера )
   |__ e10 ( TIM0_Comp  Timer0 прерывание от таймера )
   |__ e11 ( TIM0_Ovf   Timer0 прерывание от таймера )
   |__ e12 ( SPI_STC  Передача байта интерфейса SPI выполнена )
*  |__ e13 ( RXC0   UART0 прием байта )
   |__ e14 ( RXC1   UART1 прием байта )
*  |__ e15 ( DRE0   UART0 регистр пуст )
   |__ e16 ( DRE1   UART1 регистр пуст )
*  |__ e17 ( TXC0   UART0 передан байт )
   |__ e18 ( TXC1   UART1 передан байт )
*  |__ e19 ( EE_DRY EEPROM готовность чтения байт )
   |__ e20 ( ANA_Comp  Аналоговый компаратор )
*  |__ e21 ( KEY_Comp  Изменение состояния кнопочного пульта )
*  |__ e22 ( CMD       Команда управления от внешнего источника )

       e_gl - Глобальное разрешение/запрещение прерываний, кроме e0.


 Примечание:  * - Помечены события, которые генерируются в версии
                  программы 0.01


Рисунок №2 Схема связи автомата A1.x ( UART0 )

 ******************************
 ||  СОБЫТИЯ  для A1.x UART0 ||
 ******************************
   |
   |__ e0   ( Reset )
   |__ e13  ( RXC0 UART0 принят байт )
   |__ e17  ( TXC0 UART0 передан байт )
   |__ e21  ( KEY_Comp клавиши управления для UART0 )
   |__ e22  ( CMD команда от ПК для UART0 )



  **************************************
  |  Входные переменные для A1.x UART0 |
  **************************************
    |
    |__ x0  ( RXD0 - прием данных или сигнал BREAK от внешнего устройства )
    |__ x1  ( DSR0 - готовность внешнего устройства для приема данных )
    |__ x2  ( CTS0 - готовность внешнего устройства для передачи данных )


  +-------------------------------------+
  | Внутренние переменные A1.x UART0    |
  +-------------------------------------+
    |
    |__ v0  ( SpeedBaud_UART0  - скорость Rx/Tx бод )
    |__ v1  ( ModeU2X0 - удвоенная скорость Rx/Tx бод )
    |__ v2  ( ModeCHR90 - количество Rx/Tx бит )
    |__ v3  ( CheckParity_UART0 - проверка четности )
    |__ v4  ( ContrStream_UART0 - контроль потока данных )
    |__ v5  ( Enb_DTR0   - разрешить контроль потока данных )
    |__ v6  ( Bit_DTR0   - установленный принудительно сигнал контроля потока данных )
    |__ v7  ( Enb_DSR0   - разрешить контроль потока данных )
    |__ v8  ( Bit_DSR0   - установленный принудительно сигнал контроля потока данных )
    |__ v9  ( Enb_RTS0   - разрешить контроль потока данных )
    |__ v10 ( Bit_RTS0   - установленный принудительно сигнал контроля потока данных )
    |__ v11 ( Enb_CTS0   - разрешить контроль потока данных )
    |__ v12 ( Bit_CTS0   - установленный принудительно сигнал контроля потока данных )
    |__ v13 ( Enb_XON_XOFF_Tx_UART0 - разрешить контроль потока для передачи данных )
    |__ v14 ( Enb_XON_XOFF_Rx_UART0 - разрешить контроль потока для приема данных )
    |__ v15 ( Enb_Echo_UART0 - режим эхо, передавать принятый байт )
    |__ v16 ( ModeMPCM0 - режим мульти-процессор UART0 )
    |__ v17 ( Enb_Err_UART0 - флаг разрешения подсчета ошибок)
    |__ v18 ( Rx_Tx_Err_UART0 - массив подсчета типа и количество ошибок )



  +---------------------------------------------+
  | Внутренние переменные A1.1 UART0 приемник   |
  +---------------------------------------------+
    |
    |__ v19 ( Count_Rx_UART0  - подсчет количество принятых байт )
    |__ v20 ( Count_Rx_Err_UART0 - подсчет количество ошибочных принятых байт )
    |__ v21 ( RX_BUFFER_SIZE_UART0 - размер буфера приема UART0 )
    |__ v22 ( RX_BUFFER_MASK_UART0 - маска для контроля буфера приема UART0 )
    |__ v23 ( Rx_Head_UART0  - указатель начала буфера приема UART0 )
    |__ v24 ( Rx_Tail_UART0  - указатель конца буфера приема UART0 )
    |__ v25 ( Rx_Buf_UART0   - буфер принятых байт UART0 )
    |
    |__ v26 ( UART0.UCSR0A.RXC0 - принят байт и сохранен в UART0.UDR0 )
    |__ v27 ( UART0.UCSR0A.FE0  - ошибка фрейма приема )
    |__ v28 ( UART0.UCSR0A.OE0  - ошибка переполнения, предыдущий байт не прочитан )
    |__ v29 ( UART0.UCSR0B.RXCIE0 - разрешение прерывания, если байт принят )
    |__ v30 ( UART0.UCSR0B.RXEN0  - разрешение приема данных )
    |__ v31 ( UART0.UCSR0B.RXB80  - прием 9 бита, если режим Rx/Tx 9 бит )

  +---------------------------------------------+
  | Внутренние переменные A1.2 UART0 передатчик |
  +---------------------------------------------+
    |
    |__ v32 ( Count_Tx_UART0  - подсчет количество переданных байт )
    |__ v33 ( Count_Tx_Err_UART0 - подсчет количество ошибочных переданных байт )
    |__ v34 ( TX_BUFFER_SIZE_UART0 - размер буфера передатчика UART0 )
    |__ v35 ( TX_BUFFER_MASK_UART0 - маска для контроля буфера передатчика UART0 )
    |__ v36 ( Tx_Head_UART0  - указатель начала буфера передатчика UART0 )
    |__ v37 ( Tx_Tail_UART0  - указатель конца буфера передатчика UART0 )
    |__ v38 ( Tx_Buf_UART0   - буфер переданных байт UART0 )
    |
    |__ v39 ( UART0.UCSR0A.TXC0 - передан байт из SHIFT reg и нет новых в UART0.UDR0 )
    |__ v40 ( UART0.UCSR0A.UDRE0  - Из UDR0 передан байт в SHIFT reg )
    |__ v41 ( UART0.UCSR0A.UDRIE0 - разрешает прерывание, если UDR0 пуст )
    |__ v42 ( UART0.UCSR0B.TXCIE0 - разрешение прерывания, если байт передан из SHIFT )
    |__ v43 ( UART0.UCSR0B.TXEN0  - разрешение передачи байт )
    |__ v44 ( UART0.UCSR0B.TXB80  - передача 9 бита, если режим Rx/Tx 9 бит )


  ************************************
  |  Выходные переменные  A1.x UART0 |
  ************************************
    |
    |__ z0  ( TXD0  - сигнал BREAK  для внешнего устройства )
    |__ z1  ( DTR0  - готовность UART0 для приема данных )
    |__ z2  ( RTS0  - готовность UART0 передать данные )
    |__ z3  ( LED_DTR0 - индикация "Готовность приема данных UART0" )
    |__ z4  ( LED_RTS0 - индикация "Готовность передачи данных UART0" )
    |__ z5  ( LED_DSR0 - индикация "Готовность внешнего устройства для приема" )
    |__ z6  ( LED_CTS0 - индикация "Готовность внешнего устройства для передачи" )
    |__ z7  ( LED_TXD  - индикация "Начало передачи байта UART0" импульс )
    |__ z8  ( LED_RXD  - индикация "Начало приема байта UART0" импульс )



 ####################################
 |   СОСТОЯНИЕ  автомата A1.x UART0 |
 ####################################
   |
   |__ y0  ( После системного Reset )
   |__ y1  ( Иницилизации внутренних переменных UART0 )
   |__ y2  ( Изменение режимов работы UART0 )
   |__ y3  ( Разрешено Прием и Передача байт UART0 )
   |__ y4  ( Запрещен Прием UART0, Разрешена Передача байт UART0 )
   |__ y5  ( Разрешен Прием UART0, Запрещена Передача байт UART0 )
   |__ y6  ( Запрещен Прием и Передача байт UART0 )

  Примечание:  В переменной Y - сохраняется состояние автомата



Рисунок №3 Схема связи автомата A1.3 ( Контроль потока Rx UART0 )

 *********************************
 ||  СОБЫТИЯ  для A1.3 Rx UART0 ||
 *********************************
   |
   |__ e0   ( Reset )
   |__ x    ( Значения входных сигналов CTS0, DSR0 )
   |__ CMD  ( Фукции управления DTR0, RTS0, CTS0, DSR0, XON/XOFF)
   |__ Status Rx_Buf ( Состояние буфера приема: заполнен или не заполен)

  +----------------------------------------+
  | Внутренние переменные A1.3 Rx UART0    |
  +----------------------------------------+
    |
    |__ Соответствуют общим с A1.x и A1.2

 #######################################
 |   СОСТОЯНИЕ  автомата A1.3 Rx UART0 |
 #######################################
   |
   |__ y0  ( Состояние контроля потока: DTR0/DSR0   = Выкл, CTS0/RTS0   = Выкл
   |                                    XON/XOFF_Rx = Выкл, XON/XOFF_Tx = Выкл  )
   |                                    Bit_DTR0=1 , Bit_DSR0=1
   |                                    Bit_CTS0=1 , Bit_RTS0=1
   |__ y1  ( Состояние контроля потока: DTR0/DSR0   = Вкл,  CTS0/RTS0   = Выкл
   |         аппаратный                 XON/XOFF_Rx = {Вкл ,Выкл} )
   |                                    Bit_DTR0=DTR0, Bit_DSR0=DSR0
   |                                    Bit_CTS0={0,1}, Bit_RTS0={0,1}
   |__ y2  ( Состояние контроля потока: DTR0/DSR0   = Вкл, CTS0/RTS0    = Вкл
   |         аппаратный                 XON/XOFF_Rx = {Вкл, Выкл} )
   |                                    Bit_DTR0=DTR0, Bit_DSR0=DSR0
   |                                    Bit_CTS0=CTS0, Bit_RTS0=RTS0
   |__ y3  ( Состояние контроля потока: DTR0/DSR0   = Выкл, CTS0/RTS0    = Вкл
   |         аппаратный                 XON/XOFF_Rx = {Вкл, Выкл} )
   |                                    Bit_DTR0={0,1}, Bit_DSR0={0,1}
   |                                    Bit_CTS0=CTS0, Bit_RTS0=RTS0
   |__ y4  ( Состояние контроля потока: DTR0/DSR0   ={Вкл,Выкл} , CTS0/RTS0 = {Вкл,Выкл}
   |         программный                XON/XOFF_Rx = Вкл )
   |                                    Enb_XON_XOFF_Rx =1
   |__ y5  ( Состояние контроля потока: DTR0/DSR0   ={Вкл,Выкл} , CTS0/RTS0 = {Вкл,Выкл}
             программный                XON/XOFF_Rx = Выкл )
                                        Enb_XON_XOFF_Rx = 0




Рисунок №4 Схема связи автомата A1.4 ( Контроль потока Tx UART0 )

 *********************************
 ||  СОБЫТИЯ  для A1.3 Rx UART0 ||
 *********************************
   |
   |__ e0   ( Reset )
   |__ x    ( Значения входных сигналов CTS0, DSR0 )
   |__ CMD  ( Фукции управления DTR0, RTS0, CTS0, DSR0, XON/XOFF)
   |__ Status Tx_Buf ( Состояние буфера передатчика: заполнен или не заполен)


 #######################################
 |   СОСТОЯНИЕ  автомата A1.4 Tx UART0 |
 #######################################
   |
   |__ y0  ( Состояние контроля потока: DTR0/DSR0   = Выкл, CTS0/RTS0   = Выкл
   |                                    XON/XOFF_Rx = Выкл, XON/XOFF_Tx = Выкл  )
   |                                    Bit_DTR0=1 , Bit_DSR0=1
   |                                    Bit_CTS0=1 , Bit_RTS0=1
   |__ y1  ( Состояние контроля потока: DTR0/DSR0   = Выкл,  CTS0/RTS0   = Вкл
   |         аппаратный                 XON/XOFF_Tx = {Вкл ,Выкл} )
   |                                    Bit_DTR0={0,1}, Bit_DSR0={0,1}
   |                                    Bit_CTS0=CTS0,  Bit_RTS0=RTS0
   |__ y2  ( Состояние контроля потока: DTR0/DSR0   = Вкл, CTS0/RTS0    = Вкл
   |         аппаратный                 XON/XOFF_Tx = {Вкл, Выкл} )
   |                                    Bit_DTR0=DTR0, Bit_DSR0=DSR0
   |                                    Bit_CTS0=CTS0, Bit_RTS0=RTS0
   |__ y3  ( Состояние контроля потока: DTR0/DSR0   = Выкл, CTS0/RTS0    = Выкл
   |         аппаратный                 XON/XOFF_Tx = {Вкл, Выкл} )
   |                                    Bit_DTR0={0,1}, Bit_DSR0={0,1}
   |                                    Bit_CTS0={0,1}, Bit_RTS0={0,1}
   |__ y4  ( Состояние контроля потока: DTR0/DSR0   ={Вкл,Выкл} , CTS0/RTS0 = {Вкл,Выкл}
   |         программный                XON/XOFF_Tx = Вкл )
   |                                    Enb_XON_XOFF_Tx =1
   |__ y5  ( Состояние контроля потока: DTR0/DSR0   ={Вкл,Выкл} , CTS0/RTS0 = {Вкл,Выкл}
             программный                XON/XOFF_Tx = Выкл )
                                        Enb_XON_XOFF_Tx = 0


        II.  УСЛОВИЯ ПЕРЕХОДОВ АВТОМАТА A1x UART0

    e0 --> y0  C1x_1    Событие системный сброс --> UART0 выключен;
    y0 --> y1  C1x_2    Состояние A1x y0 --> y1     UART0 выключен;
                        Условие иницилизации от состояния пульта:
                        A2x.y1 --> "Конфигурация заводская"  копировать из ROM
                        A2x.y2 --> "Конфигурация текущая" копировать из EEPROM
                        Условие иницилизации:
                        e21.1 "Изменение состояния A2x.y1 --> A2x.y2" -->
                              "Конфигурация текущая" копировать из EEPROM
                        e21.2 "Изменение состояния A2x.y2 --> A2x.y1" -->
                              "Конфигурация заводская" копировать из ROM;
   y1 --> y2   C1x_3    Установка режима работы UART0 из переменных:
                        v0..v44;
   y2 --> y3   C1x_4    Разрешить работать приему и передачи UART0;

   y3 --> y4   C1x_5    Нет места в буфере передатчика, Не готово внешнее
                        устройство или принят сигнал XOFF от внешнего
                        устройства;

   y3 --> y5   C1x_6    Нет места в буфере приемника

   y3 --> y6   C1x_7    Нет места в буфере передатчика, Не готово внешнее
   y4 --> y6   C1x_8    устройство или принят сигнал XOFF от внешнего
                        нет места в буфере приемника



Рисунок №5 Схема связи автомата A2.1 ( KEY_CONTR )
           ( клавиатура и выключатели  4 х 4 = 16 клавиш )


  +----------------------------------------+
  | Внутренние переменные A2.1 KEY_CONTR   |
  +----------------------------------------+
    |
    |__ Буфер состояний клавиатуры в момент события e1 (глубина N)
    |__ Накопители - сумматоры для линии сканирования клавиш
    |__ Состояние клавиш текущее
    |__ Состояние клавиш предыдущее
    |__ Матрица разрешение/запрещение формирования события (Клавиша нажата)
    |__ Матрица разрешение/запрещение формирования события (Клавиша отжата)
    |__ Матрица разрешения/запрещение формирования события (Клавиша непрерывно нажата)
    |__ Матрица разрешение/запрещение формирования события (Клавиша непрерывно отжата)
    |__ TRAN_KEY переменная для состояния y1 (Для переходного процесса)

  ****************************************
  |  Выходные переменные  A2.1 KEY_CONTR |
  ****************************************
    |
    |__ z0 Событие нажатие клавиши
    |__ z1 Состояние отжатие клавиши
    |__ z2 Состояние клавиши нажата ( формирует непрерывный скан-код клавиш )
    |__ z3 Состояние клавиши отжата ( формирует непрерывный скан-код клавиш )

    Формирование события:

    e21   ( KEY_Comp  Изменение состояния кнопочного пульта )


    Примечание:
                Событие формируется с учетом логики матриц
                разрешения/запрещения.

 ########################################
 |   СОСТОЯНИЕ  автомата A2.1 KEY_CONTR |
 ########################################
   |
   |__ y0  ( Reset сброс массивов и переменных )
   |__ y1  ( Ввод состояния клавиатуры без формирования событий e21 и скан-кода )
   |__ y2  ( Обработка клавиатуры и формирование событий e21 и скан-кода )


 **********************************
 ||  СОБЫТИЯ  для A2.1 KEY_CONTR ||
 **********************************
   |
   |__ e0 ( Reset )
   |__ e1 ( Прерывание от таймера )


Рисунок №6 Схема связи автомата A2.2 ( DISP_CONTR )
           ( символьный дисплей  максимально 16 символов )

  +----------------------------------------+
  | Внутренние переменные A2.2 DISP_CONTR  |
  +----------------------------------------+
    |
    |__ ds[16]  Массив из 16-и 8 битовых кодов ( ASCII или BITS поле )
    |__ dan[16] Массив кодов типа битовых кодов и типы анимации для ASCII
    |           или BITS значений
    |__ dst[16] Массив времени действия анимации
    |__ count_time Счетчик выполненных прерываний TIMER0


  *****************************************
  |  Выходные переменные  A2.2 DISP_CONTR |
  *****************************************
    |
    |__ z0 Битовое поле для порта индикации ( 8 бит )
    |__ z1 Битовое поле позиции индикотора ( 4 бит, 16 позиций )


 ***********************************
 ||  СОБЫТИЯ  для A2.2 DISP_CONTR ||
 ***********************************
   |
   |__ e0 ( Reset )
   |__ e1 ( Прерывание от таймера )
   |__ e2 ( Команда от контроллера )


 #########################################
 |   СОСТОЯНИЕ  автомата A2.2 DISP_CONTR |
 #########################################
   |
   |__ y0  ( Reset сброс массивов и переменных )
   |__ y1  ( Вывод информации на индикатор )


        III. ТИПЫ ДАННЫ


        IV. ПРОТОТИПЫ ФУНКЦИЙ UART0

        /* Prototypes Functions for UART0_A1x.c */

        /*---------------------------*/
        /*  Reset UART */

        void    Reset_UART0 ( void );   // state is "Reset System" A1x.y0
                /*      - Запрет прерывания UART0
                        - Сигнал DTR0 = 1, RTS0 = 1
                        - Регистры UCSR0A,UCSR0B - очистить
                        - Массивы и переменные v0..v44 очисить
                        - Состояние автомата A1x.y=0 ( начальное ) */

        /*--------------------------------*/
        /*  Copy Sets Variable UART0 mode */

        void   CopySetsRom_UART0(void);       // Sets is Default
        void   CopySetsEEPROM_UART0(viod);    // Sets is Profile EEPROM

        /*------------------------*/
        /*  Initialize UART0 mode */

        void    Init_S_UART0  ( SpeedBaund );  // speed  UART0
        void    Init_2S_UART0 ( ModeU2X0 );        // baud*2 UART0
        void    Init_P_UART0  ( CheckParity ); // control parity
        void    Init_CHR9_UART0 ( ModeCHR90 );     // Rx/Tx 8 or 9 bits
        void    Init_MPCM_UART0 ( ModeMPCM0 );     // Mode Multi-processor Com port

        /*--------------------------*/
        /* Received Byte for Rx_Buf */

   int     ReceiveByteUART0( void );         // if int = -1 then ERROR
                                             // else int = read data

        /*---------------------------*/
        /* Transmited Byte to Tx_Buf */

    int    TransmitByteUART0 ( unsigned char data );  // if int = -1 then ERROR
                                                      // else int = data

        /*-------------------------------------------*/
        /* "Enable_Err_Count_UART0" Enable counter   */
        /*       errors for Tx_Rx  UART              */
    void   Enable_Err_Count_UART0 ( void );   // End_Err_UART0 = 1

        /*----------------------------------------------*/
        /* :"Disable_Err_Count_UART0" Disable counter   */
        /*       errors for Tx_Rx  UART                 */
    void   Disable_Err_Count_UART0 ( void );   // End_Err_UART0 = 0

        /*-------------------------------*/
        /* Read Arry Tx_Rx_Err for UART  */
    int    Read_Tx_Rx_Err_UART0 ( void );    // Type strings table Error
                                             // if int = -1 ERROR

        /*--------------------------*/
        /* "Echo On UART0"          */
    void   Echo_ON_UART0( void );   // Set Echo = 1 Mode 'ON'

        /*---------------------------*/
        /* "Echo OFF UART0"          */
    void   Echo_OFF_UART0( void );  // Set Echo = 0 Mode 'OFF'

        /*-- -----------------------*/
        /* "Break UART0" for UART  */
    void    Break_UART0( void );                  // Set pin AVR TXD = MARK ( Low )

        /*----------------------*/
        /* "Dis UART0"          */
    void   Dis_UART0( void );

        /*--------------------*/
        /* "Enb UART0"        */
   void    Enb_UART0( void );

         /*---------------------------------*/
         /* "DTR ON CONTROLL UART0"        */
   void     DTR_ON_CONTR_UART0( void );     // Control DTR ON
         /*--------------------------------*/
         /* "DTR OFF CONTROL UART0"        */
   void     DTR_OFF_CONTR_UART0( void );    // Control DTR OFF
         /*--------------------------------*/
         /* "DTR SET UART0"                */
   void     DTR_SET_UART0( void );          // Set DTR = 1
         /*--------------------------------*/
         /* "DTR CLR UART0"                */
   void      DTR_CLR_UART0( void );          // Set DTR = 0

        /*-----------------------------*/
        /* "RTS_ON_CONTR_UART0"        */
   void     RTS_ON_CONTR_UART0( void );    // Control RTS ON
         /*--------------------------------------*/
        /* "RTS_OFF_CONTR_UART0"        */
   void    RTS_OFF_CONTR_UART0( void );   // Control RTS OFF
         /*------------------------------*/
        /*  "RTS_SET_UART0"              */
   void      RTS_SET_UART0( void );         // Set RTS = 1
        /*------------------------*/
        /*  "RTS_CLR_UART0"       */
   void      RTS_CLR_UART0( void );         // Set RTS = 0

        /*------------------------------*/
        /*  "DSR_ON_CONTR_UART0"        */
   void      DSR_ON_CONTR_UART0( void );    // Control DSR ON
         /*-----------------------------*/
        /*  "DSR_OFF_CONTR_UART0"        */
   void      DSR_OFF_CONTR_UART0( void );   // Control DSR OFF
         /*------------------------------*/
        /*  "DSR_SET_UART0"              */
   void      DSR_SET_UART0( void );         // Set DSR = 1
        /*-----------------------*/
        /* "DSR_CLR_UART0"       */
   void     DSR_CLR_UART0( void );         // Set DSR = 0


        /*---------------------------------*/
        /*  "XON_XOFF_ON_CONTR_Rx_UART0"   */
   void      XON_XOFF_ON_CONTR_Rx_UART0( void ); XON/XOFF  Rx = 1 Enable
        /*----------------------------------*/
        /*  "XON_XOFF_OFF_CONTR_Rx_UART0"   */
   void     _XON_XOFF_OFF_CONTR_Rx_UART0( void ); XON/XOFF Rx = 0 Disable

        /*----------------------------------*/
        /*   "XON_XOFF_ON_CONTR_Tx_UART0"   */
   void       XON_XOFF_ON_CONTR_Tx_UART0( void ); XON/XOFF  Tx = 1 Enable
        /*-----------------------------------*/
        /*   "XON_XOFF_OFF_CONTR_Tx_UART0"   */
   void       XON_XOFF_OFF_CONTR_Tx_UART0( void ); XON/XOFF Tx = 0 Disable