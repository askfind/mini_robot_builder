##############################################################################
#                                                                            #
# IAR Atmel AVR C/EC++ Compiler V2.26N/WIN             04/Sep/2002  09:24:02 #
# Copyright 1996-2001 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Source file  =  C:\AVR_CC\Functions\FuncGlobalVar.c                     #
#    Command line =  --cpu=m161 -ms -o C:\AVR_CC\Functions\Debug\Obj\ -I     #
#                    C:\AVR_CC\AVR\SRC\CLIB\INC\ -lC                         #
#                    C:\AVR_CC\Functions\Debug\List\ -lA                     #
#                    C:\AVR_CC\Functions\Debug\List\ -e -y                   #
#                    --initializers_in_flash -z3 --no_cse --no_inline        #
#                    --no_code_motion --no_cross_call --no_clustering        #
#                    --debug -DENABLE_BIT_DEFINITIONS                        #
#                    C:\AVR_CC\Functions\FuncGlobalVar.c                     #
#    List file    =  C:\AVR_CC\Functions\Debug\List\FuncGlobalVar.lst        #
#    Object file  =  C:\AVR_CC\Functions\Debug\Obj\FuncGlobalVar.r90         #
#                                                                            #
#                                                                            #
##############################################################################

      1          #include "iom161.h"
      2          #include "stdio.h"
      3          
      4          /* Set and clear bits in I/O registers can also be declared as macros */
      5          #define SetBit(ADDRESS,BIT) (ADDRESS |= (1<<BIT))
      6          #define ClrBit(ADDRESS,BIT) (ADDRESS &= ~(1<<BIT))
      7          /* Macro for testing of a single bit in an I/O location*/
      8          /* Macro for testing of a single bit in an I/O location*/
      9          #define CheckBit(ADDRESS,BIT) (ADDRESS & (1<<BIT))
     10          
     11          /* Use of bit-mask for status bits*/
     12          /* Define bit macros, note that they are similar to the I/O macros*/
     13          #define SETBIT(x,y) (x |= (y)) /* Set bit y in byte x*/
     14          #define CLEARBIT(x,y) (x &= (~y)) /* Clear bit y in byte x*/
     15          #define CHECKBIT(x,y) (x & (y)) /* Check bit y in byte x*/
     16          
     17          /* UART0 Buffer Defines */
     18          #define RX_BUFFER_SIZE_UART0 32 /* 1,2,4,8,16,32,64,128 or 256 bytes */
     19          #define RX_BUFFER_MASK_UART0 ( RX_BUFFER_SIZE_UART0 - 1 )
     20          #define TX_BUFFER_SIZE_UART0 32 /* 1,2,4,8,16,32,64,128 or 256 bytes */
     21          #define TX_BUFFER_MASK_UART0 ( TX_BUFFER_SIZE_UART0 - 1 )
     22          
     23          #if ( RX_BUFFER_SIZE_UART0 & RX_BUFFER_MASK_UART0 )
     24          #message "RX buffer size is not a power of 2"
     25          #endif
     26          
     27          /* Static Variables */
     28          static volatile unsigned char RxBuf_UART0[RX_BUFFER_SIZE_UART0];
     29          static volatile unsigned char RxHead_UART0;
     30          static volatile unsigned char RxTail_UART0;
     31          static volatile unsigned char TxBuf_UART0[TX_BUFFER_SIZE_UART0];
     32          static volatile unsigned char TxHead_UART0;
     33          static volatile unsigned char TxTail_UART0;
     34          
     35          typedef struct
     36          {
     37          char sec;
     38          }t;

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
     39          t global; /* Declare a global structure*/
   \   t __near global;
   \                     global:
   \   00000000                              DS 1
     40          

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
     41          static char min;
   \   static char __near min;
   \                     min:
   \   00000000                              DS 1
     42          

   \                                 In segment CODE, align 2, keep-with-next
     43          void  main(void)
     44          {
   \   __nearfunc void main();
   \                     main:
   \   00000000   2F19                       MOV     R17,R25
   \   00000002   2F28                       MOV     R18,R24
     45           int i=0;
   \   00000004   E080                       LDI     R24,0
   \   00000006   E090                       LDI     R25,0
     46           for (;;)
     47           {
     48          /*---------*/
     49          /*  Test 1 */
     50          /*
     51          ;     32 bytes in segment CODE
     52          ;      6 bytes in segment INITTAB
     53          ;      2 bytes in segment NEAR_Z
     54          ; 
     55          ;     32 bytes of CODE memory (+ 6 bytes shared)
     56          ;      2 bytes of DATA memory
     57          */
     58          t *time = &global; 
   \                     ??main_0:
   \   00000008   ....                       LDI     R30,LOW(global)
   \   0000000A   ....                       LDI     R31,(global) >> 8
     59          if (++time->sec == 60)
   \   0000000C   8100                       LD      R16,Z
   \   0000000E   9503                       INC     R16
   \   00000010   8300                       ST      Z,R16
     60          {};
     61          
     62          if ( ++min == 60)
   \   00000012   ....                       LDI     R30,LOW(min)
   \   00000014   ....                       LDI     R31,(min) >> 8
   \   00000016   8100                       LD      R16,Z
   \   00000018   9503                       INC     R16
   \   0000001A   8300                       ST      Z,R16
     63          {};
     64          
     65            i++;
   \   0000001C   9601                       ADIW    R25 : R24,1
   \   0000001E   CFF4                       RJMP    ??main_0
     66            };
     67          }

   Maximum stack usage in bytes:

     Function  CSTACK  RSTACK
     --------  ------  ------
     main          0       0 

 
     32 bytes in segment CODE
      6 bytes in segment INITTAB
      2 bytes in segment NEAR_Z
 
     32 bytes of CODE memory (+ 6 bytes shared)
      2 bytes of DATA memory

Errors: none
Warnings: none
