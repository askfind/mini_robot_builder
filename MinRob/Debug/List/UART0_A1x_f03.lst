##############################################################################
#                                                                            #
# IAR Atmel AVR C/EC++ Compiler V2.26N/WIN             04/Sep/2002  16:09:50 #
# Copyright 1996-2001 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Source file  =  C:\AVR_CC\Functions\UART0_A1x_f03.c                     #
#    Command line =  --cpu=m161 -ms -o C:\AVR_CC\Functions\Debug\Obj\ -I     #
#                    C:\AVR_CC\AVR\SRC\CLIB\INC\ -lC                         #
#                    C:\AVR_CC\Functions\Debug\List\ -lA                     #
#                    C:\AVR_CC\Functions\Debug\List\ -e -y                   #
#                    --initializers_in_flash -z3 --no_cse --no_inline        #
#                    --no_code_motion --no_cross_call --no_clustering        #
#                    --debug -DENABLE_BIT_DEFINITIONS                        #
#                    C:\AVR_CC\Functions\UART0_A1x_f03.c                     #
#    List file    =  C:\AVR_CC\Functions\Debug\List\UART0_A1x_f03.lst        #
#    Object file  =  C:\AVR_CC\Functions\Debug\Obj\UART0_A1x_f03.r90         #
#                                                                            #
#                                                                            #
##############################################################################

      1          #include "iom161.h"

   \                                 In segment ABSOLUTE, at 0x2a
   \   union <unnamed> volatile __io _A_UCSR0B;
   \                     _A_UCSR0B:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x2c
   \   union <unnamed> volatile __io _A_UDR0;
   \                     _A_UDR0:
   \   00000000                              DS 1
      2          #include "stdio.h"
      3          #include "uart0_A1x.h"
      4          #include "uart0_A1x_decl.h"

   \                                 In segment NEAR_F, align 1, keep-with-next
   \   unsigned int const __flash fSpeedBaud_UART0;
   \                     fSpeedBaud_UART0:
   \   00000000   2580                       DW 9600

   \                                 In segment NEAR_F, align 1, keep-with-next
   \   unsigned char const __flash fModeU2X0;
   \                     fModeU2X0:
   \   00000000   00                         DB 0

   \                                 In segment NEAR_F, align 1, keep-with-next
   \   unsigned char const __flash fModeCHR90;
   \                     fModeCHR90:
   \   00000000   00                         DB 0

   \                                 In segment NEAR_F, align 1, keep-with-next
   \   unsigned char const __flash fCheckParity_UART0;
   \                     fCheckParity_UART0:
   \   00000000   00                         DB 0

   \                                 In segment NEAR_F, align 1, keep-with-next
   \   unsigned char const __flash fContrStream_UART0;
   \                     fContrStream_UART0:
   \   00000000   00                         DB 0

   \                                 In segment NEAR_F, align 1, keep-with-next
   \   unsigned char const __flash fEnb_DTR0;
   \                     fEnb_DTR0:
   \   00000000   01                         DB 1

   \                                 In segment NEAR_F, align 1, keep-with-next
   \   unsigned char const __flash fBit_DTR0;
   \                     fBit_DTR0:
   \   00000000   01                         DB 1

   \                                 In segment NEAR_F, align 1, keep-with-next
   \   unsigned char const __flash fEnb_DSR0;
   \                     fEnb_DSR0:
   \   00000000   01                         DB 1

   \                                 In segment NEAR_F, align 1, keep-with-next
   \   unsigned char const __flash fBit_DSR0;
   \                     fBit_DSR0:
   \   00000000   01                         DB 1

   \                                 In segment NEAR_F, align 1, keep-with-next
   \   unsigned char const __flash fEnb_RTS0;
   \                     fEnb_RTS0:
   \   00000000   01                         DB 1

   \                                 In segment NEAR_F, align 1, keep-with-next
   \   unsigned char const __flash fBit_RTS0;
   \                     fBit_RTS0:
   \   00000000   01                         DB 1

   \                                 In segment NEAR_F, align 1, keep-with-next
   \   unsigned char const __flash fEnb_CTS0;
   \                     fEnb_CTS0:
   \   00000000   01                         DB 1

   \                                 In segment NEAR_F, align 1, keep-with-next
   \   unsigned char const __flash fBit_CTS0;
   \                     fBit_CTS0:
   \   00000000   01                         DB 1

   \                                 In segment NEAR_F, align 1, keep-with-next
   \   unsigned char const __flash fSym_XON;
   \                     fSym_XON:
   \   00000000   11                         DB 17

   \                                 In segment NEAR_F, align 1, keep-with-next
   \   unsigned char const __flash fSym_XOFF;
   \                     fSym_XOFF:
   \   00000000   13                         DB 19

   \                                 In segment NEAR_F, align 1, keep-with-next
   \   unsigned char const __flash fEnb_XON_XOFF_Tx_UART0;
   \                     fEnb_XON_XOFF_Tx_UART0:
   \   00000000   01                         DB 1

   \                                 In segment NEAR_F, align 1, keep-with-next
   \   unsigned char const __flash fEnb_XON_XOFF_Rx_UART0;
   \                     fEnb_XON_XOFF_Rx_UART0:
   \   00000000   01                         DB 1

   \                                 In segment NEAR_F, align 1, keep-with-next
   \   unsigned char const __flash fEnb_Echo_UART0;
   \                     fEnb_Echo_UART0:
   \   00000000   01                         DB 1

   \                                 In segment NEAR_F, align 1, keep-with-next
   \   unsigned char const __flash fModeMPCM0;
   \                     fModeMPCM0:
   \   00000000   00                         DB 0

   \                                 In segment NEAR_F, align 1, keep-with-next
   \   unsigned char const __flash fEnb_Err_UART0;
   \                     fEnb_Err_UART0:
   \   00000000   00                         DB 0

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   static unsigned char volatile __near CheckParity_UART0;
   \                     CheckParity_UART0:
   \   00000000                              DS 1

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   static unsigned char volatile __near Enb_Err_UART0;
   \                     Enb_Err_UART0:
   \   00000000                              DS 1

   \                                 In segment EEPROM_I, align 1, keep-with-next
   \   unsigned char __eeprom S3e;
   \                     S3e:
   \   00000000   00                         DB 0

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   unsigned char __near S4e;
   \                     S4e:
   \   00000000                              DS 1

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   unsigned char __near S5e;
   \                     S5e:
   \   00000000                              DS 1

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   unsigned char __near S16e;
   \                     S16e:
   \   00000000                              DS 1

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   unsigned char __near S18e;
   \                     S18e:
   \   00000000                              DS 1

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   unsigned char __near S21e;
   \                     S21e:
   \   00000000                              DS 1

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   unsigned char __near S22e;
   \                     S22e:
   \   00000000                              DS 1

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   unsigned char __near S23e;
   \                     S23e:
   \   00000000                              DS 1

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   unsigned char __near S39e;
   \                     S39e:
   \   00000000                              DS 1

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   unsigned char __near S51e;
   \                     S51e:
   \   00000000                              DS 1

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   static unsigned char volatile __near TxBuf_UART0[32];
   \                     TxBuf_UART0:
   \   00000000                              DS 32

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   static unsigned char volatile __near TxHead_UART0;
   \                     TxHead_UART0:
   \   00000000                              DS 1

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   static unsigned char volatile __near TxTail_UART0;
   \                     TxTail_UART0:
   \   00000000                              DS 1

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   static unsigned int volatile __near Rx_Tx_Err_UART0[5];
   \                     Rx_Tx_Err_UART0:
   \   00000000                              DS 10

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   unsigned int volatile __near Count_Tx_UART0;
   \                     Count_Tx_UART0:
   \   00000000                              DS 2
      5          
      6          
      7          ///*************************************
      8          // This method interrupt event TX Empty
      9          //#pragma vector=UART0_TX_vect
     10          //static __interrupt void   UART0_TX()

   \                                 In segment CODE, align 2, keep-with-next
     11          void New_UART0_TX(void) 
     12              {
   \   __nearfunc void New_UART0_TX();
   \                     New_UART0_TX:
   \   00000000   939A                       ST      -Y,R25
   \   00000002   938A                       ST      -Y,R24
     13              unsigned char tmptail;
     14              unsigned char cTmp;
     15              unsigned char cByte;
     16              //volatile unsigned char cPE;
     17              //volatile unsigned char cPERx;    
     18              //volatile unsigned char FlgErr;
     19          
     20          
     21                  /* check if all data is transmitted */
     22                  if ( TxHead_UART0 != TxTail_UART0 )
   \   00000004   9100....                   LDS     R16,TxHead_UART0
   \   00000008   9110....                   LDS     R17,TxTail_UART0
   \   0000000C   1701                       CP      R16,R17
   \   0000000E   F141                       BREQ    ??New_UART0_TX_0
     23                     {
     24                     /* calculate buffer index */
     25                     tmptail = ( TxTail_UART0 + 1 ) & TX_BUFFER_MASK_UART0;
   \   00000010   9180....                   LDS     R24,TxTail_UART0
   \   00000014   9583                       INC     R24
   \   00000016   718F                       ANDI    R24,0x1F
     26                     TxTail_UART0 = tmptail; /* store new index */
   \   00000018   9380....                   STS     TxTail_UART0,R24
     27                     cByte = TxBuf_UART0[tmptail];    // Byte for Tx UART0
   \   0000001C   E090                       LDI     R25,0
   \   0000001E   01FC                       MOVW    R31 : R30,R25 : R24
   \   00000020   ....                       SUBI    R30,LOW((-(TxBuf_UART0) & 0xFFFF))
   \   00000022   ....                       SBCI    R31,(-(TxBuf_UART0) & 0xFFFF) >> 8
   \   00000024   8100                       LD      R16,Z
     28                     /* For Modes CheckParity_UART0 */
     29                        switch (CheckParity_UART0)
   \   00000026   9110....                   LDS     R17,CheckParity_UART0
   \   0000002A   5010                       SUBI    R17,0
   \   0000002C   F091                       BREQ    ??New_UART0_TX_1
   \   0000002E   951A                       DEC     R17
   \   00000030   F019                       BREQ    ??New_UART0_TX_2
   \   00000032   951A                       DEC     R17
   \   00000034   F039                       BREQ    ??New_UART0_TX_3
   \   00000036   C00C                       RJMP    ??New_UART0_TX_4
     30                        {
     31                        case 0:
     32                        break;
     33                        case 1:
     34                        cTmp = CheckParity(cByte);
   \                     ??New_UART0_TX_2:
   \   00000038   ........                   CALL    CheckParity
     35                          if ( cTmp == 0) // cByte parity
   \   0000003C   2300                       TST     R16
   \   0000003E   F449                       BRNE    ??New_UART0_TX_1
     36                          {
     37                           UCSR0B = UCSR0B & ~(1<<TXB80);  // TXB80 = 0
   \   00000040   9850                       CBI     0x0A,0x00
   \   00000042   C007                       RJMP    ??New_UART0_TX_1
     38                          };
     39                        break;
     40                        case 2:
     41                        cTmp = CheckParity(cByte);
   \                     ??New_UART0_TX_3:
   \   00000044   ........                   CALL    CheckParity
     42                          if ( cTmp == 0) // cByte parity
   \   00000048   2300                       TST     R16
   \   0000004A   F419                       BRNE    ??New_UART0_TX_1
     43                          {
     44                           UCSR0B = UCSR0B | (1<<TXB80);   // TXB80 = 1
   \   0000004C   9A50                       SBI     0x0A,0x00
   \   0000004E   C001                       RJMP    ??New_UART0_TX_1
     45                          };  
     46                        break;
     47                        default:
     48                        UCSR0B = UCSR0B | (1<<TXB80);   // TXB80 = 1
   \                     ??New_UART0_TX_4:
   \   00000050   9A50                       SBI     0x0A,0x00
     49                        break;     
     50                        };
     51                    UDR0 = TxBuf_UART0[tmptail]; /* start transmition */
   \                     ??New_UART0_TX_1:
   \   00000052   E090                       LDI     R25,0
   \   00000054   01FC                       MOVW    R31 : R30,R25 : R24
   \   00000056   ....                       SUBI    R30,LOW((-(TxBuf_UART0) & 0xFFFF))
   \   00000058   ....                       SBCI    R31,(-(TxBuf_UART0) & 0xFFFF) >> 8
   \   0000005A   8100                       LD      R16,Z
   \   0000005C   B90C                       OUT     0x0C,R16
   \   0000005E   C001                       RJMP    ??New_UART0_TX_5
     52                          }
     53                  else
     54                          {
     55                          UCSR0B &= ~(1<<UDRIE0); /* disable UDRE interrupt */
   \                     ??New_UART0_TX_0:
   \   00000060   9855                       CBI     0x0A,0x05
     56                          };
     57           }
   \                     ??New_UART0_TX_5:
   \   00000062   9189                       LD      R24,Y+
   \   00000064   9199                       LD      R25,Y+
   \   00000066   9508                       RET
     58          
     59          /**********************/
     60          /* Function IncErrArr */

   \                                 In segment CODE, align 2, keep-with-next
     61          void IncErrArr_UART0 ( int pos )
     62          {
     63           if ( Enb_Err_UART0 != 0 )
   \   __nearfunc void IncErrArr_UART0(int);
   \                     IncErrArr_UART0:
   \   00000000   9120....                   LDS     R18,Enb_Err_UART0
   \   00000004   2322                       TST     R18
   \   00000006   F069                       BREQ    ??IncErrArr_UART0_0
     64            {
     65            Rx_Tx_Err_UART0[pos]++;
   \   00000008   E042                       LDI     R20,2
   \   0000000A   E050                       LDI     R21,0
   \   0000000C   ........                   CALL    ?S_MUL_L02
   \   00000010   01F8                       MOVW    R31 : R30,R17 : R16
   \   00000012   ....                       SUBI    R30,LOW((-(Rx_Tx_Err_UART0) & 0xFFFF))
   \   00000014   ....                       SBCI    R31,(-(Rx_Tx_Err_UART0) & 0xFFFF) >> 8
   \   00000016   8100                       LD      R16,Z
   \   00000018   8111                       LDD     R17,Z+1
   \   0000001A   5F0F                       SUBI    R16,255
   \   0000001C   4F1F                       SBCI    R17,255
   \   0000001E   8300                       ST      Z,R16
   \   00000020   8311                       STD     Z+1,R17
     66            };  
     67          }
   \                     ??IncErrArr_UART0_0:
   \   00000022   9508                       RET
     68          /*  End IncErrArr    */
     69          /*********************/
     70          
     71          

   \                                 In segment CODE, align 2, keep-with-next
     72          void main(void)
     73          {
   \   __nearfunc void main();
   \                     main:
   \   00000000   939A                       ST      -Y,R25
   \   00000002   938A                       ST      -Y,R24
     74            int i;
     75            for (;;)
     76            {
     77             /*--------------------------*/
     78            /*   Test for function UART0 */
     79            /*
     80          ; 
     81          ;      3 bytes in segment ABSOLUTE
     82          ;    222 bytes in segment CODE
     83          ;      1 byte  in segment EEPROM_I
     84          ;      6 bytes in segment INITTAB
     85          ;     21 bytes in segment NEAR_F
     86          ;     66 bytes in segment NEAR_Z
     87          ; 
     88          ;    243 bytes of CODE memory (+ 6 bytes shared)
     89          ;     66 bytes of DATA memory (+ 3 bytes shared)
     90          ;      1 byte  of XDATA memory
     91          ;
     92          */
     93            New_UART0_TX();
   \                     ??main_0:
   \   00000004   ....                       RCALL   New_UART0_TX
     94            /* End Test */
     95            i++;
   \   00000006   9601                       ADIW    R25 : R24,1
   \   00000008   CFFD                       RJMP    ??main_0
     96            /* Test Modul for A1x.c */
     97            };
     98          }

   Maximum stack usage in bytes:

     Function           CSTACK  RSTACK
     --------           ------  ------
     IncErrArr_UART0        0       2 
     New_UART0_TX           2       2 
       -> CheckParity       2       2 
       -> CheckParity       2       2 
     main                   2       2 
       -> New_UART0_TX      2       2 

 
      2 bytes in segment ABSOLUTE
    150 bytes in segment CODE
      1 byte  in segment EEPROM_I
      6 bytes in segment INITTAB
     21 bytes in segment NEAR_F
     57 bytes in segment NEAR_Z
 
    171 bytes of CODE memory (+ 6 bytes shared)
     57 bytes of DATA memory (+ 2 bytes shared)
      1 byte  of XDATA memory

Errors: none
Warnings: none
