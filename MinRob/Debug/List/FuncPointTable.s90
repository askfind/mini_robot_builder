        NAME FuncPointTable

        RTMODEL "__64bit_doubles", "disabled"
        RTMODEL "__cpu", "3"
        RTMODEL "__cpu_name", "AT90Mega161"
        RTMODEL "__enhanced_core", "enabled"
        RTMODEL "__has_elpm", "false"
        RTMODEL "__memory_model", "2"
        RTMODEL "__rt_version", "2.30"

        RSEG CSTACK:DATA:NOROOT(0)
        RSEG NEAR_I:DATA:NOROOT(0)
        RSEG NEAR_ID:CODE:NOROOT(0)
        RSEG NEAR_Z:DATA:NOROOT(0)
        RSEG RSTACK:DATA:NOROOT(0)

        EXTERN ?need_segment_init
        EXTERN ?PROLOGUE4_L09

        PUBWEAK `?<Segment init: NEAR_I>`
        PUBWEAK `?<Segment init: NEAR_Z>`
        PUBLIC main
        FUNCTION main,021a03H
        LOCFRAME CSTACK, 4, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC `swap`
        FUNCTION `swap`,0203H
;     1 #include "iom161.h"
;     2 #include "stdio.h"
;     3 
;     4 /* Set and clear bits in I/O registers can also be declared as macros */
;     5 #define SetBit(ADDRESS,BIT) (ADDRESS |= (1<<BIT))
;     6 #define ClrBit(ADDRESS,BIT) (ADDRESS &= ~(1<<BIT))
;     7 /* Macro for testing of a single bit in an I/O location*/
;     8 /* Macro for testing of a single bit in an I/O location*/
;     9 #define CheckBit(ADDRESS,BIT) (ADDRESS & (1<<BIT))
;    10 
;    11 /* UART0 Buffer Defines */
;    12 #define RX_BUFFER_SIZE_UART0 32 /* 1,2,4,8,16,32,64,128 or 256 bytes */
;    13 #define RX_BUFFER_MASK_UART0 ( RX_BUFFER_SIZE_UART0 - 1 )
;    14 #define TX_BUFFER_SIZE_UART0 32 /* 1,2,4,8,16,32,64,128 or 256 bytes */
;    15 #define TX_BUFFER_MASK_UART0 ( TX_BUFFER_SIZE_UART0 - 1 )
;    16 
;    17 #if ( RX_BUFFER_SIZE_UART0 & RX_BUFFER_MASK_UART0 )
;    18 #message "RX buffer size is not a power of 2"
;    19 #endif
;    20 
;    21 /* Static Variables */

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
;    22 static volatile unsigned char RxBuf_UART0[RX_BUFFER_SIZE_UART0];
; static unsigned char volatile __near RxBuf_UART0[32];
RxBuf_UART0:
	DS 32
;    23 static volatile unsigned char RxHead_UART0;
;    24 static volatile unsigned char RxTail_UART0;
;    25 static volatile unsigned char TxBuf_UART0[TX_BUFFER_SIZE_UART0];
;    26 static volatile unsigned char TxHead_UART0;
;    27 static volatile unsigned char TxTail_UART0;
;    28 

        RSEG NEAR_I:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_I>`
;    29  static volatile unsigned char x=1;
; static unsigned char volatile __near x;
`x`:
	DS 1
	REQUIRE `?<Initializer for x>`

        RSEG NEAR_I:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_I>`
;    30  static volatile unsigned char y=2;
; static unsigned char volatile __near y;
`y`:
	DS 1
	REQUIRE `?<Initializer for y>`
;    31 
;    32 

        RSEG CODE:CODE:NOROOT(1)
;    33 void swap( volatile unsigned char *x, volatile unsigned char *y)
;    34 {
;    35 unsigned char temp;
;    36 temp = *x;
; __nearfunc void swap(unsigned char volatile *, unsigned char volatile *);
`swap`:
	MOV	R30,R16
	MOV	R31,R17
	LD	R20,Z
;    37 *x = *y;
	MOV	R30,R18
	MOV	R31,R19
	LD	R21,Z
	MOV	R30,R16
	MOV	R31,R17
	ST	Z,R21
;    38 *y = temp;
	MOV	R30,R18
	MOV	R31,R19
	ST	Z,R20
;    39 
;    40 }
	RET

        RSEG CODE:CODE:NOROOT(1)
;    41 void  main(void)
;    42 {
; __nearfunc void main();
main:
        FUNCALL main, `swap`
        LOCFRAME CSTACK, 4, STACK
        LOCFRAME RSTACK, 2, STACK
	CALL	?PROLOGUE4_L09
;    43  int i=0;
	LDI	R24,0
	LDI	R25,0
;    44 
;    45  swap( &x, &y);
	LDI	R18,LOW(`y`)
	LDI	R19,(`y`) >> 8
	LDI	R16,LOW(`x`)
	LDI	R17,(`x`) >> 8
	RCALL	`swap`
;    46 
;    47 
;    48  for (;;)
;    49  {
;    50 /*---------*/
;    51 /*  Test 1 */
;    52 /*
;    53 ;
;    54 ;     26 bytes in segment CODE
;    55 ;      6 bytes in segment INITTAB
;    56 ;     32 bytes in segment NEAR_Z
;    57 ;
;    58 ;     26 bytes of CODE memory (+ 6 bytes shared)
;    59 ;     32 bytes of DATA memory
;    60 */
;    61 
;    62   volatile unsigned char *pointer1 = &RxBuf_UART0[0];
??main_0:
	LDI	R26,LOW(RxBuf_UART0)
	LDI	R27,(RxBuf_UART0) >> 8
;    63   volatile unsigned char *pointer2 = &RxBuf_UART0[31];
	LDI	R30,LOW((RxBuf_UART0 + 31))
	LDI	R31,(RxBuf_UART0 + 31) >> 8
;    64   *pointer1++ = *--pointer2;
	LD	R16,-Z
	ST	X,R16
	ADIW	R27 : R26,1
;    65 
;    66 
;    67 /*-----------*/
;    68 /*  Test 2   */
;    69 /*
;    70 ;     20 bytes in segment CODE
;    71 ;      6 bytes in segment INITTAB
;    72 ;     32 bytes in segment NEAR_Z
;    73 ;
;    74 ;     20 bytes of CODE memory (+ 6 bytes shared)
;    75 ;     32 bytes of DATA memory
;    76 */
;    77 //  RxBuf_UART0[0+1] = RxBuf_UART0[31-1];
;    78   i++;
	ADIW	R25 : R24,1
	RJMP	??main_0
;    79   };
;    80 }

        RSEG INITTAB:CODE:NOROOT(0)
`?<Segment init: NEAR_Z>`:
	DW	SFE(NEAR_Z) - SFB(NEAR_Z)
	DW	SFB(NEAR_Z)
	DW	0
	REQUIRE ?need_segment_init

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for x>`:
	DB 1

        RSEG INITTAB:CODE:NOROOT(0)
`?<Segment init: NEAR_I>`:
	DW	SFE(NEAR_I) - SFB(NEAR_I)
	DW	SFB(NEAR_I)
	DW	SFB(NEAR_ID)
	REQUIRE ?need_segment_init

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for y>`:
	DB 2

        END
; 
;     62 bytes in segment CODE
;     12 bytes in segment INITTAB
;      2 bytes in segment NEAR_I
;      2 bytes in segment NEAR_ID
;     32 bytes in segment NEAR_Z
; 
;     64 bytes of CODE memory (+ 12 bytes shared)
;     34 bytes of DATA memory
;
;Errors: none
;Warnings: 1
