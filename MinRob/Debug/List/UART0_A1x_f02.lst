##############################################################################
#                                                                            #
# IAR Atmel AVR C/EC++ Compiler V2.26N/WIN             04/Sep/2002  14:37:29 #
# Copyright 1996-2001 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Source file  =  C:\AVR_CC\Functions\UART0_A1x_f02.c                     #
#    Command line =  --cpu=m161 -ms -o C:\AVR_CC\Functions\Debug\Obj\ -I     #
#                    C:\AVR_CC\AVR\SRC\CLIB\INC\ -lC                         #
#                    C:\AVR_CC\Functions\Debug\List\ -lA                     #
#                    C:\AVR_CC\Functions\Debug\List\ -e -y                   #
#                    --initializers_in_flash -z3 --no_cse --no_inline        #
#                    --no_code_motion --no_cross_call --no_clustering        #
#                    --debug -DENABLE_BIT_DEFINITIONS                        #
#                    C:\AVR_CC\Functions\UART0_A1x_f02.c                     #
#    List file    =  C:\AVR_CC\Functions\Debug\List\UART0_A1x_f02.lst        #
#    Object file  =  C:\AVR_CC\Functions\Debug\Obj\UART0_A1x_f02.r90         #
#                                                                            #
#                                                                            #
##############################################################################

      1          #include "iom161.h"

   \                                 In segment ABSOLUTE, at 0x2a
   \   union <unnamed> volatile __io _A_UCSR0B;
   \                     _A_UCSR0B:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x2b
   \   union <unnamed> volatile __io _A_UCSR0A;
   \                     _A_UCSR0A:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x2c
   \   union <unnamed> volatile __io _A_UDR0;
   \                     _A_UDR0:
   \   00000000                              DS 1
      2          #include "stdio.h"
      3          #include "uart0_A1x.h"
      4          #include "uart0_A1x_decl.h"

   \                                 In segment NEAR_F, align 1, keep-with-next
   \   unsigned int const __flash fSpeedBaud_UART0;
   \                     fSpeedBaud_UART0:
   \   00000000   2580                       DW 9600

   \                                 In segment NEAR_F, align 1, keep-with-next
   \   unsigned char const __flash fModeU2X0;
   \                     fModeU2X0:
   \   00000000   00                         DB 0

   \                                 In segment NEAR_F, align 1, keep-with-next
   \   unsigned char const __flash fModeCHR90;
   \                     fModeCHR90:
   \   00000000   00                         DB 0

   \                                 In segment NEAR_F, align 1, keep-with-next
   \   unsigned char const __flash fCheckParity_UART0;
   \                     fCheckParity_UART0:
   \   00000000   00                         DB 0

   \                                 In segment NEAR_F, align 1, keep-with-next
   \   unsigned char const __flash fContrStream_UART0;
   \                     fContrStream_UART0:
   \   00000000   00                         DB 0

   \                                 In segment NEAR_F, align 1, keep-with-next
   \   unsigned char const __flash fEnb_DTR0;
   \                     fEnb_DTR0:
   \   00000000   01                         DB 1

   \                                 In segment NEAR_F, align 1, keep-with-next
   \   unsigned char const __flash fBit_DTR0;
   \                     fBit_DTR0:
   \   00000000   01                         DB 1

   \                                 In segment NEAR_F, align 1, keep-with-next
   \   unsigned char const __flash fEnb_DSR0;
   \                     fEnb_DSR0:
   \   00000000   01                         DB 1

   \                                 In segment NEAR_F, align 1, keep-with-next
   \   unsigned char const __flash fBit_DSR0;
   \                     fBit_DSR0:
   \   00000000   01                         DB 1

   \                                 In segment NEAR_F, align 1, keep-with-next
   \   unsigned char const __flash fEnb_RTS0;
   \                     fEnb_RTS0:
   \   00000000   01                         DB 1

   \                                 In segment NEAR_F, align 1, keep-with-next
   \   unsigned char const __flash fBit_RTS0;
   \                     fBit_RTS0:
   \   00000000   01                         DB 1

   \                                 In segment NEAR_F, align 1, keep-with-next
   \   unsigned char const __flash fEnb_CTS0;
   \                     fEnb_CTS0:
   \   00000000   01                         DB 1

   \                                 In segment NEAR_F, align 1, keep-with-next
   \   unsigned char const __flash fBit_CTS0;
   \                     fBit_CTS0:
   \   00000000   01                         DB 1

   \                                 In segment NEAR_F, align 1, keep-with-next
   \   unsigned char const __flash fSym_XON;
   \                     fSym_XON:
   \   00000000   11                         DB 17

   \                                 In segment NEAR_F, align 1, keep-with-next
   \   unsigned char const __flash fSym_XOFF;
   \                     fSym_XOFF:
   \   00000000   13                         DB 19

   \                                 In segment NEAR_F, align 1, keep-with-next
   \   unsigned char const __flash fEnb_XON_XOFF_Tx_UART0;
   \                     fEnb_XON_XOFF_Tx_UART0:
   \   00000000   01                         DB 1

   \                                 In segment NEAR_F, align 1, keep-with-next
   \   unsigned char const __flash fEnb_XON_XOFF_Rx_UART0;
   \                     fEnb_XON_XOFF_Rx_UART0:
   \   00000000   01                         DB 1

   \                                 In segment NEAR_F, align 1, keep-with-next
   \   unsigned char const __flash fEnb_Echo_UART0;
   \                     fEnb_Echo_UART0:
   \   00000000   01                         DB 1

   \                                 In segment NEAR_F, align 1, keep-with-next
   \   unsigned char const __flash fModeMPCM0;
   \                     fModeMPCM0:
   \   00000000   00                         DB 0

   \                                 In segment NEAR_F, align 1, keep-with-next
   \   unsigned char const __flash fEnb_Err_UART0;
   \                     fEnb_Err_UART0:
   \   00000000   00                         DB 0

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   static unsigned char volatile __near Enb_Err_UART0;
   \                     Enb_Err_UART0:
   \   00000000                              DS 1

   \                                 In segment EEPROM_I, align 1, keep-with-next
   \   unsigned char __eeprom S3e;
   \                     S3e:
   \   00000000   00                         DB 0

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   unsigned char __near S4e;
   \                     S4e:
   \   00000000                              DS 1

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   unsigned char __near S5e;
   \                     S5e:
   \   00000000                              DS 1

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   unsigned char __near S16e;
   \                     S16e:
   \   00000000                              DS 1

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   unsigned char __near S18e;
   \                     S18e:
   \   00000000                              DS 1

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   unsigned char __near S21e;
   \                     S21e:
   \   00000000                              DS 1

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   unsigned char __near S22e;
   \                     S22e:
   \   00000000                              DS 1

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   unsigned char __near S23e;
   \                     S23e:
   \   00000000                              DS 1

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   unsigned char __near S39e;
   \                     S39e:
   \   00000000                              DS 1

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   unsigned char __near S51e;
   \                     S51e:
   \   00000000                              DS 1

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   static unsigned char volatile __near RxBuf_UART0[32];
   \                     RxBuf_UART0:
   \   00000000                              DS 32

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   static unsigned char volatile __near RxHead_UART0;
   \                     RxHead_UART0:
   \   00000000                              DS 1

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   static unsigned char volatile __near RxTail_UART0;
   \                     RxTail_UART0:
   \   00000000                              DS 1

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   static unsigned int volatile __near Rx_Tx_Err_UART0[5];
   \                     Rx_Tx_Err_UART0:
   \   00000000                              DS 10

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   static unsigned long volatile __near Count_Rx_UART0;
   \                     Count_Rx_UART0:
   \   00000000                              DS 4

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   static unsigned int volatile __near Count_Rx_Err_UART0;
   \                     Count_Rx_Err_UART0:
   \   00000000                              DS 2

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   unsigned int volatile __near Count_Tx_UART0;
   \                     Count_Tx_UART0:
   \   00000000                              DS 2

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
   \   t __near global;
   \                     global:
   \   00000000                              DS 4
      5          
      6          
      7          /*********************************/
      8          /*   New function UART0_RX(void) */
      9          //#pragma vector=UART0_RX_vect
     10          //static __interrupt void UART0_RX(void)

   \                                 In segment CODE, align 2, keep-with-next
     11          void   New_UART0_RX(void)  // debugerd
     12            {  
   \   __nearfunc void New_UART0_RX();
   \                     New_UART0_RX:
   \   00000000   939A                       ST      -Y,R25
   \   00000002   938A                       ST      -Y,R24
   \   00000004   9721                       SBIW    R29 : R28,1
     13              unsigned char tmphead;
     14              unsigned char cTmp;
     15              unsigned char cByte;
     16              //unsigned char cPE;
     17              unsigned char cPERx;
     18              volatile unsigned char FlgErr;
     19             
     20              FlgErr = 0;  // '0' - No Errors Rx    
   \   00000006   E000                       LDI     R16,0
   \   00000008   8308                       ST      Y,R16
     21          
     22              //cTmp = UCSR0A & 0x10;  // Test bit FE0=?
     23              if ( (UCSR0A & 0x10) != 0 )
   \   0000000A   9B5C                       SBIS    0x0B,0x04
   \   0000000C   C005                       RJMP    ??New_UART0_RX_0
     24                {
     25                FlgErr = 1;         // '1' - Rx byte yes Error
   \   0000000E   E001                       LDI     R16,1
   \   00000010   8308                       ST      Y,R16
     26                IncErrArr_UART0(1); // increment Rx_Tx_Err_UART0[1] 
   \   00000012   E001                       LDI     R16,1
   \   00000014   E010                       LDI     R17,0
   \   00000016   ....                       RCALL   IncErrArr_UART0
     27                };
     28                    
     29              //cTmp = UCSR0A & 0x08; // Test bit OE0=?       
     30               if ( (UCSR0A & 0x08 != 0) )  
   \                     ??New_UART0_RX_0:
   \   00000018   9B58                       SBIS    0x0B,0x00
   \   0000001A   C005                       RJMP    ??New_UART0_RX_1
     31                {
     32                FlgErr = 1;
   \   0000001C   E001                       LDI     R16,1
   \   0000001E   8308                       ST      Y,R16
     33                IncErrArr_UART0(2); // increment Rx_Tx_Err_UART0[2] 
   \   00000020   E002                       LDI     R16,2
   \   00000022   E010                       LDI     R17,0
   \   00000024   ....                       RCALL   IncErrArr_UART0
     34                    };
     35          
     36               cByte = UDR0;                  // Read Byte Rx from UDR0
   \                     ??New_UART0_RX_1:
   \   00000026   B19C                       IN      R25,0x0C
     37               cPERx = (UCSR0B & 0x02) >> 1;  // Read 9 Bit Rx
   \   00000028   B18A                       IN      R24,0x0A
   \   0000002A   7082                       ANDI    R24,0x02
   \   0000002C   9585                       ASR     R24
     38          
     39               //FlgErr = CalculParity(cByte,cPERx);
     40          
     41               cTmp = CheckParity( cByte) ;
   \   0000002E   2F09                       MOV     R16,R25
   \   00000030   ........                   CALL    CheckParity
     42               if ( cPERx == 1 )
   \   00000034   3081                       CPI     R24,1
   \   00000036   F419                       BRNE    ??New_UART0_RX_2
     43                  {
     44                  cTmp = 0xff - cTmp;     // Calculate parity and cPERx
   \   00000038   EF1F                       LDI     R17,255
   \   0000003A   1B10                       SUB     R17,R16
   \   0000003C   2F01                       MOV     R16,R17
     45                  };             
     46                /* return 
     47                   if cTmp = 0   then parity    (cByte and cPERx) 
     48                   if cTmp = 255 then no parity 
     49                */ 
     50                 
     51              /* Check buffer Rx */ 
     52               if ( FlgErr == 0 )  // No Errors for Rx
   \                     ??New_UART0_RX_2:
   \   0000003E   8108                       LD      R16,Y
   \   00000040   2300                       TST     R16
   \   00000042   F531                       BRNE    ??New_UART0_RX_3
     53                  {
     54                  /* calculate buffer index */
     55                  tmphead = ( RxHead_UART0 + 1 ) & RX_BUFFER_MASK_UART0;
   \   00000044   9180....                   LDS     R24,RxHead_UART0
   \   00000048   9583                       INC     R24
   \   0000004A   718F                       ANDI    R24,0x1F
     56                  RxHead_UART0 = tmphead; /* store new index */
   \   0000004C   9380....                   STS     RxHead_UART0,R24
     57                  if ( tmphead == RxTail_UART0 )
   \   00000050   9100....                   LDS     R16,RxTail_UART0
   \   00000054   1780                       CP      R24,R16
   \   00000056   F419                       BRNE    ??New_UART0_RX_4
     58                          {
     59                          IncErrArr_UART0(4); // increment Rx_Tx_Err_UART0[4] 
   \   00000058   E004                       LDI     R16,4
   \   0000005A   E010                       LDI     R17,0
   \   0000005C   ....                       RCALL   IncErrArr_UART0
     60                          };
     61                  RxBuf_UART0[tmphead] = cByte; /* store received data in buffer */
   \                     ??New_UART0_RX_4:
   \   0000005E   2F08                       MOV     R16,R24
   \   00000060   E010                       LDI     R17,0
   \   00000062   01F8                       MOVW    R31 : R30,R17 : R16
   \   00000064   ....                       SUBI    R30,LOW((-(RxBuf_UART0) & 0xFFFF))
   \   00000066   ....                       SBCI    R31,(-(RxBuf_UART0) & 0xFFFF) >> 8
   \   00000068   8390                       ST      Z,R25
     62                  if ( Enb_Err_UART0 == 1 )
   \   0000006A   9100....                   LDS     R16,Enb_Err_UART0
   \   0000006E   3001                       CPI     R16,1
   \   00000070   F4D9                       BRNE    ??New_UART0_RX_5
     63                    {
     64                    Count_Rx_UART0++;   
   \   00000072   ....                       LDI     R30,LOW(Count_Rx_UART0)
   \   00000074   ....                       LDI     R31,(Count_Rx_UART0) >> 8
   \   00000076   8100                       LD      R16,Z
   \   00000078   8111                       LDD     R17,Z+1
   \   0000007A   8122                       LDD     R18,Z+2
   \   0000007C   8133                       LDD     R19,Z+3
   \   0000007E   5F0F                       SUBI    R16,255
   \   00000080   4F1F                       SBCI    R17,255
   \   00000082   4F2F                       SBCI    R18,255
   \   00000084   4F3F                       SBCI    R19,255
   \   00000086   8300                       ST      Z,R16
   \   00000088   8311                       STD     Z+1,R17
   \   0000008A   8322                       STD     Z+2,R18
   \   0000008C   8333                       STD     Z+3,R19
   \   0000008E   C00C                       RJMP    ??New_UART0_RX_5
     65                    };
     66                  }
     67                  else        // Yes Errors Rx for UART0
     68                  {
     69                  if ( Enb_Err_UART0 == 1 )
   \                     ??New_UART0_RX_3:
   \   00000090   9100....                   LDS     R16,Enb_Err_UART0
   \   00000094   3001                       CPI     R16,1
   \   00000096   F441                       BRNE    ??New_UART0_RX_5
     70                    {
     71                    Count_Rx_Err_UART0++;   
   \   00000098   ....                       LDI     R30,LOW(Count_Rx_Err_UART0)
   \   0000009A   ....                       LDI     R31,(Count_Rx_Err_UART0) >> 8
   \   0000009C   8100                       LD      R16,Z
   \   0000009E   8111                       LDD     R17,Z+1
   \   000000A0   5F0F                       SUBI    R16,255
   \   000000A2   4F1F                       SBCI    R17,255
   \   000000A4   8300                       ST      Z,R16
   \   000000A6   8311                       STD     Z+1,R17
     72                    };        
     73                  };
     74            }        
   \                     ??New_UART0_RX_5:
   \   000000A8   9621                       ADIW    R29 : R28,1
   \   000000AA   9189                       LD      R24,Y+
   \   000000AC   9199                       LD      R25,Y+
   \   000000AE   9508                       RET
     75          /* End  New function UART0_RX(void) */
     76          /************************************/
     77          
     78          /**********************/
     79          /* Function IncErrArr */

   \                                 In segment CODE, align 2, keep-with-next
     80          void IncErrArr_UART0 ( int pos )
     81          {
     82           if ( Enb_Err_UART0 != 0 )
   \   __nearfunc void IncErrArr_UART0(int);
   \                     IncErrArr_UART0:
   \   00000000   9120....                   LDS     R18,Enb_Err_UART0
   \   00000004   2322                       TST     R18
   \   00000006   F069                       BREQ    ??IncErrArr_UART0_0
     83            {
     84            Rx_Tx_Err_UART0[pos]++;
   \   00000008   E042                       LDI     R20,2
   \   0000000A   E050                       LDI     R21,0
   \   0000000C   ........                   CALL    ?S_MUL_L02
   \   00000010   01F8                       MOVW    R31 : R30,R17 : R16
   \   00000012   ....                       SUBI    R30,LOW((-(Rx_Tx_Err_UART0) & 0xFFFF))
   \   00000014   ....                       SBCI    R31,(-(Rx_Tx_Err_UART0) & 0xFFFF) >> 8
   \   00000016   8100                       LD      R16,Z
   \   00000018   8111                       LDD     R17,Z+1
   \   0000001A   5F0F                       SUBI    R16,255
   \   0000001C   4F1F                       SBCI    R17,255
   \   0000001E   8300                       ST      Z,R16
   \   00000020   8311                       STD     Z+1,R17
     85            };  
     86          }
   \                     ??IncErrArr_UART0_0:
   \   00000022   9508                       RET
     87          /*  End IncErrArr    */
     88          /*********************/
     89          
     90          

   \                                 In segment CODE, align 2, keep-with-next
     91          void main(void)
     92          {
   \   __nearfunc void main();
   \                     main:
   \   00000000   939A                       ST      -Y,R25
   \   00000002   938A                       ST      -Y,R24
     93            int i;
     94            for (;;)
     95            {
     96             /*--------------------------*/
     97            /*   Test for function UART0 */
     98            /*
     99          ; 
    100          ;      3 bytes in segment ABSOLUTE
    101          ;    222 bytes in segment CODE
    102          ;      1 byte  in segment EEPROM_I
    103          ;      6 bytes in segment INITTAB
    104          ;     21 bytes in segment NEAR_F
    105          ;     66 bytes in segment NEAR_Z
    106          ; 
    107          ;    243 bytes of CODE memory (+ 6 bytes shared)
    108          ;     66 bytes of DATA memory (+ 3 bytes shared)
    109          ;      1 byte  of XDATA memory
    110          ;
    111          */
    112            New_UART0_RX();
   \                     ??main_0:
   \   00000004   ....                       RCALL   New_UART0_RX
    113            /* End Test */
    114            i++;
   \   00000006   9601                       ADIW    R25 : R24,1
   \   00000008   CFFD                       RJMP    ??main_0
    115            /* Test Modul for A1x.c */
    116            };
    117          }

   Maximum stack usage in bytes:

     Function              CSTACK  RSTACK
     --------              ------  ------
     IncErrArr_UART0           0       2 
     New_UART0_RX              3       2 
       -> IncErrArr_UART0      3       2 
       -> IncErrArr_UART0      3       2 
       -> CheckParity          3       2 
       -> IncErrArr_UART0      3       2 
     main                      2       2 
       -> New_UART0_RX         2       2 

 
      3 bytes in segment ABSOLUTE
    222 bytes in segment CODE
      1 byte  in segment EEPROM_I
      6 bytes in segment INITTAB
     21 bytes in segment NEAR_F
     66 bytes in segment NEAR_Z
 
    243 bytes of CODE memory (+ 6 bytes shared)
     66 bytes of DATA memory (+ 3 bytes shared)
      1 byte  of XDATA memory

Errors: none
Warnings: none
