        NAME FuncGlobalVar

        RTMODEL "__64bit_doubles", "disabled"
        RTMODEL "__cpu", "3"
        RTMODEL "__cpu_name", "AT90Mega161"
        RTMODEL "__enhanced_core", "enabled"
        RTMODEL "__has_elpm", "false"
        RTMODEL "__memory_model", "2"
        RTMODEL "__rt_version", "2.30"

        RSEG CSTACK:DATA:NOROOT(0)
        RSEG NEAR_Z:DATA:NOROOT(0)
        RSEG RSTACK:DATA:NOROOT(0)

        EXTERN ?need_segment_init

        PUBWEAK `?<Segment init: NEAR_Z>`
        PUBLIC global
        PUBLIC main
        FUNCTION main,0a03H
;     1 #include "iom161.h"
;     2 #include "stdio.h"
;     3 
;     4 /* Set and clear bits in I/O registers can also be declared as macros */
;     5 #define SetBit(ADDRESS,BIT) (ADDRESS |= (1<<BIT))
;     6 #define ClrBit(ADDRESS,BIT) (ADDRESS &= ~(1<<BIT))
;     7 /* Macro for testing of a single bit in an I/O location*/
;     8 /* Macro for testing of a single bit in an I/O location*/
;     9 #define CheckBit(ADDRESS,BIT) (ADDRESS & (1<<BIT))
;    10 
;    11 /* Use of bit-mask for status bits*/
;    12 /* Define bit macros, note that they are similar to the I/O macros*/
;    13 #define SETBIT(x,y) (x |= (y)) /* Set bit y in byte x*/
;    14 #define CLEARBIT(x,y) (x &= (~y)) /* Clear bit y in byte x*/
;    15 #define CHECKBIT(x,y) (x & (y)) /* Check bit y in byte x*/
;    16 
;    17 /* UART0 Buffer Defines */
;    18 #define RX_BUFFER_SIZE_UART0 32 /* 1,2,4,8,16,32,64,128 or 256 bytes */
;    19 #define RX_BUFFER_MASK_UART0 ( RX_BUFFER_SIZE_UART0 - 1 )
;    20 #define TX_BUFFER_SIZE_UART0 32 /* 1,2,4,8,16,32,64,128 or 256 bytes */
;    21 #define TX_BUFFER_MASK_UART0 ( TX_BUFFER_SIZE_UART0 - 1 )
;    22 
;    23 #if ( RX_BUFFER_SIZE_UART0 & RX_BUFFER_MASK_UART0 )
;    24 #message "RX buffer size is not a power of 2"
;    25 #endif
;    26 
;    27 /* Static Variables */
;    28 static volatile unsigned char RxBuf_UART0[RX_BUFFER_SIZE_UART0];
;    29 static volatile unsigned char RxHead_UART0;
;    30 static volatile unsigned char RxTail_UART0;
;    31 static volatile unsigned char TxBuf_UART0[TX_BUFFER_SIZE_UART0];
;    32 static volatile unsigned char TxHead_UART0;
;    33 static volatile unsigned char TxTail_UART0;
;    34 
;    35 typedef struct
;    36 {
;    37 char sec;
;    38 }t;

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
;    39 t global; /* Declare a global structure*/
; t __near global;
global:
	DS 1
;    40 

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
;    41 static char min;
; static char __near min;
min:
	DS 1
;    42 

        RSEG CODE:CODE:NOROOT(1)
;    43 void  main(void)
;    44 {
; __nearfunc void main();
main:
	MOV	R17,R25
	MOV	R18,R24
;    45  int i=0;
	LDI	R24,0
	LDI	R25,0
;    46  for (;;)
;    47  {
;    48 /*---------*/
;    49 /*  Test 1 */
;    50 /*
;    51 ;     32 bytes in segment CODE
;    52 ;      6 bytes in segment INITTAB
;    53 ;      2 bytes in segment NEAR_Z
;    54 ; 
;    55 ;     32 bytes of CODE memory (+ 6 bytes shared)
;    56 ;      2 bytes of DATA memory
;    57 */
;    58 t *time = &global; 
??main_0:
	LDI	R30,LOW(global)
	LDI	R31,(global) >> 8
;    59 if (++time->sec == 60)
	LD	R16,Z
	INC	R16
	ST	Z,R16
;    60 {};
;    61 
;    62 if ( ++min == 60)
	LDI	R30,LOW(min)
	LDI	R31,(min) >> 8
	LD	R16,Z
	INC	R16
	ST	Z,R16
;    63 {};
;    64 
;    65   i++;
	ADIW	R25 : R24,1
	RJMP	??main_0
;    66   };
;    67 }

        RSEG INITTAB:CODE:NOROOT(0)
`?<Segment init: NEAR_Z>`:
	DW	SFE(NEAR_Z) - SFB(NEAR_Z)
	DW	SFB(NEAR_Z)
	DW	0
	REQUIRE ?need_segment_init

        END
; 
;     32 bytes in segment CODE
;      6 bytes in segment INITTAB
;      2 bytes in segment NEAR_Z
; 
;     32 bytes of CODE memory (+ 6 bytes shared)
;      2 bytes of DATA memory
;
;Errors: none
;Warnings: none
