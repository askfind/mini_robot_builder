        NAME FuncFlashConst

        RTMODEL "__64bit_doubles", "disabled"
        RTMODEL "__cpu", "3"
        RTMODEL "__cpu_name", "AT90Mega161"
        RTMODEL "__enhanced_core", "enabled"
        RTMODEL "__has_elpm", "false"
        RTMODEL "__memory_model", "2"
        RTMODEL "__rt_version", "2.30"

        RSEG CSTACK:DATA:NOROOT(0)
        RSEG RSTACK:DATA:NOROOT(0)


        PUBWEAK _A_UDR0
        PUBLIC main
        FUNCTION main,0a03H
        PUBLIC max
        PUBLIC string
;     1 #include "iom161.h"

        ASEGN ABSOLUTE:DATA:NOROOT,02cH
; union <unnamed> volatile __io _A_UDR0;
_A_UDR0:
	DS 1
;     2 #include "stdio.h"
;     3 
;     4 /* Set and clear bits in I/O registers can also be declared as macros */
;     5 #define SetBit(ADDRESS,BIT) (ADDRESS |= (1<<BIT))
;     6 #define ClrBit(ADDRESS,BIT) (ADDRESS &= ~(1<<BIT))
;     7 /* Macro for testing of a single bit in an I/O location*/
;     8 /* Macro for testing of a single bit in an I/O location*/
;     9 #define CheckBit(ADDRESS,BIT) (ADDRESS & (1<<BIT))
;    10 
;    11 /* Use of bit-mask for status bits*/
;    12 /* Define bit macros, note that they are similar to the I/O macros*/
;    13 #define SETBIT(x,y) (x |= (y)) /* Set bit y in byte x*/
;    14 #define CLEARBIT(x,y) (x &= (~y)) /* Clear bit y in byte x*/
;    15 #define CHECKBIT(x,y) (x & (y)) /* Check bit y in byte x*/
;    16 
;    17 /* UART0 Buffer Defines */
;    18 #define RX_BUFFER_SIZE_UART0 32 /* 1,2,4,8,16,32,64,128 or 256 bytes */
;    19 #define RX_BUFFER_MASK_UART0 ( RX_BUFFER_SIZE_UART0 - 1 )
;    20 #define TX_BUFFER_SIZE_UART0 32 /* 1,2,4,8,16,32,64,128 or 256 bytes */
;    21 #define TX_BUFFER_MASK_UART0 ( TX_BUFFER_SIZE_UART0 - 1 )
;    22 
;    23 #if ( RX_BUFFER_SIZE_UART0 & RX_BUFFER_MASK_UART0 )
;    24 #message "RX buffer size is not a power of 2"
;    25 #endif
;    26 
;    27 /* Static Variables */
;    28 static volatile unsigned char RxBuf_UART0[RX_BUFFER_SIZE_UART0];
;    29 static volatile unsigned char RxHead_UART0;
;    30 static volatile unsigned char RxTail_UART0;
;    31 static volatile unsigned char TxBuf_UART0[TX_BUFFER_SIZE_UART0];
;    32 static volatile unsigned char TxHead_UART0;
;    33 static volatile unsigned char TxTail_UART0;
;    34 
;    35 #pragma type_attribute=__flash

        RSEG NEAR_F:CODE:NOROOT(0)
;    36 char max = 127;
; char __flash max;
max:
	DB 127
;    37 #pragma type_attribute=__flash

        RSEG NEAR_F:CODE:NOROOT(0)
;    38 char string[] = "This string is stored in flash";
; char __flash string[31];
string:
	DB "This string is stored in flash"
;    39 

        RSEG CODE:CODE:NOROOT(1)
;    40 void main(void)
;    41 {
;    42   int i;
;    43   unsigned char c;
;    44   i=10;
; __nearfunc void main();
main:
	LDI	R16,10
	LDI	R17,0
;    45   c = (unsigned char) i;
	MOV	R18,R16
;    46   i=49;
	LDI	R16,49
	LDI	R17,0
;    47   c = (unsigned char) i;
	MOV	R18,R16
;    48   
;    49 /* test 1 */
;    50 /*
;    51 char __flash *flashpointer; // Declare flash pointer
;    52 flashpointer = &string[0];// Assign pointer to flash location
;    53 */
;    54 /* 
;    55 ;      1 byte  in segment ABSOLUTE
;    56 ;     10 bytes in segment CODE
;    57 ;     32 bytes in segment NEAR_F
;    58 ; 
;    59 ;     42 bytes of CODE memory
;    60 ;      0 bytes of DATA memory (+ 1 byte shared)
;    61 */
;    62 // UDR0 = *flashpointer;      // Read data from flash and write to UART
;    63 
;    64 /* test 2 */
;    65 /*
;    66 ;      1 byte  in segment ABSOLUTE
;    67 ;     10 bytes in segment CODE
;    68 ;     32 bytes in segment NEAR_F
;    69 ; 
;    70 ;     42 bytes of CODE memory
;    71 ;      0 bytes of DATA memory (+ 1 byte shared)
;    72 */
;    73 UDR0 = string[0];
	LDI	R30,LOW(string)
	LDI	R31,(string) >> 8
	LPM	R16,Z
	OUT	0x0C,R16
;    74 }
	RET

        END
; 
;      1 byte  in segment ABSOLUTE
;     22 bytes in segment CODE
;     32 bytes in segment NEAR_F
; 
;     54 bytes of CODE memory
;      0 bytes of DATA memory (+ 1 byte shared)
;
;Errors: none
;Warnings: 1
